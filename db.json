{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","path":"css/gallery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/indexcover.css","path":"css/indexcover.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/dark.css","path":"css/dark.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/post.css","path":"css/post.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/reward.css","path":"css/reward.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/02.jpg","path":"medias/02.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/01.jpg","path":"medias/01.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/03.jpg","path":"medias/03.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpeg","path":"medias/avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.png","path":"medias/avatar.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","path":"libs/others/star.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","path":"libs/prism/prism.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","path":"libs/prism/prism.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","path":"libs/typed/typed.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.png","path":"medias/banner/0.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","path":"libs/waline/Waline.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.png","path":"medias/banner/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.png","path":"medias/banner/2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.png","path":"medias/banner/3.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.png","path":"medias/banner/5.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.png","path":"medias/banner/6.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.png","path":"medias/banner/4.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/3.png","path":"medias/barrager/3.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/4.png","path":"medias/barrager/4.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/5.png","path":"medias/barrager/5.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/6.png","path":"medias/barrager/6.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","path":"libs/awesome/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","path":"libs/awesome/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/books/source/JAVA核心面试知识整理.pdf","path":"books/source/JAVA核心面试知识整理.pdf","modified":0,"renderable":0},{"_id":"source/books/source/石杉的架构笔记[第二版]最新版本.pdf","path":"books/source/石杉的架构笔记[第二版]最新版本.pdf","modified":0,"renderable":0},{"_id":"source/books/source/面经--倾听潮汐.pdf","path":"books/source/面经--倾听潮汐.pdf","modified":0,"renderable":0},{"_id":"source/img/Gateway API相关组件.png","path":"img/Gateway API相关组件.png","modified":0,"renderable":0},{"_id":"source/img/Ingress.png","path":"img/Ingress.png","modified":0,"renderable":0},{"_id":"source/img/Kubernetes Gateway技术架构图.png","path":"img/Kubernetes Gateway技术架构图.png","modified":0,"renderable":0},{"_id":"source/img/SAGA模式.png","path":"img/SAGA模式.png","modified":0,"renderable":0},{"_id":"source/img/TCC模式.png","path":"img/TCC模式.png","modified":0,"renderable":0},{"_id":"source/img/XA模式.png","path":"img/XA模式.png","modified":0,"renderable":0},{"_id":"source/img/cap.png","path":"img/cap.png","modified":0,"renderable":0},{"_id":"source/img/fmt模式.png","path":"img/fmt模式.png","modified":0,"renderable":0},{"_id":"source/img/scg-filter流程.png","path":"img/scg-filter流程.png","modified":0,"renderable":0},{"_id":"source/img/hango设计架构.png","path":"img/hango设计架构.png","modified":0,"renderable":0},{"_id":"source/img/scg-lb.png","path":"img/scg-lb.png","modified":0,"renderable":0},{"_id":"source/img/scg-vip问题.png","path":"img/scg-vip问题.png","modified":0,"renderable":0},{"_id":"source/img/scg核心原理.png","path":"img/scg核心原理.png","modified":0,"renderable":0},{"_id":"source/img/scg核心原理2.png","path":"img/scg核心原理2.png","modified":0,"renderable":0},{"_id":"source/img/scg配置监听.png","path":"img/scg配置监听.png","modified":0,"renderable":0},{"_id":"source/img/scg泛化调用.png","path":"img/scg泛化调用.png","modified":0,"renderable":0},{"_id":"source/img/scg集群部署.png","path":"img/scg集群部署.png","modified":0,"renderable":0},{"_id":"source/img/tctmrm.png","path":"img/tctmrm.png","modified":0,"renderable":0},{"_id":"source/img/事务acid.png","path":"img/事务acid.png","modified":0,"renderable":0},{"_id":"source/img/分布式事务模型.png","path":"img/分布式事务模型.png","modified":0,"renderable":0},{"_id":"source/img/四种模式对比.png","path":"img/四种模式对比.png","modified":0,"renderable":0},{"_id":"source/img/分布式事务的问题.png","path":"img/分布式事务的问题.png","modified":0,"renderable":0},{"_id":"source/img/接口调试最终设计.png","path":"img/接口调试最终设计.png","modified":0,"renderable":0},{"_id":"source/img/接口调试整体方案.png","path":"img/接口调试整体方案.png","modified":0,"renderable":0},{"_id":"source/img/平滑纳管-集群隔离.png","path":"img/平滑纳管-集群隔离.png","modified":0,"renderable":0},{"_id":"source/img/熔断.png","path":"img/熔断.png","modified":0,"renderable":0},{"_id":"source/img/虚拟网关功能架构图.png","path":"img/虚拟网关功能架构图.png","modified":0,"renderable":0},{"_id":"source/img/2023/swich3.jpg","path":"img/2023/swich3.jpg","modified":0,"renderable":0},{"_id":"source/img/2023/swich1.jpg","path":"img/2023/swich1.jpg","modified":0,"renderable":0},{"_id":"source/img/2023/swich2.jpg","path":"img/2023/swich2.jpg","modified":0,"renderable":0},{"_id":"source/img/2023/tea.jpg","path":"img/2023/tea.jpg","modified":0,"renderable":0},{"_id":"source/img/2023/food2.jpg","path":"img/2023/food2.jpg","modified":0,"renderable":0},{"_id":"source/img/2023/food3.jpg","path":"img/2023/food3.jpg","modified":0,"renderable":0},{"_id":"source/img/2023/food1.jpg","path":"img/2023/food1.jpg","modified":0,"renderable":0},{"_id":"source/img/2023/grandma2.jpg","path":"img/2023/grandma2.jpg","modified":0,"renderable":0},{"_id":"source/img/2023/grandma1.jpg","path":"img/2023/grandma1.jpg","modified":0,"renderable":0},{"_id":"source/img/2023/food4.jpg","path":"img/2023/food4.jpg","modified":0,"renderable":0},{"_id":"source/img/2023/张家界1.jpg","path":"img/2023/张家界1.jpg","modified":0,"renderable":0},{"_id":"source/img/2023/张家界2.jpg","path":"img/2023/张家界2.jpg","modified":0,"renderable":0},{"_id":"source/img/funcDesign/http_qstep_arc.png","path":"img/funcDesign/http_qstep_arc.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/qstep_generic_proxy.png","path":"img/funcDesign/qstep_generic_proxy.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/插件扩展.png","path":"img/funcDesign/插件扩展.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/rider.png","path":"img/funcDesign/rider.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/业务平滑上云的痛点.png","path":"img/funcDesign/业务平滑上云的痛点.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/业务平滑上云.png","path":"img/funcDesign/业务平滑上云.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/全链路灰度场景.png","path":"img/funcDesign/全链路灰度场景.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/标签染色.png","path":"img/funcDesign/标签染色.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/网关逻辑隔离.png","path":"img/funcDesign/网关逻辑隔离.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/物理隔离.png","path":"img/funcDesign/物理隔离.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/proxy处理流程.png","path":"img/funcDesign/proxy处理流程.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/多集群纳管方案三-1.png","path":"img/funcDesign/多集群纳管方案三-1.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/多集群纳管方案一.png","path":"img/funcDesign/多集群纳管方案一.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/多集群纳管方案三-2.png","path":"img/funcDesign/多集群纳管方案三-2.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/多集群纳管方案二.png","path":"img/funcDesign/多集群纳管方案二.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/现阶段多网关纳管.png","path":"img/funcDesign/现阶段多网关纳管.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/组件代码合并.png","path":"img/funcDesign/组件代码合并.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/前端管控多集群.png","path":"img/funcDesign/前端管控多集群.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/区域路由优先.png","path":"img/funcDesign/区域路由优先.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/网关总体架构.png","path":"img/funcDesign/网关总体架构.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/网关多集群.png","path":"img/funcDesign/网关多集群.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/两地三中心部署架构.png","path":"img/funcDesign/两地三中心部署架构.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/API Plane多集群配置下发.png","path":"img/funcDesign/API Plane多集群配置下发.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/健康检查version.png","path":"img/funcDesign/健康检查version.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/项目级插件流程.png","path":"img/funcDesign/项目级插件流程.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/K8s informer.png","path":"img/funcDesign/K8s informer.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/Istio多集群监听.png","path":"img/funcDesign/Istio多集群监听.png","modified":0,"renderable":0},{"_id":"source/img/funcDesign/监控_架构图.png","path":"img/funcDesign/监控_架构图.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705067855751},{"_id":"source/baidu_verify_code-XTYqJDa5zw.html","hash":"a37fb39eeba774cda84617571be51ced07bd3ad3","modified":1705067855760},{"_id":"source/404/index.md","hash":"9f0ce316b179b836232dc8238d8ae93b2d873f58","modified":1705067855751},{"_id":"source/_posts/Kafka核心技术.md","hash":"610ac6d8e7fea0ec20f5e60e7884ade383ffd160","modified":1705067855753},{"_id":"source/_posts/Kubernetes的设计解读.md","hash":"cfee3d8d3b835bba2c8d0c1d77885f3770ead121","modified":1705067855753},{"_id":"source/_posts/TCP粘包:半包 Netty全搞定.md","hash":"22712c1ddf18ce31e0620dcbf1809c65971c9500","modified":1705067855753},{"_id":"source/_posts/netty三种IO的支持.md","hash":"26cc9e859572161129ee9a5a021ad424d525870c","modified":1705067855754},{"_id":"source/_posts/netty如何玩转内存使用.md","hash":"8c34619d3c1f15a872f50f30b91beb70dae5e674","modified":1705067855757},{"_id":"source/_posts/netty如何支持三种Reactor.md","hash":"0f6f593a3a96d14caf6cc8d5f35489b8c0550ad5","modified":1705067855754},{"_id":"source/_posts/常用的二次编解码方式.md","hash":"e9c758374a15e81a19d04b73ae598f99b0a0c3df","modified":1705067855758},{"_id":"source/_posts/编写网络应用程序基本步骤.md","hash":"a01c77845517041dc38cc9d1f9bf605deed07b9a","modified":1705067855760},{"_id":"source/_posts/服务网格.md","hash":"d01034e7aed33c262aa5aa4a603b002a20cf1e28","modified":1705067855759},{"_id":"source/_data/friends.json","hash":"e1f8b761ff2abc2899b04dd34652cb41d21a9b54","modified":1705067855752},{"_id":"source/_data/musics.json","hash":"60f9306aa0431fe8a210daf8c0f0bab8ef5f4d23","modified":1705067855752},{"_id":"source/about/index.md","hash":"03b3af02c1007fffd518e83909e1f1e9551afc78","modified":1705067855760},{"_id":"source/bb/index.md","hash":"d81d1d270262366eda6b582f5aa990eeda3e0307","modified":1705067855760},{"_id":"source/contact/index.md","hash":"25711ed11b77596e741222ff00384ddd2bc4da1e","modified":1705067855761},{"_id":"source/books/.DS_Store","hash":"9ba35d6e843f1574eed6412031d600f4c873f77c","modified":1705067855837},{"_id":"source/movies/index.md","hash":"8d3eb8e04139ff9f58776ec20da5d5bf68257392","modified":1705067855762},{"_id":"source/categories/index.md","hash":"58184905c582565660f5a1dfae8e9f0bc46e9b3f","modified":1705067855761},{"_id":"source/musics/index.md","hash":"f64b2da3507d4a942ad9ef664704b32103e94008","modified":1705067855763},{"_id":"source/books/index.md","hash":"1e788e258d4da68dec52e3b529646fd11b6f29de","modified":1705159643912},{"_id":"source/galleries/index.md","hash":"8524b973ea8a470ac59c945dd50a2df5d1e14d65","modified":1705067855762},{"_id":"source/friends/index.md","hash":"4966c6edceb1aed355752ace28a6112feb65bc8d","modified":1705067855761},{"_id":"source/tags/index.md","hash":"923c5b4add7c1a5e356bef64b9cecd8b4825fddb","modified":1705157362491},{"_id":"themes/hexo-theme-matery/README.md","hash":"9d98fe84a60bd6b222740f238d83f0999eaa77a3","modified":1705047215611},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"497c6645c55dce9f190ec7625de76083262e1707","modified":1705047215611},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1705047215610},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1705047215610},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"2ed57824573d7bed71e56023ed92500734a8886d","modified":1705047215612},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"f6518067b4516a02e164e963121f09846123eb21","modified":1705486223455},{"_id":"themes/hexo-theme-matery/languages/jp.yml","hash":"a811cec0b6d91f405e8c7386a57039cd8c3448bb","modified":1705047215613},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1705047215613},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a2695fdb7579a77daec7773a9bb8e71b9edbf16b","modified":1705047215613},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"36f8d3e530e8144bf80d0772284edd9b0da362fe","modified":1705047215613},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1705047215628},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1705047215628},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1705047215628},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1705047215628},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1705047215628},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"71ef2540fa586cd0c3b1f216f59fa9ec85fc6a38","modified":1705047215628},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"534511d9f38f281b531e24c19d9c1526cc7e5e27","modified":1705047215629},{"_id":"themes/hexo-theme-matery/layout/galleries.ejs","hash":"85b8b9e583ffa7a4ee6d0c2be4779cb2f7d91777","modified":1705047215629},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"1656c2db90e24a360282d15c71144b4f14edb43d","modified":1705047215629},{"_id":"themes/hexo-theme-matery/layout/gallery.ejs","hash":"fcc7364b03329148ba4920cddb0d34d5b7410788","modified":1705047215629},{"_id":"themes/hexo-theme-matery/layout/movies.ejs","hash":"abce85ffdd99e787e3652fbd466447e032b626bd","modified":1705047215629},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"94c2fee85418370ca8f7d54050c852267e924eb7","modified":1705047215629},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3d4f40121dbb75bcb71837c35ec5ee17cdffae31","modified":1705047215630},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1705047215630},{"_id":"themes/hexo-theme-matery/layout/musics.ejs","hash":"9ac6053e09ed2c8a844d7e93c3fdce4ded95248a","modified":1705047215629},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1705047215630},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1705047215614},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1705047215632},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"12350c0d366141b5c27792bb414d4adc303b0a9f","modified":1705047215614},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1705047215615},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1705047215614},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1705047215614},{"_id":"themes/hexo-theme-matery/layout/_partial/cover-style.ejs","hash":"4288b9d91b2d71404e7a509a81a5d7f7a4b8b5e8","modified":1705047215615},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1705047215615},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"6c68e36686519ad4a3841f6380338b1d0bd63bf9","modified":1705072541840},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1705047215615},{"_id":"themes/hexo-theme-matery/layout/_partial/codeblock.ejs","hash":"086a06863a0f88888707409936aa06a09ff50e3a","modified":1705047215615},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1705047215617},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1705047215616},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1705047215617},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1705047215617},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"e8958bc066b3c2fcd4152604cc12f30020106848","modified":1705047215616},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1705047215617},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"e8b44268b59add61af44b7338527523d10d9d742","modified":1705047215618},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f5c00f21af281a09dc7de89e82a3b442903451a7","modified":1705047215618},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1705047215619},{"_id":"themes/hexo-theme-matery/layout/_partial/main-style.ejs","hash":"8819b334509682355a5e53fa0f307f90166d175c","modified":1705047215620},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1705047215618},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1705047215621},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1705047215621},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"70fccaea75ce48364222c4e5de0496e556b01cb1","modified":1705047215622},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"0953217f4e19a51dfc5a0ffc7d066406df18060b","modified":1705047215620},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"52de0cf3ce13a3477b0a1659d2b8aa41db1f622d","modified":1705047215620},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"6261f8191c3c1159f63ec7f9293bb93f7d2a3dbb","modified":1705047215622},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1705047215622},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1705047215623},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1705047215623},{"_id":"themes/hexo-theme-matery/layout/_partial/post-style.ejs","hash":"243c3ba783553f25955d524fd47a5bb59a5e732b","modified":1705047215623},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"236668e72b01db91f5bf29eec4c79e34e2746d98","modified":1705047215624},{"_id":"themes/hexo-theme-matery/layout/_partial/reward-style.ejs","hash":"8256ed940c0185ccf01890d59fb4262f196e2323","modified":1705047215623},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1705047215624},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1705047215624},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1705047215624},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1705047215624},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"2ac48566bb806336f1e5bc5c66fc816a580d63c3","modified":1705047215625},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1705047215625},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1705047215625},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1705047215625},{"_id":"themes/hexo-theme-matery/layout/_widget/day-night.ejs","hash":"ff21dd5e49e1fc9a9ab8c7d164fd4b32a8265ea2","modified":1705047215626},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1705047215626},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"bb25a6fa51eb5ebfba687b2cbadff6c7a4b4bfef","modified":1705047215626},{"_id":"themes/hexo-theme-matery/layout/_widget/musics.ejs","hash":"bfebdf0731fee0cd4fd51efa0da1d0184565ae25","modified":1705047215626},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1705047215626},{"_id":"themes/hexo-theme-matery/layout/_partial/waline.ejs","hash":"2658cb73ef984a30b248351d7858ee15596a6e7a","modified":1705047215625},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1705047215627},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1705047215626},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1705047215627},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1705047215627},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1705047215627},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1705047215627},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1705047215628},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1705047215626},{"_id":"themes/hexo-theme-matery/scripts/tags/button.js","hash":"ab02fb2da648f4f7afa0c2381aaca334bdeb54e6","modified":1705047215630},{"_id":"themes/hexo-theme-matery/scripts/tags/index.js","hash":"223a31ea3aa4a689d45a033c7d680cb4fff8d8af","modified":1705047215630},{"_id":"themes/hexo-theme-matery/scripts/tags/note.js","hash":"84b0122b92342834540f69b19600cb54c50ab69e","modified":1705047215630},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1705071529494},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1705047215631},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1705047215631},{"_id":"themes/hexo-theme-matery/source/css/indexcover.css","hash":"00f4f498ae8514022004f2281cab8ff304cd0f37","modified":1705047215631},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1705047215632},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"1aba01abe39b2a8d77b79bc7fbdf55fca944fbba","modified":1705071651563},{"_id":"themes/hexo-theme-matery/source/css/dark.css","hash":"be4ef08494f3c965d513d9413685c0e723f671cd","modified":1705047215631},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1705047215632},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"ac347687f6b700b02188ee093c3b1f0580a115ba","modified":1705072738173},{"_id":"themes/hexo-theme-matery/source/css/post.css","hash":"1ebbf9ddee7db4b3039d8d4e25f2605072ab6e24","modified":1705047215632},{"_id":"themes/hexo-theme-matery/source/css/reward.css","hash":"56f8d21c3bb1dc57c762a63d13b08161d8260738","modified":1705047215632},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1705047215633},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1705047215633},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1705047215633},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"aa957ea8cf6787f0ed6095fedc6cb9d7d1bf3522","modified":1705047215633},{"_id":"themes/hexo-theme-matery/source/js/tw_cn.js","hash":"29157cdfa87aec28e56d3d5717d486bf4de07db6","modified":1705047215633},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpeg","hash":"aa72bb3d4f53647c9e1841d2740e01f990a7b30a","modified":1705066760391},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1705066760473},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1705066760482},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1705066760486},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1705047215634},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1705047215634},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1705047215634},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1705047215635},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1705047215641},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1705047215635},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1705047215641},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1705047215641},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1705047215642},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1705047215642},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1705047215641},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1705047215647},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1705047215648},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1705047215634},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1705047215650},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1705047215641},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1705047215642},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1705047215642},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1705047215642},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1705047215651},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1705047215651},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1705047215651},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1705047215654},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1705047215667},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1705047215657},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1705047215672},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1705047215692},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"b9323091d50785ad6c617d7cae76a41a89eb44b3","modified":1705047215653},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","hash":"fb4d34c48567b7b992aac1c75f0d24c3eb2cc3fa","modified":1705047215672},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1705047215674},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1705047215674},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1705047215675},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1705047215673},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1705047215688},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1705047215676},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1705047215689},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1705047215676},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1705047215689},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1705047215697},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1705047215700},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1705047215697},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1705047215699},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1705066760476},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1705066760475},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1705066760476},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1705066760477},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1705066760478},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1705066760480},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1705066760480},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1705066760479},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1705066760481},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1705066760479},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1705066760482},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1705066760481},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"1be40cf921f84c07b06237e884088533120fc6fe","modified":1705066760470},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"20940954a79b17f3d77cf829872be1c5d74a5064","modified":1705066760470},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"3572617db2df7512416bbc4cfa6409474811bf2e","modified":1705066760471},{"_id":"themes/hexo-theme-matery/source/medias/barrager/4.png","hash":"810fcc0b2dd535788671f276fab7a03adc128b7e","modified":1705066760471},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1705066760473},{"_id":"themes/hexo-theme-matery/source/medias/barrager/3.png","hash":"fe25cb761e0a94abcf371052e39ee6d8393b5e4f","modified":1705066760471},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1705047215638},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1705047215638},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1705047215641},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1705047215641},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1705047215654},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1705047215655},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1705047215655},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1705047215655},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1705047215656},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1705047215656},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1705047215656},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1705047215693},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1705047215655},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1705047215656},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1705047215696},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1705047215694},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1705047215694},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1705047215696},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1705047215647},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1705047215651},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1705047215652},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1705066760474},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1705066760474},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1705066760475},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1705066760475},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1705066760476},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1705066760477},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1705066760477},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1705066760478},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1705066760479},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1705047215695},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1705066760480},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1705066760481},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1705066760482},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1705047215695},{"_id":"themes/hexo-theme-matery/source/medias/barrager/6.png","hash":"e185c70bfbf81a40d903564633b64d2d23130e73","modified":1705066760472},{"_id":"themes/hexo-theme-matery/source/medias/barrager/5.png","hash":"fa0cd0239c3558c0dc07f10de6defd18ffc694cb","modified":1705066760472},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1705047215638},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","hash":"0ae47fa834fb55de7b50c79021aeabecfae50c9c","modified":1705047215636},{"_id":"themes/hexo-theme-matery/source/medias/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1705066760484},{"_id":"themes/hexo-theme-matery/source/medias/avatar.png","hash":"a32e74a67dc042724901950b8d65f54aea7d2b6d","modified":1705066760392},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1705066760473},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1705047215643},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"d1328a7872827bc63e7cc4d33745397681accda8","modified":1705047215658},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"8eee32acbfac59744b4053a7290f503ef623d3ab","modified":1705047215658},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1705047215701},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1705047215703},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1705066760484},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"406514e17d0354ed56f3835802e43cf6a627a84a","modified":1705066760488},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"8d63fa8b0f60a50b07ac0f7e751f6f5e02ecdc44","modified":1705047215635},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1705047215637},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1705047215641},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1705047215633},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1705047215702},{"_id":"themes/hexo-theme-matery/source/medias/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1705066760486},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"b08e0d534f2cfb37def3074c75949a03cf68ae55","modified":1705066760487},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1705066760486},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1705047215640},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1705047215699},{"_id":"themes/hexo-theme-matery/source/medias/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1705066760484},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1705047215692},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1705066760484},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1705047215646},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1705047215650},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1705047215671},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.png","hash":"412cbb89595cb660eb2ed17419ad728d3d0ba7db","modified":1705066760409},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1705047215667},{"_id":"source/books/source/面经--倾听潮汐.pdf","hash":"46764d0955f9dbcf1352f632259f9b7f98163198","modified":1705067855943},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.png","hash":"a25cb970f084d4159b5270c4b34322b93817f173","modified":1705066760395},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.png","hash":"10d2be5ad127d720c5c956f9b631a26964bb70bc","modified":1705066760428},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.png","hash":"0f275e0b323e8e0fbd0b72de90afd6c961a1d93b","modified":1705066760468},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.png","hash":"73b2d68e3f048c459a0dfb2813be1add6b8d752e","modified":1705066760455},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.png","hash":"e4071f03d49db20ccc0be8721b7e87864ebf2e18","modified":1705066760440},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.png","hash":"06616db27c1c3e7f856463bc86de6485dbdf9586","modified":1705066760449},{"_id":"source/books/source/JAVA核心面试知识整理.pdf","hash":"59eab07f584401d514eb4d39b4608e6a1cffab28","modified":1705067855875},{"_id":"source/books/source/石杉的架构笔记[第二版]最新版本.pdf","hash":"ad0e7329748630915da86f83c8483c3c2cc81f43","modified":1705067855931},{"_id":"public/atom.xml","hash":"c30a233bdac046aa9e16b8fe539760c33b16cf80","modified":1706516248260},{"_id":"public/search.xml","hash":"29082b4dfb8f8ea784b1893522a081d97d200e08","modified":1706516248260},{"_id":"public/baidu_verify_code-XTYqJDa5zw.html","hash":"f7aaecff464e251a9222d5ecbc80624b99b27779","modified":1706516248260},{"_id":"public/404/index.html","hash":"d109f21d4f1831fcb634e987d490c3dff6323b51","modified":1706516248260},{"_id":"public/about/index.html","hash":"5e963296347a158ac768eba352b58ed9254226c4","modified":1706516248260},{"_id":"public/bb/index.html","hash":"e6c77fed8006fe69eaa5dbb5b13f544286a37a36","modified":1706516248260},{"_id":"public/books/index.html","hash":"f8bd943ae3a208ca4ac834998aee55181cc308a5","modified":1706516248260},{"_id":"public/categories/index.html","hash":"05805e1d76483d4c31a03000bd2315006f28d82c","modified":1706516248260},{"_id":"public/contact/index.html","hash":"5a9411fdfeb7f863510735ea27016b1a9588befe","modified":1706516248260},{"_id":"public/galleries/index.html","hash":"f7e3406e9041f79417474c6dd6e1ce61c4ed67dd","modified":1706516248260},{"_id":"public/musics/index.html","hash":"fa9cdd08932842e1ee47d4989fa75416923cef5d","modified":1706516248260},{"_id":"public/movies/index.html","hash":"d9602bc4be6c1f9e82759a4f9a1a9d6b9e3dcfe3","modified":1706516248260},{"_id":"public/tags/index.html","hash":"c31afeb371477e705bbe3c525d0c38fe3157ed3f","modified":1706516248260},{"_id":"public/friends/index.html","hash":"83686de45f9c6fbe9e9c96a502b0cfdf007b6c91","modified":1706516248260},{"_id":"public/2022/03/24/fu-wu-wang-ge/index.html","hash":"757eca55eb9789f7b8012a8fa1bb9b3c0b11802c","modified":1705484800454},{"_id":"public/2022/03/20/kubernetes-de-she-ji-jie-du/index.html","hash":"3d0f41b1eeba58c51cdf5f5c22d913d4088a5f87","modified":1705484800454},{"_id":"public/2022/03/20/kafka-he-xin-ji-zhu/index.html","hash":"7dd12646a5c203b0c7c111d4807755cf2fcb1a6c","modified":1705484800454},{"_id":"public/2022/03/14/chang-yong-de-er-ci-bian-jie-ma-fang-shi/index.html","hash":"83b060ce6cbe7be80284a962a4d59c53f21ae01c","modified":1705484800454},{"_id":"public/2022/03/14/netty-ru-he-wan-zhuan-nei-cun-shi-yong/index.html","hash":"f28c7e2133bf0c0b1716c7d0185bb4b1670a1860","modified":1705482841598},{"_id":"public/2022/03/14/bian-xie-wang-luo-ying-yong-cheng-xu-ji-ben-bu-zou/index.html","hash":"13a4f6953988799c28958332a3e7c2876fe0f9cc","modified":1705484800454},{"_id":"public/2022/03/13/tcp-nian-bao-ban-bao-netty-quan-gao-ding/index.html","hash":"b426af93768bcf4fcbacb88d75fe3ebbfbed3c5d","modified":1705484800454},{"_id":"public/2022/03/13/netty-san-chong-io-de-zhi-chi/index.html","hash":"e0caf6d061158c06e880d10fa79cdeef68cc102a","modified":1705482841598},{"_id":"public/2022/03/13/netty-ru-he-zhi-chi-san-chong-reactor/index.html","hash":"1854514ac8979288cd1176c6008c08366a4a0430","modified":1705482841598},{"_id":"public/archives/2022/03/index.html","hash":"acc73fd8aa43ac1de3525b4108ecdc38cce3908d","modified":1706516248260},{"_id":"public/archives/2022/index.html","hash":"c96e9b1b777d3ef91cca2d691a9b47787531ef17","modified":1706516248260},{"_id":"public/archives/index.html","hash":"1bd08869cf03b331d04653a0682a8184fedc6099","modified":1706516248260},{"_id":"public/categories/kafka/index.html","hash":"336b8bcbebb8d2c7b9e158ab397d3750a78e4013","modified":1706516248260},{"_id":"public/categories/Kubernetes/index.html","hash":"fe5bc8a20f6296152f3aea8efd346f8d8ca8ddc6","modified":1706516248260},{"_id":"public/categories/Netty/index.html","hash":"712ae09b5248f25894082437dd2e2d9f73f2020a","modified":1706516248260},{"_id":"public/categories/ServiceMesh/index.html","hash":"34492337f5b1dadacb84f3ffc412d0592df87292","modified":1706516248260},{"_id":"public/tags/kafka/index.html","hash":"ced551593a3977dead1c8775892f0362bc8079ab","modified":1706516248260},{"_id":"public/tags/Kubernetes/index.html","hash":"c3015d6066b8ea74b7ae928d117ccdc140247889","modified":1706516248260},{"_id":"public/index.html","hash":"5839c925cdb1cffe9520cb55961e813d37dbd502","modified":1706516248260},{"_id":"public/tags/Netty/index.html","hash":"74714c1e64d381360609f1974434ce5ef5cc547b","modified":1706516248260},{"_id":"public/tags/ServiceMesh/index.html","hash":"e3ae8fddd9dce15f53c464256b76a27bc51543f4","modified":1706516248260},{"_id":"public/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705162695659},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1705162695659},{"_id":"public/medias/avatar.jpeg","hash":"aa72bb3d4f53647c9e1841d2740e01f990a7b30a","modified":1705162695659},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1705162695659},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1705162695659},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1705162695659},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1705162695659},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1705162695659},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1705162695659},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1705162695659},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1705162695659},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1705162695659},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1705162695659},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1705162695659},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1705162695659},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1705162695659},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1705162695659},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1705162695659},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1705162695659},{"_id":"public/medias/barrager/0.png","hash":"1be40cf921f84c07b06237e884088533120fc6fe","modified":1705162695659},{"_id":"public/medias/barrager/1.png","hash":"20940954a79b17f3d77cf829872be1c5d74a5064","modified":1705162695659},{"_id":"public/medias/barrager/2.png","hash":"3572617db2df7512416bbc4cfa6409474811bf2e","modified":1705162695659},{"_id":"public/medias/barrager/3.png","hash":"fe25cb761e0a94abcf371052e39ee6d8393b5e4f","modified":1705162695659},{"_id":"public/medias/barrager/4.png","hash":"810fcc0b2dd535788671f276fab7a03adc128b7e","modified":1705162695659},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1705162695659},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1705162695659},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1705162695659},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1705162695659},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1705162695659},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1705162695659},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1705162695659},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1705162695659},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1705162695659},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1705162695659},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1705162695659},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1705162695659},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1705162695659},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1705162695659},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1705162695659},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1705162695659},{"_id":"public/live2dw/assets/haruto.model.json","hash":"76f915f7edbd9c47df0ca041dddb151c0c93a2bf","modified":1705162695659},{"_id":"public/live2dw/assets/haruto.physics.json","hash":"2fbf886979212357ba293bd35884f2cb5b26b6a6","modified":1705162695659},{"_id":"public/live2dw/assets/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1705162695659},{"_id":"public/live2dw/assets/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1705162695659},{"_id":"public/live2dw/assets/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1705162695659},{"_id":"public/live2dw/assets/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1705162695659},{"_id":"public/live2dw/assets/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1705162695659},{"_id":"public/live2dw/assets/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1705162695659},{"_id":"public/live2dw/assets/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1705162695659},{"_id":"public/live2dw/assets/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1705162695659},{"_id":"public/live2dw/assets/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1705162695659},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"d130dd1d194f05b3eb5391289b0339999e37c3a6","modified":1705162695659},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1705162695659},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1705162695659},{"_id":"public/css/indexcover.css","hash":"bd027eb8192b4d1b0dc9b4f965fa264e8437f847","modified":1705162695659},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1705162695659},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1705162695659},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1705162695659},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1705162695659},{"_id":"public/css/matery.css","hash":"1aba01abe39b2a8d77b79bc7fbdf55fca944fbba","modified":1705162695659},{"_id":"public/css/bb.css","hash":"ac347687f6b700b02188ee093c3b1f0580a115ba","modified":1705162695659},{"_id":"public/css/dark.css","hash":"be4ef08494f3c965d513d9413685c0e723f671cd","modified":1705162695659},{"_id":"public/css/post.css","hash":"d38c71eddb8af1752c48eb48595fbaf89450ff40","modified":1705162695659},{"_id":"public/css/reward.css","hash":"98b32aabeb908727844af04c31f08da6cab08335","modified":1705162695659},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1705162695659},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1705162695659},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1705162695659},{"_id":"public/js/tw_cn.js","hash":"29157cdfa87aec28e56d3d5717d486bf4de07db6","modified":1705162695659},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1705162695659},{"_id":"public/js/matery.js","hash":"aa957ea8cf6787f0ed6095fedc6cb9d7d1bf3522","modified":1705162695659},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1705162695659},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1705162695659},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1705162695659},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1705162695659},{"_id":"public/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1705162695659},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1705162695659},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1705162695659},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1705162695659},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1705162695659},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1705162695659},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1705162695659},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1705162695659},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1705162695659},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1705162695659},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1705162695659},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1705162695659},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1705162695659},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1705162695659},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1705162695659},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1705162695659},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1705162695659},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1705162695659},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1705162695659},{"_id":"public/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1705162695659},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1705162695659},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1705162695659},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1705162695659},{"_id":"public/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1705162695659},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1705162695659},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1705162695659},{"_id":"public/libs/materialize/materialize.min.js","hash":"8eee32acbfac59744b4053a7290f503ef623d3ab","modified":1705162695659},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1705162695659},{"_id":"public/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1705162695659},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1705162695659},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1705162695659},{"_id":"public/libs/materialize/materialize.min.css","hash":"d1328a7872827bc63e7cc4d33745397681accda8","modified":1705162695659},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1705162695659},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1705162695659},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1705162695659},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1705162695659},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1705162695659},{"_id":"public/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1705162695659},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1705162695659},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1705162695659},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1705162695659},{"_id":"public/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1705162695659},{"_id":"public/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1705162695659},{"_id":"public/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1705162695659},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1705162695659},{"_id":"public/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1705162695659},{"_id":"public/libs/awesome/css/all.min.css","hash":"0ae47fa834fb55de7b50c79021aeabecfae50c9c","modified":1705162695659},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1705162695659},{"_id":"public/libs/awesome/css/all.css","hash":"8d63fa8b0f60a50b07ac0f7e751f6f5e02ecdc44","modified":1705162695659},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1705162695659},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1705162695659},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1705162695659},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1705162695659},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1705162695659},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1705162695659},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1705162695659},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1705162695659},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1705162695659},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1705162695659},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1705162695659},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1705162695659},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1705162695659},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1705162695659},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1705162695659},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1705162695659},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1705162695659},{"_id":"public/medias/barrager/5.png","hash":"fa0cd0239c3558c0dc07f10de6defd18ffc694cb","modified":1705162695659},{"_id":"public/medias/barrager/6.png","hash":"e185c70bfbf81a40d903564633b64d2d23130e73","modified":1705162695659},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1705162695659},{"_id":"public/medias/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1705162695659},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1705162695659},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1705162695659},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1705162695659},{"_id":"public/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1705162695659},{"_id":"public/medias/avatar.png","hash":"a32e74a67dc042724901950b8d65f54aea7d2b6d","modified":1705162695659},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1705162695659},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1705162695659},{"_id":"public/medias/reward/wechat.png","hash":"406514e17d0354ed56f3835802e43cf6a627a84a","modified":1705162695659},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1705162695659},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1705162695659},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1705162695659},{"_id":"public/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1705162695659},{"_id":"public/live2dw/assets/moc/haruto.2048/texture_00.png","hash":"62b970aa1480a1c18bdc4e74e297f2a1b34ca9fa","modified":1705162695659},{"_id":"public/live2dw/assets/moc/haruto.moc","hash":"57bec0b245b49ea941d61ba3dee671f20441afae","modified":1705162695659},{"_id":"public/medias/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1705162695659},{"_id":"public/medias/reward/alipay.jpg","hash":"b08e0d534f2cfb37def3074c75949a03cf68ae55","modified":1705162695659},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1705162695659},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1705162695659},{"_id":"public/medias/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1705162695659},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1705162695659},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1705162695659},{"_id":"public/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1705162695659},{"_id":"public/medias/banner/1.png","hash":"412cbb89595cb660eb2ed17419ad728d3d0ba7db","modified":1705162695659},{"_id":"public/medias/banner/0.png","hash":"a25cb970f084d4159b5270c4b34322b93817f173","modified":1705162695659},{"_id":"public/books/source/面经--倾听潮汐.pdf","hash":"46764d0955f9dbcf1352f632259f9b7f98163198","modified":1705162695659},{"_id":"public/medias/banner/2.png","hash":"10d2be5ad127d720c5c956f9b631a26964bb70bc","modified":1705162695659},{"_id":"public/medias/banner/6.png","hash":"0f275e0b323e8e0fbd0b72de90afd6c961a1d93b","modified":1705162695659},{"_id":"public/medias/banner/5.png","hash":"73b2d68e3f048c459a0dfb2813be1add6b8d752e","modified":1705162695659},{"_id":"public/medias/banner/3.png","hash":"e4071f03d49db20ccc0be8721b7e87864ebf2e18","modified":1705162695659},{"_id":"public/medias/banner/4.png","hash":"06616db27c1c3e7f856463bc86de6485dbdf9586","modified":1705162695659},{"_id":"public/books/source/JAVA核心面试知识整理.pdf","hash":"59eab07f584401d514eb4d39b4608e6a1cffab28","modified":1705162695659},{"_id":"public/books/source/石杉的架构笔记[第二版]最新版本.pdf","hash":"ad0e7329748630915da86f83c8483c3c2cc81f43","modified":1705162695659},{"_id":"source/_posts/SpringCloudGateway功能原理以及产品实践.md","hash":"b477e3aa270d987ae6b1baf54af4ddaf3b0f0d0d","modified":1705483623569},{"_id":"source/img/scg-filter流程.png","hash":"185440f002dd9214cae8e7b34cdc45fa4aa28045","modified":1705479768060},{"_id":"source/img/scg-vip问题.png","hash":"94aaeb323fc2a0f9a6f038dd97a4056b125b3858","modified":1705479575627},{"_id":"source/img/scg-lb.png","hash":"cc7c0d74bf7a125d02a4937030e5a81bfead75c7","modified":1705478602802},{"_id":"source/img/scg集群部署.png","hash":"43941996f5515cb64c39fc1e82d15f76dc17e82f","modified":1705478463517},{"_id":"source/img/接口调试最终设计.png","hash":"93ccf5a62e1c4029f4a6061d03083ad2eef80987","modified":1705479648283},{"_id":"source/img/scg泛化调用.png","hash":"aa9693d52d2b69d1108e914c7eb06260534991be","modified":1705480501839},{"_id":"source/img/scg配置监听.png","hash":"82983781cc361346d58f657e21101c4d4aadcb95","modified":1705479046231},{"_id":"source/img/接口调试整体方案.png","hash":"beeb1b96b3827e6d50a19979b1532d775bbda617","modified":1705479379540},{"_id":"source/img/熔断.png","hash":"0604738900c4550e3fe3f0e4ab0dfff630a8e3d3","modified":1705478782818},{"_id":"source/img/scg核心原理2.png","hash":"852a00b944d39267cf3f51f93685c6d23ac93dee","modified":1705476520994},{"_id":"source/img/scg核心原理.png","hash":"9f428e19e779673df6051fc41f4fcdd3c1747c63","modified":1705476226083},{"_id":"public/2022/06/11/springcloudgateway-gong-neng-yuan-li-yi-ji-chan-pin-shi-jian/index.html","hash":"dcb8275bb6369d9ada0d180002acacbed17dc2bf","modified":1705484800454},{"_id":"public/tags/SpringCloudGateway/index.html","hash":"c4718d460b818e9884889c337c3b81562bb12311","modified":1706516248260},{"_id":"public/tags/SCG/index.html","hash":"6e929b399a1acd34430a872c6fae5c5820c96946","modified":1706516248260},{"_id":"public/tags/云原生网关/index.html","hash":"e9eacf4cbf5b6da408dfc1867025315e9bcd036f","modified":1706516248260},{"_id":"public/archives/2022/06/index.html","hash":"1a59ca04e06687dcfcdd8d41c22424e37afaca09","modified":1706516248260},{"_id":"public/img/scg-lb.png","hash":"cc7c0d74bf7a125d02a4937030e5a81bfead75c7","modified":1705566650347},{"_id":"public/img/scg集群部署.png","hash":"43941996f5515cb64c39fc1e82d15f76dc17e82f","modified":1705566650347},{"_id":"public/img/scg-vip问题.png","hash":"94aaeb323fc2a0f9a6f038dd97a4056b125b3858","modified":1705566650347},{"_id":"public/img/接口调试最终设计.png","hash":"93ccf5a62e1c4029f4a6061d03083ad2eef80987","modified":1705566650347},{"_id":"public/img/scg-filter流程.png","hash":"185440f002dd9214cae8e7b34cdc45fa4aa28045","modified":1705566650347},{"_id":"public/img/熔断.png","hash":"0604738900c4550e3fe3f0e4ab0dfff630a8e3d3","modified":1705566650347},{"_id":"public/img/scg配置监听.png","hash":"82983781cc361346d58f657e21101c4d4aadcb95","modified":1705566650347},{"_id":"public/img/scg泛化调用.png","hash":"aa9693d52d2b69d1108e914c7eb06260534991be","modified":1705566650347},{"_id":"public/img/接口调试整体方案.png","hash":"beeb1b96b3827e6d50a19979b1532d775bbda617","modified":1705566650347},{"_id":"public/img/scg核心原理.png","hash":"9f428e19e779673df6051fc41f4fcdd3c1747c63","modified":1705566650347},{"_id":"public/img/scg核心原理2.png","hash":"852a00b944d39267cf3f51f93685c6d23ac93dee","modified":1705566650347},{"_id":"source/_posts/2023年不太顺利地过渡.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705484221554},{"_id":"source/_posts/SpringCloudGateway云上的设计与改造.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705484616949},{"_id":"source/_posts/全能力网关建设.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705484391688},{"_id":"source/_posts/基于Jmeter的Operator改造.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705484753717},{"_id":"source/_posts/探索分布式事务解决方案以及实现原理.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705484108993},{"_id":"source/_posts/开源项目Hango网关项目设计与实践.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705483674840},{"_id":"source/_posts/网关两地三中心的实践与总结.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705484340239},{"_id":"source/_posts/网关可观测性建设-(Envoy篇章).md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705484554485},{"_id":"source/_posts/网关金融场景下的大规模实践.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705484433183},{"_id":"source/_posts/网关可观测性建设-(SpringCloudGateway篇章).md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705484538135},{"_id":"source/_posts/Netty/netty如何玩转内存使用.md","hash":"8c34619d3c1f15a872f50f30b91beb70dae5e674","modified":1705067855757},{"_id":"source/_posts/Netty/netty三种IO的支持.md","hash":"26cc9e859572161129ee9a5a021ad424d525870c","modified":1705067855754},{"_id":"source/_posts/Netty/netty如何支持三种Reactor.md","hash":"0f6f593a3a96d14caf6cc8d5f35489b8c0550ad5","modified":1705067855754},{"_id":"public/2024/01/17/ji-yu-jmeter-de-operator-gai-zao/index.html","hash":"5582a5a0cbf3c2d738e8bef25ccfbda0d743af18","modified":1705484800454},{"_id":"public/2024/01/17/springcloudgateway-yun-shang-de-she-ji-yu-gai-zao/index.html","hash":"c1dc574700a8d6a0a1097f66825e81e89483a318","modified":1705484800454},{"_id":"public/2024/01/17/wang-guan-ke-guan-ce-xing-jian-she-envoy-pian-zhang/index.html","hash":"ceb4a5c417758444c10f1549e2d8aa8ebfde891d","modified":1705484800454},{"_id":"public/2024/01/17/wang-guan-ke-guan-ce-xing-jian-she-springcloudgateway-pian-zhang/index.html","hash":"674d387f5d0d819a2b9769224b2fff368b018673","modified":1705484800454},{"_id":"public/2024/01/17/wang-guan-jin-rong-chang-jing-xia-de-da-gui-mo-shi-jian/index.html","hash":"6fcff9c9f77d91920a315fd5d88a7b5cb95835ef","modified":1705484800454},{"_id":"public/2024/01/17/quan-neng-li-wang-guan-jian-she/index.html","hash":"76091bab257a1a5a5484f430a1fe5b9d8dcceec9","modified":1705484800454},{"_id":"public/2024/01/17/wang-guan-liang-di-san-zhong-xin-de-shi-jian-yu-zong-jie/index.html","hash":"77c1926daa10982d1dacbf19c2d2aad3f08cd04e","modified":1705484800454},{"_id":"public/2024/01/17/2023-nian-bu-tai-shun-li-di-guo-du/index.html","hash":"de67b53ea24998539f060d180649946edf150f91","modified":1705484800454},{"_id":"public/2024/01/17/tan-suo-fen-bu-shi-shi-wu-jie-jue-fang-an-yi-ji-shi-xian-yuan-li/index.html","hash":"221aa391b53093054826f9b2d2b8fdeffef8b8a4","modified":1705484800454},{"_id":"public/2024/01/17/kai-yuan-xiang-mu-hango-wang-guan-xiang-mu-she-ji-yu-shi-jian/index.html","hash":"06f9fa839174fb62687dc2975aa13543e6524849","modified":1705484800454},{"_id":"public/2022/03/14/netty/netty-ru-he-wan-zhuan-nei-cun-shi-yong/index.html","hash":"5caf66cb03f77eb4adf6f3f2bf50ccbb32d84ad1","modified":1706516248260},{"_id":"public/2022/03/13/netty/netty-san-chong-io-de-zhi-chi/index.html","hash":"6ddc9f9ba60305aba92ec711cfb60121274cab2a","modified":1706516248260},{"_id":"public/2022/03/13/netty/netty-ru-he-zhi-chi-san-chong-reactor/index.html","hash":"fb973de380165cba4a11121e14810c24b91e563e","modified":1706516248260},{"_id":"public/archives/page/2/index.html","hash":"559d94a6820bf32c74f2203b988051c7b90aa72a","modified":1706516248260},{"_id":"public/archives/2024/index.html","hash":"4dd89e02ba6bca30b1f857c0482837e665af8f2f","modified":1706183282767},{"_id":"public/archives/2024/01/index.html","hash":"591d36d0e28d93ad4afea16e371fd671b0453cdd","modified":1706183282767},{"_id":"public/categories/SpringCloudGateway/index.html","hash":"b2df64ad0c051c829301b58d51d97fdcf89838e2","modified":1706516248260},{"_id":"public/page/2/index.html","hash":"a48c1fed51967ac9f1505af3067a3d6841b2f7c5","modified":1706516248260},{"_id":"source/_posts/FuncDesign/SpringCloudGateway云上的设计与改造.md","hash":"2aad7a1560f2a4304c83f57ae2b57ffcaca6f2ce","modified":1706183992043},{"_id":"source/_posts/FuncDesign/全能力网关建设.md","hash":"e65a248742298571ce79588665069c3c13b6c3aa","modified":1706183992000},{"_id":"source/_posts/FuncDesign/网关两地三中心的实践与总结.md","hash":"2e064b181522296b185f0283228214bcd81461a4","modified":1706185083380},{"_id":"source/_posts/FuncDesign/基于Jmeter的Operator改造.md","hash":"c28dd2cd3dedea9468f59a0afe6c32f890fb3906","modified":1706183992038},{"_id":"source/_posts/FuncDesign/探索分布式事务解决方案以及实现原理.md","hash":"ebf0f466e1443c2b88deeb600bcb9fcefcfdfa71","modified":1705566647684},{"_id":"source/_posts/FuncDesign/网关可观测性建设-(Envoy篇章).md","hash":"8d144b08a16094b71eed8b6aa4b8474365e7edb5","modified":1706251258810},{"_id":"source/_posts/FuncDesign/网关可观测性建设-(SpringCloudGateway篇章).md","hash":"5a2640900573a09658f666ae4fdc77a0027fd8a1","modified":1706516111521},{"_id":"source/_posts/FuncDesign/网关金融场景下的大规模实践.md","hash":"9b669caa450c3ef8ba5e165e4fe7f3a241d5abde","modified":1706090888143},{"_id":"source/_posts/Live/2023年不太顺利地过渡.md","hash":"abbdc12f3fd2aee49651a2b3442eb7b49283366a","modified":1705914794624},{"_id":"source/_posts/FuncDesign/开源项目Hango网关项目设计与实践.md","hash":"9c7ae5880e091751439f4db45f5cd33625a00538","modified":1705910535055},{"_id":"source/_posts/FuncDesign/SpringCloudGateway功能原理以及产品实践.md","hash":"7eef724f8099b985f07b351ae9655b84bfd486cb","modified":1706182301355},{"_id":"source/_posts/Kubernetes/Kubernetes的设计解读.md","hash":"cfee3d8d3b835bba2c8d0c1d77885f3770ead121","modified":1705067855753},{"_id":"source/_posts/Netty/编写网络应用程序基本步骤.md","hash":"a01c77845517041dc38cc9d1f9bf605deed07b9a","modified":1705067855760},{"_id":"source/_posts/Netty/常用的二次编解码方式.md","hash":"e9c758374a15e81a19d04b73ae598f99b0a0c3df","modified":1705067855758},{"_id":"source/_posts/Kafka/Kafka核心技术.md","hash":"610ac6d8e7fea0ec20f5e60e7884ade383ffd160","modified":1705067855753},{"_id":"source/_posts/Netty/TCP粘包:半包 Netty全搞定.md","hash":"22712c1ddf18ce31e0620dcbf1809c65971c9500","modified":1705067855753},{"_id":"source/_posts/ServiceMesh/服务网格.md","hash":"d01034e7aed33c262aa5aa4a603b002a20cf1e28","modified":1705067855759},{"_id":"public/2024/01/17/funcdesign/springcloudgateway-yun-shang-de-she-ji-yu-gai-zao/index.html","hash":"da4d55ce1982811acfa49fe600be073ca7a3e3b6","modified":1706183282767},{"_id":"public/2024/01/17/funcdesign/ji-yu-jmeter-de-operator-gai-zao/index.html","hash":"3bca2dd77a99249f756fb6e6896ea04194841650","modified":1706183282767},{"_id":"public/2024/01/17/funcdesign/wang-guan-ke-guan-ce-xing-jian-she-envoy-pian-zhang/index.html","hash":"f6c03839dc9458dae1d6b945733174fb775f84cf","modified":1706183282767},{"_id":"public/2024/01/17/funcdesign/wang-guan-ke-guan-ce-xing-jian-she-springcloudgateway-pian-zhang/index.html","hash":"e725cddd701861f44b9385797e426f32861c16f6","modified":1706183282767},{"_id":"public/2024/01/17/funcdesign/wang-guan-jin-rong-chang-jing-xia-de-da-gui-mo-shi-jian/index.html","hash":"07961058155d8c8ffabbf7ebb160779c872fe09d","modified":1705910490287},{"_id":"public/2024/01/17/funcdesign/quan-neng-li-wang-guan-jian-she/index.html","hash":"48b9b38ebbb257ef54921a310a15a7215d29cc74","modified":1706183282767},{"_id":"public/2024/01/17/funcdesign/wang-guan-liang-di-san-zhong-xin-de-shi-jian-yu-zong-jie/index.html","hash":"989cbaeedbe3617747d4b03278c6a6d114b842b7","modified":1705910490287},{"_id":"public/2024/01/17/funcdesign/tan-suo-fen-bu-shi-shi-wu-jie-jue-fang-an-yi-ji-shi-xian-yuan-li/index.html","hash":"a03700eb83bf553737f6c92bbacc2e40738325a7","modified":1705486003493},{"_id":"public/2024/01/17/live/2023-nian-bu-tai-shun-li-di-guo-du/index.html","hash":"86987fc57a0f39c6abdb908181be34e801f189a8","modified":1705910490287},{"_id":"public/2024/01/17/funcdesign/kai-yuan-xiang-mu-hango-wang-guan-xiang-mu-she-ji-yu-shi-jian/index.html","hash":"6a511a7e8418911f767aee7d4d3fe81acd691af1","modified":1705486003493},{"_id":"public/2022/03/24/servicemesh/fu-wu-wang-ge/index.html","hash":"736a53962fa6109f2f92cb475f7aee340681ceb0","modified":1706516248260},{"_id":"public/2022/03/20/kubernetes/kubernetes-de-she-ji-jie-du/index.html","hash":"38a33a30521185e064142c00764d54aff7a05477","modified":1706516248260},{"_id":"public/2022/03/20/kafka/kafka-he-xin-ji-zhu/index.html","hash":"83293cced2726be5ff770bfa3c88357b97789514","modified":1706516248260},{"_id":"public/2022/06/11/funcdesign/springcloudgateway-gong-neng-yuan-li-yi-ji-chan-pin-shi-jian/index.html","hash":"4e3dbff2a2e45f0dc544b528fc9e76419b34d135","modified":1706516248260},{"_id":"public/2022/03/14/netty/chang-yong-de-er-ci-bian-jie-ma-fang-shi/index.html","hash":"c7a45770156b77369faefad4fb046381dca61567","modified":1706516248260},{"_id":"public/2022/03/14/netty/bian-xie-wang-luo-ying-yong-cheng-xu-ji-ben-bu-zou/index.html","hash":"c287f861174b16a5724615b041db93644e9201a7","modified":1706516248260},{"_id":"public/2022/03/13/netty/tcp-nian-bao-ban-bao-netty-quan-gao-ding/index.html","hash":"f37341a751e3d1c3dbe474eef1fbe273659c751c","modified":1706516248260},{"_id":"source/_posts/img/Ingress.png","hash":"c1dc78369a81793342ff3c88f73d20669ff14835","modified":1705559388275},{"_id":"source/_posts/img/Gateway API相关组件.png","hash":"0da905e0e069bbebf0b6f470d9c3b1d8e3257a34","modified":1705559044404},{"_id":"source/_posts/img/scg-filter流程.png","hash":"185440f002dd9214cae8e7b34cdc45fa4aa28045","modified":1705479768060},{"_id":"source/_posts/img/scg-lb.png","hash":"cc7c0d74bf7a125d02a4937030e5a81bfead75c7","modified":1705478602802},{"_id":"source/_posts/img/scg-vip问题.png","hash":"94aaeb323fc2a0f9a6f038dd97a4056b125b3858","modified":1705479575627},{"_id":"source/_posts/img/scg集群部署.png","hash":"43941996f5515cb64c39fc1e82d15f76dc17e82f","modified":1705478463517},{"_id":"source/_posts/img/虚拟网关功能架构图.png","hash":"a777b8db68dfc0ee3a84b43f357e31512032fea9","modified":1705558657808},{"_id":"source/_posts/img/Kubernetes Gateway技术架构图.png","hash":"d46b8d82355c45219d173087fa5d3b3bf9db7622","modified":1705559261405},{"_id":"source/_posts/img/接口调试最终设计.png","hash":"93ccf5a62e1c4029f4a6061d03083ad2eef80987","modified":1705479648283},{"_id":"source/_posts/img/scg泛化调用.png","hash":"aa9693d52d2b69d1108e914c7eb06260534991be","modified":1705480501839},{"_id":"source/_posts/img/hango设计架构.png","hash":"f654addadd0085d73dd2dc5178d5ed85db6623ec","modified":1705546464729},{"_id":"source/_posts/img/scg配置监听.png","hash":"82983781cc361346d58f657e21101c4d4aadcb95","modified":1705479046231},{"_id":"source/_posts/img/接口调试整体方案.png","hash":"beeb1b96b3827e6d50a19979b1532d775bbda617","modified":1705479379540},{"_id":"source/_posts/img/熔断.png","hash":"0604738900c4550e3fe3f0e4ab0dfff630a8e3d3","modified":1705478782818},{"_id":"source/_posts/img/scg核心原理2.png","hash":"852a00b944d39267cf3f51f93685c6d23ac93dee","modified":1705476520994},{"_id":"source/_posts/img/scg核心原理.png","hash":"9f428e19e779673df6051fc41f4fcdd3c1747c63","modified":1705476226083},{"_id":"source/_posts/img/cap.png","hash":"71bd89e53f91d55ae74794758a1b86a004326fb3","modified":1705563869675},{"_id":"source/_posts/img/tctmrm.png","hash":"05b37aec44b258a430f41c5a577ae23ba8347878","modified":1705564849331},{"_id":"source/_posts/img/分布式事务模型.png","hash":"9bdf52e00aed8ff05b2657839181df205424ea11","modified":1705564536062},{"_id":"source/_posts/img/平滑纳管-集群隔离.png","hash":"472da98a1f7dd474fbe6424c1c7f128190ece893","modified":1705562571859},{"_id":"source/_posts/img/SAGA模式.png","hash":"0c3454a6917ef54d77fb421591139291a36f1482","modified":1705566193849},{"_id":"source/_posts/img/XA模式.png","hash":"456ad9675820c9112d72fe9eba4bdbc0d432d438","modified":1705565201964},{"_id":"source/_posts/img/四种模式对比.png","hash":"d409e8bdee112cebbd4a2b8ff1b538482d9de844","modified":1705566294210},{"_id":"source/_posts/img/分布式事务的问题.png","hash":"09919324cfa25c15e25e9868484cb7bb630ef24b","modified":1705563564683},{"_id":"source/_posts/img/事务acid.png","hash":"a5fe3ff6bc5168a75b6d7dd99302774daca9a28b","modified":1705563466856},{"_id":"source/_posts/img/TCC模式.png","hash":"73970e383fe5deaabbcb0e75ea7e4efa53275ed8","modified":1705566072746},{"_id":"source/_posts/img/fmt模式.png","hash":"869ccc05886de3a269fe635c6e7550a8a12e1164","modified":1705565639854},{"_id":"public/2023/07/14/funcdesign/kai-yuan-xiang-mu-hango-wang-guan-xiang-mu-she-ji-yu-shi-jian/index.html","hash":"23263e34f5c6583ddbe386da5c4f2d80a7bac7eb","modified":1706516248260},{"_id":"public/2023/01/14/funcdesign/tan-suo-fen-bu-shi-shi-wu-jie-jue-fang-an-yi-ji-shi-xian-yuan-li/index.html","hash":"68f13641016a9fb44b3ef485cbf94aa69a1b2364","modified":1706516248260},{"_id":"public/archives/2023/01/index.html","hash":"ea2e333d3104fe9c71c526daf40268073ce6902b","modified":1706516248260},{"_id":"public/archives/2023/index.html","hash":"1f126a5d1d7482d7764bb572d76db42ec9665ae0","modified":1706516248260},{"_id":"public/archives/2023/07/index.html","hash":"06c991a397fcc5e502d0e4aace49fe82fc86f242","modified":1706516248260},{"_id":"public/categories/云原生网关/index.html","hash":"35d2c01431a859c8e176776b1fcc67f20beb8a9b","modified":1706516248260},{"_id":"public/categories/分布式事务/index.html","hash":"c0505f479839dbb125067577825ee2a27328a360","modified":1706516248260},{"_id":"public/tags/分布式事务/index.html","hash":"22f9aae19a4307271c4d9c490ff05cd1971e7fb9","modified":1706516248260},{"_id":"public/tags/网易/index.html","hash":"cb4137b0708461654390387f32c7a296dc479391","modified":1706516248260},{"_id":"public/tags/Envoy/index.html","hash":"3c1042c64620e49354cee1f0dfc35b47b236a24c","modified":1706516248260},{"_id":"source/_posts/FuncDesign/img/Ingress.png","hash":"c1dc78369a81793342ff3c88f73d20669ff14835","modified":1705559388275},{"_id":"source/_posts/FuncDesign/img/Gateway API相关组件.png","hash":"0da905e0e069bbebf0b6f470d9c3b1d8e3257a34","modified":1705559044404},{"_id":"source/_posts/FuncDesign/img/cap.png","hash":"71bd89e53f91d55ae74794758a1b86a004326fb3","modified":1705563869675},{"_id":"source/_posts/FuncDesign/img/scg-filter流程.png","hash":"185440f002dd9214cae8e7b34cdc45fa4aa28045","modified":1705479768060},{"_id":"source/_posts/FuncDesign/img/scg-vip问题.png","hash":"94aaeb323fc2a0f9a6f038dd97a4056b125b3858","modified":1705479575627},{"_id":"source/_posts/FuncDesign/img/scg-lb.png","hash":"cc7c0d74bf7a125d02a4937030e5a81bfead75c7","modified":1705478602802},{"_id":"source/_posts/FuncDesign/img/tctmrm.png","hash":"05b37aec44b258a430f41c5a577ae23ba8347878","modified":1705564849331},{"_id":"source/_posts/FuncDesign/img/分布式事务模型.png","hash":"9bdf52e00aed8ff05b2657839181df205424ea11","modified":1705564536062},{"_id":"source/_posts/FuncDesign/img/scg集群部署.png","hash":"43941996f5515cb64c39fc1e82d15f76dc17e82f","modified":1705478463517},{"_id":"source/_posts/FuncDesign/img/虚拟网关功能架构图.png","hash":"a777b8db68dfc0ee3a84b43f357e31512032fea9","modified":1705558657808},{"_id":"source/_posts/FuncDesign/img/接口调试最终设计.png","hash":"93ccf5a62e1c4029f4a6061d03083ad2eef80987","modified":1705479648283},{"_id":"source/_posts/FuncDesign/img/平滑纳管-集群隔离.png","hash":"472da98a1f7dd474fbe6424c1c7f128190ece893","modified":1705562571859},{"_id":"source/_posts/FuncDesign/img/Kubernetes Gateway技术架构图.png","hash":"d46b8d82355c45219d173087fa5d3b3bf9db7622","modified":1705559261405},{"_id":"source/_posts/FuncDesign/img/hango设计架构.png","hash":"f654addadd0085d73dd2dc5178d5ed85db6623ec","modified":1705546464729},{"_id":"source/_posts/FuncDesign/img/scg配置监听.png","hash":"82983781cc361346d58f657e21101c4d4aadcb95","modified":1705479046231},{"_id":"source/_posts/FuncDesign/img/scg泛化调用.png","hash":"aa9693d52d2b69d1108e914c7eb06260534991be","modified":1705480501839},{"_id":"source/_posts/FuncDesign/img/熔断.png","hash":"0604738900c4550e3fe3f0e4ab0dfff630a8e3d3","modified":1705478782818},{"_id":"source/_posts/FuncDesign/img/接口调试整体方案.png","hash":"beeb1b96b3827e6d50a19979b1532d775bbda617","modified":1705479379540},{"_id":"source/_posts/FuncDesign/img/scg核心原理.png","hash":"9f428e19e779673df6051fc41f4fcdd3c1747c63","modified":1705476226083},{"_id":"source/_posts/FuncDesign/img/scg核心原理2.png","hash":"852a00b944d39267cf3f51f93685c6d23ac93dee","modified":1705476520994},{"_id":"source/_posts/FuncDesign/img/SAGA模式.png","hash":"0c3454a6917ef54d77fb421591139291a36f1482","modified":1705566193849},{"_id":"source/_posts/FuncDesign/img/XA模式.png","hash":"456ad9675820c9112d72fe9eba4bdbc0d432d438","modified":1705565201964},{"_id":"source/_posts/FuncDesign/img/分布式事务的问题.png","hash":"09919324cfa25c15e25e9868484cb7bb630ef24b","modified":1705563564683},{"_id":"source/_posts/FuncDesign/img/四种模式对比.png","hash":"d409e8bdee112cebbd4a2b8ff1b538482d9de844","modified":1705566294210},{"_id":"source/_posts/FuncDesign/img/事务acid.png","hash":"a5fe3ff6bc5168a75b6d7dd99302774daca9a28b","modified":1705563466856},{"_id":"source/_posts/FuncDesign/img/TCC模式.png","hash":"73970e383fe5deaabbcb0e75ea7e4efa53275ed8","modified":1705566072746},{"_id":"source/_posts/FuncDesign/img/fmt模式.png","hash":"869ccc05886de3a269fe635c6e7550a8a12e1164","modified":1705565639854},{"_id":"source/img/Ingress.png","hash":"c1dc78369a81793342ff3c88f73d20669ff14835","modified":1705559388275},{"_id":"source/img/Gateway API相关组件.png","hash":"0da905e0e069bbebf0b6f470d9c3b1d8e3257a34","modified":1705559044404},{"_id":"source/img/cap.png","hash":"71bd89e53f91d55ae74794758a1b86a004326fb3","modified":1705563869675},{"_id":"source/img/平滑纳管-集群隔离.png","hash":"472da98a1f7dd474fbe6424c1c7f128190ece893","modified":1705562571859},{"_id":"source/img/虚拟网关功能架构图.png","hash":"a777b8db68dfc0ee3a84b43f357e31512032fea9","modified":1705558657808},{"_id":"source/img/分布式事务模型.png","hash":"9bdf52e00aed8ff05b2657839181df205424ea11","modified":1705564536062},{"_id":"source/img/tctmrm.png","hash":"05b37aec44b258a430f41c5a577ae23ba8347878","modified":1705564849331},{"_id":"source/img/Kubernetes Gateway技术架构图.png","hash":"d46b8d82355c45219d173087fa5d3b3bf9db7622","modified":1705559261405},{"_id":"source/img/hango设计架构.png","hash":"f654addadd0085d73dd2dc5178d5ed85db6623ec","modified":1705546464729},{"_id":"source/img/SAGA模式.png","hash":"0c3454a6917ef54d77fb421591139291a36f1482","modified":1705566193849},{"_id":"source/img/XA模式.png","hash":"456ad9675820c9112d72fe9eba4bdbc0d432d438","modified":1705565201964},{"_id":"source/img/四种模式对比.png","hash":"d409e8bdee112cebbd4a2b8ff1b538482d9de844","modified":1705566294210},{"_id":"source/img/分布式事务的问题.png","hash":"09919324cfa25c15e25e9868484cb7bb630ef24b","modified":1705563564683},{"_id":"source/img/事务acid.png","hash":"a5fe3ff6bc5168a75b6d7dd99302774daca9a28b","modified":1705563466856},{"_id":"source/img/TCC模式.png","hash":"73970e383fe5deaabbcb0e75ea7e4efa53275ed8","modified":1705566072746},{"_id":"source/img/fmt模式.png","hash":"869ccc05886de3a269fe635c6e7550a8a12e1164","modified":1705565639854},{"_id":"public/img/Gateway API相关组件.png","hash":"0da905e0e069bbebf0b6f470d9c3b1d8e3257a34","modified":1705566650347},{"_id":"public/img/Ingress.png","hash":"c1dc78369a81793342ff3c88f73d20669ff14835","modified":1705566650347},{"_id":"public/img/cap.png","hash":"71bd89e53f91d55ae74794758a1b86a004326fb3","modified":1705566650347},{"_id":"public/img/tctmrm.png","hash":"05b37aec44b258a430f41c5a577ae23ba8347878","modified":1705566650347},{"_id":"public/img/分布式事务模型.png","hash":"9bdf52e00aed8ff05b2657839181df205424ea11","modified":1705566650347},{"_id":"public/img/平滑纳管-集群隔离.png","hash":"472da98a1f7dd474fbe6424c1c7f128190ece893","modified":1705566650347},{"_id":"public/img/虚拟网关功能架构图.png","hash":"a777b8db68dfc0ee3a84b43f357e31512032fea9","modified":1705566650347},{"_id":"public/img/Kubernetes Gateway技术架构图.png","hash":"d46b8d82355c45219d173087fa5d3b3bf9db7622","modified":1705566650347},{"_id":"public/img/hango设计架构.png","hash":"f654addadd0085d73dd2dc5178d5ed85db6623ec","modified":1705566650347},{"_id":"public/img/SAGA模式.png","hash":"0c3454a6917ef54d77fb421591139291a36f1482","modified":1705566650347},{"_id":"public/img/XA模式.png","hash":"456ad9675820c9112d72fe9eba4bdbc0d432d438","modified":1705566650347},{"_id":"public/img/分布式事务的问题.png","hash":"09919324cfa25c15e25e9868484cb7bb630ef24b","modified":1705566650347},{"_id":"public/img/四种模式对比.png","hash":"d409e8bdee112cebbd4a2b8ff1b538482d9de844","modified":1705566650347},{"_id":"public/img/事务acid.png","hash":"a5fe3ff6bc5168a75b6d7dd99302774daca9a28b","modified":1705566650347},{"_id":"public/img/TCC模式.png","hash":"73970e383fe5deaabbcb0e75ea7e4efa53275ed8","modified":1705566650347},{"_id":"public/img/fmt模式.png","hash":"869ccc05886de3a269fe635c6e7550a8a12e1164","modified":1705566650347},{"_id":"source/img/.DS_Store","hash":"d94dfb12f8bc96720749df4edc6c096079626bec","modified":1706511978154},{"_id":"source/img/2023/swich1.jpg","hash":"6da4d87e2684d577e99cf0ce627a8891f93d08d7","modified":1705911817537},{"_id":"source/img/2023/food2.jpg","hash":"c6534b053fa2566f546fa5035efa4e752f393e6b","modified":1705912214641},{"_id":"source/img/2023/grandma1.jpg","hash":"2ff6437a55f1b846cdb8c8d83e94d033f96f2f50","modified":1705912693987},{"_id":"source/img/2023/grandma2.jpg","hash":"4f9ebc3f06d1ccda5c9eb69d07cfdd1b78336d4c","modified":1705912695037},{"_id":"source/img/2023/food3.jpg","hash":"fb36a2d1648fcab66a5b94a0a6955cdc5128b8f2","modified":1705912323451},{"_id":"source/img/2023/swich2.jpg","hash":"44693c0e335844a12c8a8c3e37c422537b575601","modified":1705911881285},{"_id":"source/img/2023/food1.jpg","hash":"b0d2456b335d1619903e4191b3d165d75073be7c","modified":1705912216055},{"_id":"source/img/2023/swich3.jpg","hash":"85152fd86c12135a7d258603e509ba6fb9deedb0","modified":1705911881440},{"_id":"source/img/2023/food4.jpg","hash":"b0496b1be97dd7ef19eceb17bfc9ff210ef69825","modified":1705912692752},{"_id":"source/img/2023/张家界1.jpg","hash":"0806b57eb902214cea4bc776c74927586c4564e1","modified":1705912955105},{"_id":"source/img/2023/张家界2.jpg","hash":"19d493f617b936a971c33c56cbaed0eb8c8093a0","modified":1705912997679},{"_id":"source/img/2023/tea.jpg","hash":"1c387c2a51959b4f6166b1809532409097f187ce","modified":1705912276641},{"_id":"public/2023/05/16/funcdesign/wang-guan-liang-di-san-zhong-xin-de-shi-jian-yu-zong-jie/index.html","hash":"1a0c18be8c51d3f432f4c021af207dc946f0706c","modified":1706516248260},{"_id":"public/2023/12/31/live/2023-nian-bu-tai-shun-li-di-guo-du/index.html","hash":"7db2445e31a396d17e647d0ae336e0af35057322","modified":1706516248260},{"_id":"public/2023/12/30/funcdesign/wang-guan-jin-rong-chang-jing-xia-de-da-gui-mo-shi-jian/index.html","hash":"0c4828a06a6799888764bb90654fc9639d9bca6e","modified":1706516248260},{"_id":"public/categories/生活/index.html","hash":"f8a373d5deaecc6d7b618526c821f0e10bd2a7f8","modified":1706516248260},{"_id":"public/tags/2023/index.html","hash":"702f9ee5888cfd50c6b2a172f1330f29b3114f41","modified":1706516248260},{"_id":"public/tags/回顾总结/index.html","hash":"9087ccc57086fbda4ad6ffa468a9d01589c2eb18","modified":1706516248260},{"_id":"public/tags/两地三中心/index.html","hash":"28cefb5e8ebe7dcc91f1a9cb1892baad9cc10fc5","modified":1706516248260},{"_id":"public/archives/2023/05/index.html","hash":"d003482e543107b54a87a745fb0b194d37303b00","modified":1706516248260},{"_id":"public/archives/2023/12/index.html","hash":"2afc8f4ab3aabc0acf2e32039853d29247565faa","modified":1706516248260},{"_id":"public/tags/金融/index.html","hash":"6db7234617d23909809e8d0fdcf02d7b0a20a420","modified":1706516248260},{"_id":"public/img/2023/swich1.jpg","hash":"6da4d87e2684d577e99cf0ce627a8891f93d08d7","modified":1706085739385},{"_id":"public/img/2023/food2.jpg","hash":"c6534b053fa2566f546fa5035efa4e752f393e6b","modified":1706085739385},{"_id":"public/img/2023/grandma2.jpg","hash":"4f9ebc3f06d1ccda5c9eb69d07cfdd1b78336d4c","modified":1706085739385},{"_id":"public/img/2023/grandma1.jpg","hash":"2ff6437a55f1b846cdb8c8d83e94d033f96f2f50","modified":1706085739385},{"_id":"public/img/2023/swich2.jpg","hash":"44693c0e335844a12c8a8c3e37c422537b575601","modified":1706085739385},{"_id":"public/img/2023/swich3.jpg","hash":"85152fd86c12135a7d258603e509ba6fb9deedb0","modified":1706085739385},{"_id":"public/img/2023/food3.jpg","hash":"fb36a2d1648fcab66a5b94a0a6955cdc5128b8f2","modified":1706085739385},{"_id":"public/img/2023/food4.jpg","hash":"b0496b1be97dd7ef19eceb17bfc9ff210ef69825","modified":1706085739385},{"_id":"public/img/2023/food1.jpg","hash":"b0d2456b335d1619903e4191b3d165d75073be7c","modified":1706085739385},{"_id":"public/img/2023/张家界1.jpg","hash":"0806b57eb902214cea4bc776c74927586c4564e1","modified":1706085739385},{"_id":"public/img/2023/张家界2.jpg","hash":"19d493f617b936a971c33c56cbaed0eb8c8093a0","modified":1706085739385},{"_id":"public/img/2023/tea.jpg","hash":"1c387c2a51959b4f6166b1809532409097f187ce","modified":1706085739385},{"_id":"source/_posts/FuncDesign/关于Hango网关中gportal和api-plane组件合并的两三点思考.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1706086886284},{"_id":"source/img/funcDesign/qstep_generic_proxy.png","hash":"2de6a615c57dbf1d70a289a43ffa4acfe6a9e4a8","modified":1696658810545},{"_id":"source/img/funcDesign/http_qstep_arc.png","hash":"144292c6c9006e1076faa87fc69d212624834eb6","modified":1696658810544},{"_id":"source/img/funcDesign/插件扩展.png","hash":"910a670f962b5438d930aabbe284e15602e033a9","modified":1706090014853},{"_id":"source/img/funcDesign/物理隔离.png","hash":"a83b1fdd1deaead78a1d748372c61c46a0da8819","modified":1706090703414},{"_id":"source/img/funcDesign/rider.png","hash":"3058b85fcfb6afe705463966e7aa947389db0b06","modified":1706090071026},{"_id":"source/img/funcDesign/网关逻辑隔离.png","hash":"1238fffe4262b968ddb5d2cc21a69727cf3b15a2","modified":1706090641124},{"_id":"source/img/funcDesign/全链路灰度场景.png","hash":"4c1b5a290849f0afed1ac2c54946a08328779211","modified":1706090429188},{"_id":"source/img/funcDesign/标签染色.png","hash":"a2ee1fac9e96e12550541f8ca24345343252f839","modified":1706090509368},{"_id":"source/img/funcDesign/proxy处理流程.png","hash":"8169d33f3c3bb780a87b045ee8460cf54f6e80b8","modified":1706090806026},{"_id":"source/img/funcDesign/业务平滑上云.png","hash":"591248e042f671a7907d9d1f775a16c62837eb63","modified":1706090255441},{"_id":"source/img/funcDesign/业务平滑上云的痛点.png","hash":"7414f94ddfa3938f382305dfae5506402b4a8a3f","modified":1706090162947},{"_id":"public/2024/01/24/funcdesign/guan-yu-hango-wang-guan-zhong-gportal-he-api-plane-zu-jian-he-bing-de-liang-san-dian-si-kao/index.html","hash":"3e6fb9b3567d64e3523ab221c80cfdd9e0891ac1","modified":1706090892160},{"_id":"public/archives/page/3/index.html","hash":"8c207531599a15c1951c1748403e7b42e2f27250","modified":1706516248260},{"_id":"public/page/3/index.html","hash":"898b8f728af6e1cbb0d68b335a90a60f46b12d00","modified":1706516248260},{"_id":"public/img/funcDesign/qstep_generic_proxy.png","hash":"2de6a615c57dbf1d70a289a43ffa4acfe6a9e4a8","modified":1706090892160},{"_id":"public/img/funcDesign/http_qstep_arc.png","hash":"144292c6c9006e1076faa87fc69d212624834eb6","modified":1706090892160},{"_id":"public/img/funcDesign/插件扩展.png","hash":"910a670f962b5438d930aabbe284e15602e033a9","modified":1706090892160},{"_id":"public/img/funcDesign/网关逻辑隔离.png","hash":"1238fffe4262b968ddb5d2cc21a69727cf3b15a2","modified":1706090892160},{"_id":"public/img/funcDesign/物理隔离.png","hash":"a83b1fdd1deaead78a1d748372c61c46a0da8819","modified":1706090892160},{"_id":"public/img/funcDesign/rider.png","hash":"3058b85fcfb6afe705463966e7aa947389db0b06","modified":1706090892160},{"_id":"public/img/funcDesign/全链路灰度场景.png","hash":"4c1b5a290849f0afed1ac2c54946a08328779211","modified":1706090892160},{"_id":"public/img/funcDesign/标签染色.png","hash":"a2ee1fac9e96e12550541f8ca24345343252f839","modified":1706090892160},{"_id":"public/img/funcDesign/proxy处理流程.png","hash":"8169d33f3c3bb780a87b045ee8460cf54f6e80b8","modified":1706090892160},{"_id":"public/img/funcDesign/业务平滑上云.png","hash":"591248e042f671a7907d9d1f775a16c62837eb63","modified":1706090892160},{"_id":"public/img/funcDesign/业务平滑上云的痛点.png","hash":"7414f94ddfa3938f382305dfae5506402b4a8a3f","modified":1706090892160},{"_id":"source/_posts/FuncDesign/关于Hango网关中gportal和api-plane组件合并实施方案.md","hash":"909fe4139844dd08e1bbe338ec9806bfed9515c4","modified":1706183277040},{"_id":"source/img/funcDesign/多集群纳管方案三-1.png","hash":"77f5d28849726528490c76d9b0e763074ad853a6","modified":1696658810346},{"_id":"source/img/funcDesign/多集群纳管方案二.png","hash":"995759fbdcbe0359b8dcb71584909060263314d1","modified":1696658810347},{"_id":"source/img/funcDesign/多集群纳管方案三-2.png","hash":"0cc9c0ef0b2a428522e5f69f0ad259481e3fca61","modified":1696658810347},{"_id":"source/img/funcDesign/组件代码合并.png","hash":"84b1ef4408a0d12744d6dd26ae20ccba035a293e","modified":1696658810356},{"_id":"source/img/funcDesign/多集群纳管方案一.png","hash":"b4ec919de588b9871a57ab1616011b0f3dfc54b5","modified":1696658810346},{"_id":"source/img/funcDesign/现阶段多网关纳管.png","hash":"c8cdfe07b9e9c88b8a9621579f36df3595bce2c4","modified":1696658810356},{"_id":"public/2023/03/12/funcdesign/guan-yu-hango-wang-guan-zhong-gportal-he-api-plane-zu-jian-he-bing-shi-shi-fang-an/index.html","hash":"0c44e3ea5ed206672993c737f9585e3d09153224","modified":1706516248260},{"_id":"public/categories/Hango/index.html","hash":"4b964c1b0c21251a1f2ce86b6fe2eccc2c0c0a2c","modified":1706516248260},{"_id":"public/archives/2023/03/index.html","hash":"52164d7e253267db67e7c5fbeb41d3ea7f21e0cf","modified":1706516248260},{"_id":"public/tags/Hango/index.html","hash":"d9993a3c0cb0682af12c91e69921fb6ab70183b6","modified":1706516248260},{"_id":"public/img/funcDesign/多集群纳管方案三-1.png","hash":"77f5d28849726528490c76d9b0e763074ad853a6","modified":1706183149695},{"_id":"public/img/funcDesign/多集群纳管方案三-2.png","hash":"0cc9c0ef0b2a428522e5f69f0ad259481e3fca61","modified":1706183149695},{"_id":"public/img/funcDesign/多集群纳管方案二.png","hash":"995759fbdcbe0359b8dcb71584909060263314d1","modified":1706183149695},{"_id":"public/img/funcDesign/组件代码合并.png","hash":"84b1ef4408a0d12744d6dd26ae20ccba035a293e","modified":1706183149695},{"_id":"public/img/funcDesign/多集群纳管方案一.png","hash":"b4ec919de588b9871a57ab1616011b0f3dfc54b5","modified":1706183149695},{"_id":"public/img/funcDesign/现阶段多网关纳管.png","hash":"c8cdfe07b9e9c88b8a9621579f36df3595bce2c4","modified":1706183149695},{"_id":"source/img/funcDesign/前端管控多集群.png","hash":"3c872d6d60a83f4e431a4e43c01c144a152b4c72","modified":1696658810341},{"_id":"public/img/funcDesign/前端管控多集群.png","hash":"3c872d6d60a83f4e431a4e43c01c144a152b4c72","modified":1706183282767},{"_id":"public/2023/09/08/funcdesign/wang-guan-ke-guan-ce-xing-jian-she-envoy-pian-zhang/index.html","hash":"4b189aad9886de375ca99bf3ea0c773d98590066","modified":1706516248260},{"_id":"public/2023/08/25/funcdesign/quan-neng-li-wang-guan-jian-she/index.html","hash":"1f8769c0094df4f251d857b39d33b3685f0d57e0","modified":1706516248260},{"_id":"public/2023/07/14/funcdesign/springcloudgateway-yun-shang-de-she-ji-yu-gai-zao/index.html","hash":"03408b891842dd917f8efd6c875e636ec48e0148","modified":1706516248260},{"_id":"public/2023/07/14/funcdesign/ji-yu-jmeter-de-operator-gai-zao/index.html","hash":"ef928cec7d5b51210d604b480289ba887675303f","modified":1706516248260},{"_id":"public/2022/05/14/funcdesign/wang-guan-ke-guan-ce-xing-jian-she-springcloudgateway-pian-zhang/index.html","hash":"d80d86eebfb8597d33337f8ac3310ba658cdbb7f","modified":1706516248260},{"_id":"public/archives/2022/page/2/index.html","hash":"ed383a2e77fb28a94caf4844cb50e56404dd9acc","modified":1706516248260},{"_id":"public/archives/2022/05/index.html","hash":"29b7a854cb89a11de3dbeba18bddbae1e1ff05a3","modified":1706516248260},{"_id":"public/archives/2023/08/index.html","hash":"13909afe8eb9e3ebae98d400b52ce15703513cff","modified":1706516248260},{"_id":"public/archives/2023/09/index.html","hash":"9a30110de839cff4210a010d0f7b254a79b1094c","modified":1706516248260},{"_id":"public/tags/可观测性/index.html","hash":"00f997a01089a1bc722c9d730595ac95f10b1dae","modified":1706516248260},{"_id":"public/tags/Jmeter/index.html","hash":"87f283bb0adb351f1511bd844a06f88a213797ae","modified":1706516248260},{"_id":"public/tags/Operator/index.html","hash":"a3abed248adfb4a0529ddc5924e02fae341e781b","modified":1706516248260},{"_id":"source/img/funcDesign/Istio多集群监听.png","hash":"1c89fd36bbcb3e0bf674d60e519c961769ebcd08","modified":1696658810311},{"_id":"source/img/funcDesign/健康检查version.png","hash":"89840366b7df15dbf950adda8289fcc4c6f30ac1","modified":1696658810341},{"_id":"source/img/funcDesign/项目级插件流程.png","hash":"0c785616ffbd93254644cf467f174627bc87127a","modified":1696658810376},{"_id":"source/img/funcDesign/API Plane多集群配置下发.png","hash":"a753124c2924de751498945fdffcbb46d368fde2","modified":1696658810305},{"_id":"source/img/funcDesign/网关多集群.png","hash":"9ca709a1573ce2fc19c91d1b8c8a9b2f75655039","modified":1696658810361},{"_id":"source/img/funcDesign/区域路由优先.png","hash":"3fd2791cae8cd4fc572ce33c0008e25ea1d3bafe","modified":1696658810342},{"_id":"source/img/funcDesign/网关总体架构.png","hash":"a9457d5f1df2a564f0fcc9d662c9e385b22f54a6","modified":1696658810363},{"_id":"source/img/funcDesign/两地三中心部署架构.png","hash":"c05fa880883bd321986a9a2d6ff194b4241ae115","modified":1696658810340},{"_id":"source/img/funcDesign/K8s informer.png","hash":"6611854fda912956e158753db328394a8c4f81b4","modified":1696658810313},{"_id":"public/img/funcDesign/Istio多集群监听.png","hash":"1c89fd36bbcb3e0bf674d60e519c961769ebcd08","modified":1706185092056},{"_id":"public/img/funcDesign/健康检查version.png","hash":"89840366b7df15dbf950adda8289fcc4c6f30ac1","modified":1706185092056},{"_id":"public/img/funcDesign/项目级插件流程.png","hash":"0c785616ffbd93254644cf467f174627bc87127a","modified":1706185092056},{"_id":"public/img/funcDesign/区域路由优先.png","hash":"3fd2791cae8cd4fc572ce33c0008e25ea1d3bafe","modified":1706185092056},{"_id":"public/img/funcDesign/网关多集群.png","hash":"9ca709a1573ce2fc19c91d1b8c8a9b2f75655039","modified":1706185092056},{"_id":"public/img/funcDesign/API Plane多集群配置下发.png","hash":"a753124c2924de751498945fdffcbb46d368fde2","modified":1706185092056},{"_id":"public/img/funcDesign/网关总体架构.png","hash":"a9457d5f1df2a564f0fcc9d662c9e385b22f54a6","modified":1706185092056},{"_id":"public/img/funcDesign/两地三中心部署架构.png","hash":"c05fa880883bd321986a9a2d6ff194b4241ae115","modified":1706185092056},{"_id":"public/img/funcDesign/K8s informer.png","hash":"6611854fda912956e158753db328394a8c4f81b4","modified":1706185092056},{"_id":"source/img/funcDesign/监控_架构图.png","hash":"9ba4aed10b29f59426446e489979cc9e9d7ca85b","modified":1696658810449},{"_id":"public/img/funcDesign/监控_架构图.png","hash":"9ba4aed10b29f59426446e489979cc9e9d7ca85b","modified":1706516248260}],"Category":[{"name":"kafka","_id":"clrc9ud0m0004q3yw5fh7cpzd"},{"name":"Kubernetes","_id":"clrc9ud0p000cq3ywf1cqg41g"},{"name":"Netty","_id":"clrc9ud0p000iq3ywf9sjasen"},{"name":"ServiceMesh","_id":"clrc9ud0t0017q3ywcwky1nzv"},{"name":"SpringCloudGateway","_id":"clrhkwyeq0000s0ywexsf5tbi"},{"name":"云原生网关","_id":"clrilh6820000jlywbxdb8634"},{"name":"分布式事务","_id":"clriw970g0007jlyw1odu9dh5"},{"name":"生活","_id":"clronaywv0000bwyw1xwcdknw"},{"name":"Hango","_id":"clrt5e8p1000193ywfqas1gyf"}],"Data":[{"_id":"friends","data":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]},{"_id":"musics","data":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}],"Page":[{"_content":"14acea024326ca5374e8781ab0e7e89b","source":"baidu_verify_code-XTYqJDa5zw.html","raw":"14acea024326ca5374e8781ab0e7e89b","date":"2024-01-12T13:57:35.760Z","updated":"2024-01-12T13:57:35.760Z","path":"baidu_verify_code-XTYqJDa5zw.html","title":"","comments":1,"layout":"page","_id":"clrc9ud0j0000q3yw0cja4fpk","content":"14acea024326ca5374e8781ab0e7e89b","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"14acea024326ca5374e8781ab0e7e89b"},{"title":"404","date":"2022-03-12T08:42:59.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2022-03-12 16:42:59\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2024-01-12T13:57:35.751Z","path":"404/index.html","comments":1,"_id":"clrc9ud0m0002q3yw8ldj8ub4","content":"","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":""},{"title":"about","date":"2022-03-12T08:41:09.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-03-12 16:41:09\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2024-01-12T13:57:35.760Z","path":"about/index.html","comments":1,"_id":"clrc9ud0n0006q3yw23v2ai2l","content":"","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":""},{"layout":"bb","title":"黑石说","date":"2022-03-13T04:31:16.000Z","tags":null,"_content":"","source":"bb/index.md","raw":"---\nlayout: bb\ntitle: 黑石说\ndate: 2022-03-13 12:31:16\ntags:\n---\n","updated":"2024-01-12T13:57:35.760Z","path":"bb/index.html","comments":1,"_id":"clrc9ud0o0008q3ywex8abz3m","content":"","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":""},{"layout":"page","title":"technology","date":"2022-03-20T10:11:29.000Z","tags":null,"_content":"\n### 面经--倾听潮汐.pdf\n<iframe src=\"./source/面经--倾听潮汐.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n\n### 石杉的架构笔记[第二版]最新版本.pdf\n<iframe src=\"./source/石杉的架构笔记[第二版]最新版本.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n\n### JAVA核心面试知识整理.pdf\n<iframe src=\"./source/JAVA核心面试知识整理.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n","source":"books/index.md","raw":"---\nlayout: page\ntitle: technology\ndate: 2022-03-20 18:11:29\ntags: \n---\n\n### 面经--倾听潮汐.pdf\n<iframe src=\"./source/面经--倾听潮汐.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n\n### 石杉的架构笔记[第二版]最新版本.pdf\n<iframe src=\"./source/石杉的架构笔记[第二版]最新版本.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n\n### JAVA核心面试知识整理.pdf\n<iframe src=\"./source/JAVA核心面试知识整理.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n","updated":"2024-01-13T15:27:23.912Z","path":"books/index.html","comments":1,"_id":"clrc9ud0o000aq3ywa9hw9obv","content":"<h3 id=\"面经–倾听潮汐-pdf\"><a href=\"#面经–倾听潮汐-pdf\" class=\"headerlink\" title=\"面经–倾听潮汐.pdf\"></a>面经–倾听潮汐.pdf</h3><iframe src=\"./source/面经--倾听潮汐.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n\n<h3 id=\"石杉的架构笔记-第二版-最新版本-pdf\"><a href=\"#石杉的架构笔记-第二版-最新版本-pdf\" class=\"headerlink\" title=\"石杉的架构笔记[第二版]最新版本.pdf\"></a>石杉的架构笔记[第二版]最新版本.pdf</h3><iframe src=\"./source/石杉的架构笔记[第二版]最新版本.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n\n<h3 id=\"JAVA核心面试知识整理-pdf\"><a href=\"#JAVA核心面试知识整理-pdf\" class=\"headerlink\" title=\"JAVA核心面试知识整理.pdf\"></a>JAVA核心面试知识整理.pdf</h3><iframe src=\"./source/JAVA核心面试知识整理.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h3 id=\"面经–倾听潮汐-pdf\"><a href=\"#面经–倾听潮汐-pdf\" class=\"headerlink\" title=\"面经–倾听潮汐.pdf\"></a>面经–倾听潮汐.pdf</h3><iframe src=\"./source/面经--倾听潮汐.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n\n<h3 id=\"石杉的架构笔记-第二版-最新版本-pdf\"><a href=\"#石杉的架构笔记-第二版-最新版本-pdf\" class=\"headerlink\" title=\"石杉的架构笔记[第二版]最新版本.pdf\"></a>石杉的架构笔记[第二版]最新版本.pdf</h3><iframe src=\"./source/石杉的架构笔记[第二版]最新版本.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n\n<h3 id=\"JAVA核心面试知识整理-pdf\"><a href=\"#JAVA核心面试知识整理-pdf\" class=\"headerlink\" title=\"JAVA核心面试知识整理.pdf\"></a>JAVA核心面试知识整理.pdf</h3><iframe src=\"./source/JAVA核心面试知识整理.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n"},{"title":"categories","date":"2022-03-12T08:39:55.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-03-12 16:39:55\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2024-01-12T13:57:35.761Z","path":"categories/index.html","comments":1,"_id":"clrc9ud0p000fq3ywdyyma5oq","content":"","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":""},{"title":"contact","date":"2022-03-12T08:41:31.000Z","type":"contact","layout":"contact","_content":"留言不需要登陆","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2022-03-12 16:41:31\ntype: \"contact\"\nlayout: \"contact\"\n---\n留言不需要登陆","updated":"2024-01-12T13:57:35.761Z","path":"contact/index.html","comments":1,"_id":"clrc9ud0p000gq3ywf3z8848p","content":"<p>留言不需要登陆</p>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<p>留言不需要登陆</p>\n"},{"layout":"page","title":"galleries","date":"2022-03-19T16:52:30.000Z","tags":null,"_content":"","source":"galleries/index.md","raw":"---\nlayout: page\ntitle: galleries\ndate: 2022-03-20 00:52:30\ntags:\n---\n","updated":"2024-01-12T13:57:35.762Z","path":"galleries/index.html","comments":1,"_id":"clrc9ud0q000kq3yw5jp61213","content":"","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":""},{"layout":"music","title":"musics","date":"2022-03-13T07:39:49.000Z","type":"music","_content":"\n<iframe height=498 width=700 src=\"//player.bilibili.com/player.html?aid=972652750&bvid=BV1Xp4y1t76t&cid=329086233&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"/>\n","source":"musics/index.md","raw":"---\nlayout: music\ntitle: musics\ndate: 2022-03-13 15:39:49\ntype: music\n---\n\n<iframe height=498 width=700 src=\"//player.bilibili.com/player.html?aid=972652750&bvid=BV1Xp4y1t76t&cid=329086233&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"/>\n","updated":"2024-01-12T13:57:35.763Z","path":"musics/index.html","comments":1,"_id":"clrc9ud0q000mq3yw86q61poz","content":"<iframe height=\"498\" width=\"700\" src=\"//player.bilibili.com/player.html?aid=972652750&amp;bvid=BV1Xp4y1t76t&amp;cid=329086233&amp;page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\">\n</iframe>","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<iframe height=498 width=700 src=\"//player.bilibili.com/player.html?aid=972652750&bvid=BV1Xp4y1t76t&cid=329086233&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"/>\n"},{"layout":"page","title":"movies","date":"2022-03-19T16:52:16.000Z","tags":null,"_content":"","source":"movies/index.md","raw":"---\nlayout: page\ntitle: movies\ndate: 2022-03-20 00:52:16\ntags:\n---\n","updated":"2024-01-12T13:57:35.762Z","path":"movies/index.html","comments":1,"_id":"clrc9ud0r000qq3yw0hka7fr1","content":"","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":""},{"title":"tags","date":"2022-03-12T08:40:39.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-03-12 16:40:39\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2024-01-13T14:49:22.491Z","path":"tags/index.html","comments":1,"_id":"clrc9ud0r000sq3yw6xo54eta","content":"","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":""},{"title":"friends","date":"2022-03-12T08:41:50.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2022-03-12 16:41:50\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2024-01-12T13:57:35.761Z","path":"friends/index.html","comments":1,"_id":"clrc9ud0r000wq3ywfc6l8p48","content":"","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":""}],"Post":[{"title":"netty三种IO的支持","date":"2022-03-13T15:25:00.000Z","_content":"\n### 什么是经典的三种I/O模式？\n\n| 场景  | 模式  | jdk支持  |\n|:----------|:----------|:----------|\n| 排队打饭    | BIO(阻塞I/O)    | jdk1.4之前    |\n| 点单、等待被叫模式    | NIO(非阻塞I/O)  | JDK1.4   |\n| 包厢   | AIO（非阻塞异步I/O）    | JDK1.7    |\n\n\n### Netty对三种I/O模式的支持？\n曾经对于三种IO都曾做过支持\n\n### 为什么Netty仅支持NIO了？\n\n1、不建议使用阻塞I/O（BIO/OIO），因为在连接数高的情况下，阻塞意味着占用一个线程，比较耗资源，效率非常低。\n2、对于不同平台支持的成熟度不同，windows实现成熟，但是很少用来做服务器。linux常用来做服务器，但是AIO不够成熟，并且Linux下AIO相比较NIO的性能提升不明显。\n\n### 为什么Netty有多种NIO实现 ？\n通用的NIO实现在Linux下也是使用epoll，为什么Netty还要单独实现？\n\n1、因为Netty实现得更好，Netty暴露了更多的可控参数，例如：\n* JDK的NIO默认实现是水平触发\n* Netty是边缘触发和水平触发可切换\n\n```ps：单独解释边缘触发啊和水平触发```\n\n2、Netty实现的垃圾回收更少、性能更好\n\n### NIO一定优于BIO吗？\n\n1、BIO代码简单\n2、特定场景：连接数少、并发度低、BIO性能不输NIO\n\n### 源码解读Netty怎么切换I/O模式？\n\n怎么切换？\n\n原理是什么？\n\n为什么服务器开发并不需要切换客户端对应的socket？\n\n","source":"_posts/Netty/netty三种IO的支持.md","raw":"---\ntitle: netty三种IO的支持\ndate: 2022-03-13 23:25:00\ntags:\n  - Netty \ncategories: Netty\n---\n\n### 什么是经典的三种I/O模式？\n\n| 场景  | 模式  | jdk支持  |\n|:----------|:----------|:----------|\n| 排队打饭    | BIO(阻塞I/O)    | jdk1.4之前    |\n| 点单、等待被叫模式    | NIO(非阻塞I/O)  | JDK1.4   |\n| 包厢   | AIO（非阻塞异步I/O）    | JDK1.7    |\n\n\n### Netty对三种I/O模式的支持？\n曾经对于三种IO都曾做过支持\n\n### 为什么Netty仅支持NIO了？\n\n1、不建议使用阻塞I/O（BIO/OIO），因为在连接数高的情况下，阻塞意味着占用一个线程，比较耗资源，效率非常低。\n2、对于不同平台支持的成熟度不同，windows实现成熟，但是很少用来做服务器。linux常用来做服务器，但是AIO不够成熟，并且Linux下AIO相比较NIO的性能提升不明显。\n\n### 为什么Netty有多种NIO实现 ？\n通用的NIO实现在Linux下也是使用epoll，为什么Netty还要单独实现？\n\n1、因为Netty实现得更好，Netty暴露了更多的可控参数，例如：\n* JDK的NIO默认实现是水平触发\n* Netty是边缘触发和水平触发可切换\n\n```ps：单独解释边缘触发啊和水平触发```\n\n2、Netty实现的垃圾回收更少、性能更好\n\n### NIO一定优于BIO吗？\n\n1、BIO代码简单\n2、特定场景：连接数少、并发度低、BIO性能不输NIO\n\n### 源码解读Netty怎么切换I/O模式？\n\n怎么切换？\n\n原理是什么？\n\n为什么服务器开发并不需要切换客户端对应的socket？\n\n","slug":"Netty/netty三种IO的支持","published":1,"updated":"2024-01-12T13:57:35.754Z","_id":"clrhllnh4000ds0ywbg9mdrs1","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"什么是经典的三种I-x2F-O模式？\"><a href=\"#什么是经典的三种I-x2F-O模式？\" class=\"headerlink\" title=\"什么是经典的三种I/O模式？\"></a>什么是经典的三种I/O模式？</h3><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">模式</th>\n<th align=\"left\">jdk支持</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">排队打饭</td>\n<td align=\"left\">BIO(阻塞I/O)</td>\n<td align=\"left\">jdk1.4之前</td>\n</tr>\n<tr>\n<td align=\"left\">点单、等待被叫模式</td>\n<td align=\"left\">NIO(非阻塞I/O)</td>\n<td align=\"left\">JDK1.4</td>\n</tr>\n<tr>\n<td align=\"left\">包厢</td>\n<td align=\"left\">AIO（非阻塞异步I/O）</td>\n<td align=\"left\">JDK1.7</td>\n</tr>\n</tbody></table>\n<h3 id=\"Netty对三种I-x2F-O模式的支持？\"><a href=\"#Netty对三种I-x2F-O模式的支持？\" class=\"headerlink\" title=\"Netty对三种I/O模式的支持？\"></a>Netty对三种I/O模式的支持？</h3><p>曾经对于三种IO都曾做过支持</p>\n<h3 id=\"为什么Netty仅支持NIO了？\"><a href=\"#为什么Netty仅支持NIO了？\" class=\"headerlink\" title=\"为什么Netty仅支持NIO了？\"></a>为什么Netty仅支持NIO了？</h3><p>1、不建议使用阻塞I/O（BIO/OIO），因为在连接数高的情况下，阻塞意味着占用一个线程，比较耗资源，效率非常低。<br>2、对于不同平台支持的成熟度不同，windows实现成熟，但是很少用来做服务器。linux常用来做服务器，但是AIO不够成熟，并且Linux下AIO相比较NIO的性能提升不明显。</p>\n<h3 id=\"为什么Netty有多种NIO实现-？\"><a href=\"#为什么Netty有多种NIO实现-？\" class=\"headerlink\" title=\"为什么Netty有多种NIO实现 ？\"></a>为什么Netty有多种NIO实现 ？</h3><p>通用的NIO实现在Linux下也是使用epoll，为什么Netty还要单独实现？</p>\n<p>1、因为Netty实现得更好，Netty暴露了更多的可控参数，例如：</p>\n<ul>\n<li>JDK的NIO默认实现是水平触发</li>\n<li>Netty是边缘触发和水平触发可切换</li>\n</ul>\n<p><code>ps：单独解释边缘触发啊和水平触发</code></p>\n<p>2、Netty实现的垃圾回收更少、性能更好</p>\n<h3 id=\"NIO一定优于BIO吗？\"><a href=\"#NIO一定优于BIO吗？\" class=\"headerlink\" title=\"NIO一定优于BIO吗？\"></a>NIO一定优于BIO吗？</h3><p>1、BIO代码简单<br>2、特定场景：连接数少、并发度低、BIO性能不输NIO</p>\n<h3 id=\"源码解读Netty怎么切换I-x2F-O模式？\"><a href=\"#源码解读Netty怎么切换I-x2F-O模式？\" class=\"headerlink\" title=\"源码解读Netty怎么切换I/O模式？\"></a>源码解读Netty怎么切换I/O模式？</h3><p>怎么切换？</p>\n<p>原理是什么？</p>\n<p>为什么服务器开发并不需要切换客户端对应的socket？</p>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h3 id=\"什么是经典的三种I-x2F-O模式？\"><a href=\"#什么是经典的三种I-x2F-O模式？\" class=\"headerlink\" title=\"什么是经典的三种I&#x2F;O模式？\"></a>什么是经典的三种I&#x2F;O模式？</h3><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">模式</th>\n<th align=\"left\">jdk支持</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">排队打饭</td>\n<td align=\"left\">BIO(阻塞I&#x2F;O)</td>\n<td align=\"left\">jdk1.4之前</td>\n</tr>\n<tr>\n<td align=\"left\">点单、等待被叫模式</td>\n<td align=\"left\">NIO(非阻塞I&#x2F;O)</td>\n<td align=\"left\">JDK1.4</td>\n</tr>\n<tr>\n<td align=\"left\">包厢</td>\n<td align=\"left\">AIO（非阻塞异步I&#x2F;O）</td>\n<td align=\"left\">JDK1.7</td>\n</tr>\n</tbody></table>\n<h3 id=\"Netty对三种I-x2F-O模式的支持？\"><a href=\"#Netty对三种I-x2F-O模式的支持？\" class=\"headerlink\" title=\"Netty对三种I&#x2F;O模式的支持？\"></a>Netty对三种I&#x2F;O模式的支持？</h3><p>曾经对于三种IO都曾做过支持</p>\n<h3 id=\"为什么Netty仅支持NIO了？\"><a href=\"#为什么Netty仅支持NIO了？\" class=\"headerlink\" title=\"为什么Netty仅支持NIO了？\"></a>为什么Netty仅支持NIO了？</h3><p>1、不建议使用阻塞I&#x2F;O（BIO&#x2F;OIO），因为在连接数高的情况下，阻塞意味着占用一个线程，比较耗资源，效率非常低。<br>2、对于不同平台支持的成熟度不同，windows实现成熟，但是很少用来做服务器。linux常用来做服务器，但是AIO不够成熟，并且Linux下AIO相比较NIO的性能提升不明显。</p>\n<h3 id=\"为什么Netty有多种NIO实现-？\"><a href=\"#为什么Netty有多种NIO实现-？\" class=\"headerlink\" title=\"为什么Netty有多种NIO实现 ？\"></a>为什么Netty有多种NIO实现 ？</h3><p>通用的NIO实现在Linux下也是使用epoll，为什么Netty还要单独实现？</p>\n<p>1、因为Netty实现得更好，Netty暴露了更多的可控参数，例如：</p>\n<ul>\n<li>JDK的NIO默认实现是水平触发</li>\n<li>Netty是边缘触发和水平触发可切换</li>\n</ul>\n<p><code>ps：单独解释边缘触发啊和水平触发</code></p>\n<p>2、Netty实现的垃圾回收更少、性能更好</p>\n<h3 id=\"NIO一定优于BIO吗？\"><a href=\"#NIO一定优于BIO吗？\" class=\"headerlink\" title=\"NIO一定优于BIO吗？\"></a>NIO一定优于BIO吗？</h3><p>1、BIO代码简单<br>2、特定场景：连接数少、并发度低、BIO性能不输NIO</p>\n<h3 id=\"源码解读Netty怎么切换I-x2F-O模式？\"><a href=\"#源码解读Netty怎么切换I-x2F-O模式？\" class=\"headerlink\" title=\"源码解读Netty怎么切换I&#x2F;O模式？\"></a>源码解读Netty怎么切换I&#x2F;O模式？</h3><p>怎么切换？</p>\n<p>原理是什么？</p>\n<p>为什么服务器开发并不需要切换客户端对应的socket？</p>\n"},{"title":"netty如何支持三种Reactor","date":"2022-03-13T01:25:00.000Z","summary":"什么是Reactor?以及如何在Netty中使用Reactor模式?","_content":"### 什么是Reactor及三种版本\n* Reactor单线程\n  客户端请求到达服务端，服务端创建一个线程处理读取、解码、业务处理、编码、返回响应一整个流程\n\n* Reactor多线程模式\n  将解码、业务处理、编码的这三个操作都由工作线程池来处理\n\n* 主从Reactor多线程模式\n\n主Reactor负责接收请求，从Reactor负责读请求和写响应，工作线程负责解码、业务处理、编码。\n\nReactor是一种开发模式，模式的核心流程：\n注册感兴趣的事件 ->扫描是否有感兴趣的事件发生 ->事件发生后做出相应处理\n\n| client/server  | SocketChannel/ServerSocketChannel  | OP_ACCEPT  | OP_CONNECT  | OP_WRITE  | OP_READ  |\n|:----------|:----------|:----------|:----------|:----------|:----------|\n| client    | SocketChannel    |    | Y    | Y    | Y    |\n| server    | ServerSocketChannel    | Y    |      |      |     |\n| server    | SocketChannel    |     |      | Y    | Y    |\n\n\n\n### 如何在Netty中使用Reactor模式\n\n* Reactor单线程模式：\n```\nEventLoopGroup eventGroup = new NioEventLoopGroup(1);\nServerBootstrap serverBootstrap = new ServerBootstrap();\nserverBootstrap.group(eventGroup);\n```\n\n* 非主从Reactor多线程模式\n```\nEventLoopGroup eventGroup = new NioEventLoopGroup();\nServerBootstrap serverBootstrap = new ServerBootstrap();\nserverBootstrap.group(eventGroup);\n```\n\n* 主从Reactor多线程模式\n```\nEventLoopGroup bossGroup = new NioEventLoopGroup();\nEventLoopGroup workerGroup = new NioEventLoopGroup();\nServerBootstrap serverBootstrap = new ServerBootstrap();\nserverBootstrap.group(bossGroup, workerGroup)\n```\n\n\n### 解析Netty对Reactor模式支持的常见疑问\n\nNetty如何支持主从Reactor模式？\n\n通过传递过来的channel创建子Channel，两种SocketChannel绑定到两个Gruop里面去，这样就完成了主从Reactor模式的支持。\n\n为什么说Netty的main reactor大多数并不能用到一个线程组，只能线程组里的一个？\n因为一个服务器一般来说只用绑定一个地址，一个端口\n\n\nNetty给Channel分配NIO event loop的规则是什么？\n\n1、增值、取模、取正值\n\n2、executors总数是2的幂次方然后&运算\n\n\n通常模式的NIO实现多路复用器是怎么跨平台的？\n通过JDK 读取平台信息 ，创建适合不同平台的实现\n\n\n\n\n\n\n\n","source":"_posts/Netty/netty如何支持三种Reactor.md","raw":"---\ntitle: netty如何支持三种Reactor\ndate: 2022-03-13 09:25:00\ntags:\n  - Netty\nsummary: 什么是Reactor?以及如何在Netty中使用Reactor模式?\ncategories: Netty\n---\n### 什么是Reactor及三种版本\n* Reactor单线程\n  客户端请求到达服务端，服务端创建一个线程处理读取、解码、业务处理、编码、返回响应一整个流程\n\n* Reactor多线程模式\n  将解码、业务处理、编码的这三个操作都由工作线程池来处理\n\n* 主从Reactor多线程模式\n\n主Reactor负责接收请求，从Reactor负责读请求和写响应，工作线程负责解码、业务处理、编码。\n\nReactor是一种开发模式，模式的核心流程：\n注册感兴趣的事件 ->扫描是否有感兴趣的事件发生 ->事件发生后做出相应处理\n\n| client/server  | SocketChannel/ServerSocketChannel  | OP_ACCEPT  | OP_CONNECT  | OP_WRITE  | OP_READ  |\n|:----------|:----------|:----------|:----------|:----------|:----------|\n| client    | SocketChannel    |    | Y    | Y    | Y    |\n| server    | ServerSocketChannel    | Y    |      |      |     |\n| server    | SocketChannel    |     |      | Y    | Y    |\n\n\n\n### 如何在Netty中使用Reactor模式\n\n* Reactor单线程模式：\n```\nEventLoopGroup eventGroup = new NioEventLoopGroup(1);\nServerBootstrap serverBootstrap = new ServerBootstrap();\nserverBootstrap.group(eventGroup);\n```\n\n* 非主从Reactor多线程模式\n```\nEventLoopGroup eventGroup = new NioEventLoopGroup();\nServerBootstrap serverBootstrap = new ServerBootstrap();\nserverBootstrap.group(eventGroup);\n```\n\n* 主从Reactor多线程模式\n```\nEventLoopGroup bossGroup = new NioEventLoopGroup();\nEventLoopGroup workerGroup = new NioEventLoopGroup();\nServerBootstrap serverBootstrap = new ServerBootstrap();\nserverBootstrap.group(bossGroup, workerGroup)\n```\n\n\n### 解析Netty对Reactor模式支持的常见疑问\n\nNetty如何支持主从Reactor模式？\n\n通过传递过来的channel创建子Channel，两种SocketChannel绑定到两个Gruop里面去，这样就完成了主从Reactor模式的支持。\n\n为什么说Netty的main reactor大多数并不能用到一个线程组，只能线程组里的一个？\n因为一个服务器一般来说只用绑定一个地址，一个端口\n\n\nNetty给Channel分配NIO event loop的规则是什么？\n\n1、增值、取模、取正值\n\n2、executors总数是2的幂次方然后&运算\n\n\n通常模式的NIO实现多路复用器是怎么跨平台的？\n通过JDK 读取平台信息 ，创建适合不同平台的实现\n\n\n\n\n\n\n\n","slug":"Netty/netty如何支持三种Reactor","published":1,"updated":"2024-01-12T13:57:35.754Z","_id":"clrhllt84000gs0yw2bg9gxgl","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"什么是Reactor及三种版本\"><a href=\"#什么是Reactor及三种版本\" class=\"headerlink\" title=\"什么是Reactor及三种版本\"></a>什么是Reactor及三种版本</h3><ul>\n<li><p>Reactor单线程<br>客户端请求到达服务端，服务端创建一个线程处理读取、解码、业务处理、编码、返回响应一整个流程</p>\n</li>\n<li><p>Reactor多线程模式<br>将解码、业务处理、编码的这三个操作都由工作线程池来处理</p>\n</li>\n<li><p>主从Reactor多线程模式</p>\n</li>\n</ul>\n<p>主Reactor负责接收请求，从Reactor负责读请求和写响应，工作线程负责解码、业务处理、编码。</p>\n<p>Reactor是一种开发模式，模式的核心流程：<br>注册感兴趣的事件 -&gt;扫描是否有感兴趣的事件发生 -&gt;事件发生后做出相应处理</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">client/server</th>\n<th align=\"left\">SocketChannel/ServerSocketChannel</th>\n<th align=\"left\">OP_ACCEPT</th>\n<th align=\"left\">OP_CONNECT</th>\n<th align=\"left\">OP_WRITE</th>\n<th align=\"left\">OP_READ</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">client</td>\n<td align=\"left\">SocketChannel</td>\n<td align=\"left\"></td>\n<td align=\"left\">Y</td>\n<td align=\"left\">Y</td>\n<td align=\"left\">Y</td>\n</tr>\n<tr>\n<td align=\"left\">server</td>\n<td align=\"left\">ServerSocketChannel</td>\n<td align=\"left\">Y</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">server</td>\n<td align=\"left\">SocketChannel</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">Y</td>\n<td align=\"left\">Y</td>\n</tr>\n</tbody></table>\n<h3 id=\"如何在Netty中使用Reactor模式\"><a href=\"#如何在Netty中使用Reactor模式\" class=\"headerlink\" title=\"如何在Netty中使用Reactor模式\"></a>如何在Netty中使用Reactor模式</h3><ul>\n<li><p>Reactor单线程模式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">EventLoopGroup eventGroup = new NioEventLoopGroup(1);\nServerBootstrap serverBootstrap = new ServerBootstrap();\nserverBootstrap.group(eventGroup);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>非主从Reactor多线程模式</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">EventLoopGroup eventGroup = new NioEventLoopGroup();\nServerBootstrap serverBootstrap = new ServerBootstrap();\nserverBootstrap.group(eventGroup);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>主从Reactor多线程模式</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">EventLoopGroup bossGroup = new NioEventLoopGroup();\nEventLoopGroup workerGroup = new NioEventLoopGroup();\nServerBootstrap serverBootstrap = new ServerBootstrap();\nserverBootstrap.group(bossGroup, workerGroup)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"解析Netty对Reactor模式支持的常见疑问\"><a href=\"#解析Netty对Reactor模式支持的常见疑问\" class=\"headerlink\" title=\"解析Netty对Reactor模式支持的常见疑问\"></a>解析Netty对Reactor模式支持的常见疑问</h3><p>Netty如何支持主从Reactor模式？</p>\n<p>通过传递过来的channel创建子Channel，两种SocketChannel绑定到两个Gruop里面去，这样就完成了主从Reactor模式的支持。</p>\n<p>为什么说Netty的main reactor大多数并不能用到一个线程组，只能线程组里的一个？<br>因为一个服务器一般来说只用绑定一个地址，一个端口</p>\n<p>Netty给Channel分配NIO event loop的规则是什么？</p>\n<p>1、增值、取模、取正值</p>\n<p>2、executors总数是2的幂次方然后&amp;运算</p>\n<p>通常模式的NIO实现多路复用器是怎么跨平台的？<br>通过JDK 读取平台信息 ，创建适合不同平台的实现</p>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h3 id=\"什么是Reactor及三种版本\"><a href=\"#什么是Reactor及三种版本\" class=\"headerlink\" title=\"什么是Reactor及三种版本\"></a>什么是Reactor及三种版本</h3><ul>\n<li><p>Reactor单线程<br>客户端请求到达服务端，服务端创建一个线程处理读取、解码、业务处理、编码、返回响应一整个流程</p>\n</li>\n<li><p>Reactor多线程模式<br>将解码、业务处理、编码的这三个操作都由工作线程池来处理</p>\n</li>\n<li><p>主从Reactor多线程模式</p>\n</li>\n</ul>\n<p>主Reactor负责接收请求，从Reactor负责读请求和写响应，工作线程负责解码、业务处理、编码。</p>\n<p>Reactor是一种开发模式，模式的核心流程：<br>注册感兴趣的事件 -&gt;扫描是否有感兴趣的事件发生 -&gt;事件发生后做出相应处理</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">client&#x2F;server</th>\n<th align=\"left\">SocketChannel&#x2F;ServerSocketChannel</th>\n<th align=\"left\">OP_ACCEPT</th>\n<th align=\"left\">OP_CONNECT</th>\n<th align=\"left\">OP_WRITE</th>\n<th align=\"left\">OP_READ</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">client</td>\n<td align=\"left\">SocketChannel</td>\n<td align=\"left\"></td>\n<td align=\"left\">Y</td>\n<td align=\"left\">Y</td>\n<td align=\"left\">Y</td>\n</tr>\n<tr>\n<td align=\"left\">server</td>\n<td align=\"left\">ServerSocketChannel</td>\n<td align=\"left\">Y</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">server</td>\n<td align=\"left\">SocketChannel</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">Y</td>\n<td align=\"left\">Y</td>\n</tr>\n</tbody></table>\n<h3 id=\"如何在Netty中使用Reactor模式\"><a href=\"#如何在Netty中使用Reactor模式\" class=\"headerlink\" title=\"如何在Netty中使用Reactor模式\"></a>如何在Netty中使用Reactor模式</h3><ul>\n<li><p>Reactor单线程模式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">EventLoopGroup eventGroup &#x3D; new NioEventLoopGroup(1);\nServerBootstrap serverBootstrap &#x3D; new ServerBootstrap();\nserverBootstrap.group(eventGroup);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>非主从Reactor多线程模式</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">EventLoopGroup eventGroup &#x3D; new NioEventLoopGroup();\nServerBootstrap serverBootstrap &#x3D; new ServerBootstrap();\nserverBootstrap.group(eventGroup);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>主从Reactor多线程模式</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">EventLoopGroup bossGroup &#x3D; new NioEventLoopGroup();\nEventLoopGroup workerGroup &#x3D; new NioEventLoopGroup();\nServerBootstrap serverBootstrap &#x3D; new ServerBootstrap();\nserverBootstrap.group(bossGroup, workerGroup)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"解析Netty对Reactor模式支持的常见疑问\"><a href=\"#解析Netty对Reactor模式支持的常见疑问\" class=\"headerlink\" title=\"解析Netty对Reactor模式支持的常见疑问\"></a>解析Netty对Reactor模式支持的常见疑问</h3><p>Netty如何支持主从Reactor模式？</p>\n<p>通过传递过来的channel创建子Channel，两种SocketChannel绑定到两个Gruop里面去，这样就完成了主从Reactor模式的支持。</p>\n<p>为什么说Netty的main reactor大多数并不能用到一个线程组，只能线程组里的一个？<br>因为一个服务器一般来说只用绑定一个地址，一个端口</p>\n<p>Netty给Channel分配NIO event loop的规则是什么？</p>\n<p>1、增值、取模、取正值</p>\n<p>2、executors总数是2的幂次方然后&amp;运算</p>\n<p>通常模式的NIO实现多路复用器是怎么跨平台的？<br>通过JDK 读取平台信息 ，创建适合不同平台的实现</p>\n"},{"title":"netty如何玩转内存使用","date":"2022-03-13T16:01:00.000Z","_content":"\n### Netty如何玩转内存使用\n\n1、减少对象本身大小\n\n2、对分配内存进行预估\n\n3、Zero-Copy 零复制\n\n4、堆外内存\n\n优点：\n1、破除对空间限制，减轻GC压力\n\n2、避免复制\n\n缺点：\n\n1、创建速度稍慢\n\n2、堆外内存受操作系统管理\n\n\n\n5、内存池\n\n为什么引入对象池:\n\n1、创建对象开销大\n2、对象高频率创建且复用\n3、支持并发又能保护系统\n4、维持、共享有限的资源\n\n如何实现对象池？\n\n1、开源实现：Apache Commons Pool\n2、Netty轻量级对象池实现io.netty.util.Recycler\n\n### 源码解读Netty内存使用\n\n1、内存池/非内存池的默认选择及切换方式\nio.netty.channel.DefaultChannelConfig#allocator\n\n2、内存池的实现\nio.netty.buffer.PooledDireByteBuf\n3、堆外内存/堆内内存的默认选择及切换方式\n4、堆外内存的分配本质\n\n\n\n\n","source":"_posts/Netty/netty如何玩转内存使用.md","raw":"---\ntitle: netty如何玩转内存使用\ndate: 2022-03-14 00:01:00\ntags:\n  - Netty\ncategories: Netty\n---\n\n### Netty如何玩转内存使用\n\n1、减少对象本身大小\n\n2、对分配内存进行预估\n\n3、Zero-Copy 零复制\n\n4、堆外内存\n\n优点：\n1、破除对空间限制，减轻GC压力\n\n2、避免复制\n\n缺点：\n\n1、创建速度稍慢\n\n2、堆外内存受操作系统管理\n\n\n\n5、内存池\n\n为什么引入对象池:\n\n1、创建对象开销大\n2、对象高频率创建且复用\n3、支持并发又能保护系统\n4、维持、共享有限的资源\n\n如何实现对象池？\n\n1、开源实现：Apache Commons Pool\n2、Netty轻量级对象池实现io.netty.util.Recycler\n\n### 源码解读Netty内存使用\n\n1、内存池/非内存池的默认选择及切换方式\nio.netty.channel.DefaultChannelConfig#allocator\n\n2、内存池的实现\nio.netty.buffer.PooledDireByteBuf\n3、堆外内存/堆内内存的默认选择及切换方式\n4、堆外内存的分配本质\n\n\n\n\n","slug":"Netty/netty如何玩转内存使用","published":1,"updated":"2024-01-12T13:57:35.757Z","_id":"clrhllxh4000js0ywdixk3a0g","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Netty如何玩转内存使用\"><a href=\"#Netty如何玩转内存使用\" class=\"headerlink\" title=\"Netty如何玩转内存使用\"></a>Netty如何玩转内存使用</h3><p>1、减少对象本身大小</p>\n<p>2、对分配内存进行预估</p>\n<p>3、Zero-Copy 零复制</p>\n<p>4、堆外内存</p>\n<p>优点：<br>1、破除对空间限制，减轻GC压力</p>\n<p>2、避免复制</p>\n<p>缺点：</p>\n<p>1、创建速度稍慢</p>\n<p>2、堆外内存受操作系统管理</p>\n<p>5、内存池</p>\n<p>为什么引入对象池:</p>\n<p>1、创建对象开销大<br>2、对象高频率创建且复用<br>3、支持并发又能保护系统<br>4、维持、共享有限的资源</p>\n<p>如何实现对象池？</p>\n<p>1、开源实现：Apache Commons Pool<br>2、Netty轻量级对象池实现io.netty.util.Recycler</p>\n<h3 id=\"源码解读Netty内存使用\"><a href=\"#源码解读Netty内存使用\" class=\"headerlink\" title=\"源码解读Netty内存使用\"></a>源码解读Netty内存使用</h3><p>1、内存池/非内存池的默认选择及切换方式<br>io.netty.channel.DefaultChannelConfig#allocator</p>\n<p>2、内存池的实现<br>io.netty.buffer.PooledDireByteBuf<br>3、堆外内存/堆内内存的默认选择及切换方式<br>4、堆外内存的分配本质</p>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h3 id=\"Netty如何玩转内存使用\"><a href=\"#Netty如何玩转内存使用\" class=\"headerlink\" title=\"Netty如何玩转内存使用\"></a>Netty如何玩转内存使用</h3><p>1、减少对象本身大小</p>\n<p>2、对分配内存进行预估</p>\n<p>3、Zero-Copy 零复制</p>\n<p>4、堆外内存</p>\n<p>优点：<br>1、破除对空间限制，减轻GC压力</p>\n<p>2、避免复制</p>\n<p>缺点：</p>\n<p>1、创建速度稍慢</p>\n<p>2、堆外内存受操作系统管理</p>\n<p>5、内存池</p>\n<p>为什么引入对象池:</p>\n<p>1、创建对象开销大<br>2、对象高频率创建且复用<br>3、支持并发又能保护系统<br>4、维持、共享有限的资源</p>\n<p>如何实现对象池？</p>\n<p>1、开源实现：Apache Commons Pool<br>2、Netty轻量级对象池实现io.netty.util.Recycler</p>\n<h3 id=\"源码解读Netty内存使用\"><a href=\"#源码解读Netty内存使用\" class=\"headerlink\" title=\"源码解读Netty内存使用\"></a>源码解读Netty内存使用</h3><p>1、内存池&#x2F;非内存池的默认选择及切换方式<br>io.netty.channel.DefaultChannelConfig#allocator</p>\n<p>2、内存池的实现<br>io.netty.buffer.PooledDireByteBuf<br>3、堆外内存&#x2F;堆内内存的默认选择及切换方式<br>4、堆外内存的分配本质</p>\n"},{"title":"TCP粘包、半包 Netty全搞定","date":"2022-03-13T15:59:00.000Z","_content":"\n1、什么是粘包和半包？\n\n粘包：一次接收全部消息\n\n半包：分多次接收到多个不完整的消息\n\n\n2、为什么TCP应用会出现粘包和半包现象\n\n粘包的主要原因：\n\n* 发送方每次写入数据 < 套接字缓冲区大小\n* 接收方读取套接字缓冲区数据不及时\n\n半包的主要原因：\n\n* 发送方写入数据 > 套接字缓冲区大小\n* 发送的数据大于协议的MTU(Maximum Transmission Unit，最大传输单元)，必须拆包\n\n\n收发：\n一个发送可能被多次接收，多个发送可能被一次接收\n\n传输：\n一个发送可能占用多个传输包，多个发送可能公用一个传输包\n\n根本原因：TCP是流式协议，消息无边界\n\n\n3、解决粘包和半包问题的几种常用方法\n\n解决问题的根本手段：找出消息边界：\n\n| 方式\\比较  | 寻找消息边界方式  | 优点  | 缺点  | 推荐度  |\n|:----------|:----------|:----------|:----------|:----------|\n| TCP连接改成短链接，一个请求一个短连接    | 建立连接到释放连接之间的信息即为传输消息    | 简单    | 效率低下    | 推荐度    |\n| (封装成帧)固定长度    | 满足固定长度即可    | 简单    | 空间浪费    | 不推荐    |\n| （封装成帧）分隔符    | 分隔符之间    | 空间不浪费，也比较简单    | 内容本身出现分隔符时需转义，所以需要扫描内容    | 推荐    |\n| (封装成帧)固定长度字段存内容的长度信息    | 先解析固定长度的字段获取长度，然后读取后续内容    | 精确定位用户数据，内容也不用转义    | 长度理论上有限制，需提前预知可能的最大长度从而定义长度占用字节数    | 推荐   |\n| (封装成帧)其他方式    | json   | 需要衡量实际场景，对现有协议的支持  |\n\n\n\n4、Netty对三种常用封帧方式的支持\n\n| 方式\\支持 | 解码  | 编码  |\n|:----------|:----------|:----------|\n| 固定长度    | FixedLengthFrameDecoder   | 简单    |\n| 分隔符    | DelimiterBasedFrameDecoder    | 简单    |\n| 固定长度字段存个内容的长度信息    | LengthFieldBasedFrameDecoder    | LengthFieldPrepender   |\n\n\n\n5、解读Netty处理粘包、半包的源码\n\n* 解码的核心工作流程\n\n\n* 解码中两种数据积累器的区别\n\n* 三种解码器的额外控制参数有哪些\n\n\n\n\n\n\n","source":"_posts/Netty/TCP粘包:半包 Netty全搞定.md","raw":"---\ntitle: TCP粘包、半包 Netty全搞定\ndate: 2022-03-13 23:59:00\ntags:\n  - Netty\ncategories: Netty\n---\n\n1、什么是粘包和半包？\n\n粘包：一次接收全部消息\n\n半包：分多次接收到多个不完整的消息\n\n\n2、为什么TCP应用会出现粘包和半包现象\n\n粘包的主要原因：\n\n* 发送方每次写入数据 < 套接字缓冲区大小\n* 接收方读取套接字缓冲区数据不及时\n\n半包的主要原因：\n\n* 发送方写入数据 > 套接字缓冲区大小\n* 发送的数据大于协议的MTU(Maximum Transmission Unit，最大传输单元)，必须拆包\n\n\n收发：\n一个发送可能被多次接收，多个发送可能被一次接收\n\n传输：\n一个发送可能占用多个传输包，多个发送可能公用一个传输包\n\n根本原因：TCP是流式协议，消息无边界\n\n\n3、解决粘包和半包问题的几种常用方法\n\n解决问题的根本手段：找出消息边界：\n\n| 方式\\比较  | 寻找消息边界方式  | 优点  | 缺点  | 推荐度  |\n|:----------|:----------|:----------|:----------|:----------|\n| TCP连接改成短链接，一个请求一个短连接    | 建立连接到释放连接之间的信息即为传输消息    | 简单    | 效率低下    | 推荐度    |\n| (封装成帧)固定长度    | 满足固定长度即可    | 简单    | 空间浪费    | 不推荐    |\n| （封装成帧）分隔符    | 分隔符之间    | 空间不浪费，也比较简单    | 内容本身出现分隔符时需转义，所以需要扫描内容    | 推荐    |\n| (封装成帧)固定长度字段存内容的长度信息    | 先解析固定长度的字段获取长度，然后读取后续内容    | 精确定位用户数据，内容也不用转义    | 长度理论上有限制，需提前预知可能的最大长度从而定义长度占用字节数    | 推荐   |\n| (封装成帧)其他方式    | json   | 需要衡量实际场景，对现有协议的支持  |\n\n\n\n4、Netty对三种常用封帧方式的支持\n\n| 方式\\支持 | 解码  | 编码  |\n|:----------|:----------|:----------|\n| 固定长度    | FixedLengthFrameDecoder   | 简单    |\n| 分隔符    | DelimiterBasedFrameDecoder    | 简单    |\n| 固定长度字段存个内容的长度信息    | LengthFieldBasedFrameDecoder    | LengthFieldPrepender   |\n\n\n\n5、解读Netty处理粘包、半包的源码\n\n* 解码的核心工作流程\n\n\n* 解码中两种数据积累器的区别\n\n* 三种解码器的额外控制参数有哪些\n\n\n\n\n\n\n","slug":"Netty/TCP粘包:半包 Netty全搞定","published":1,"updated":"2024-01-12T13:57:35.753Z","_id":"clrhlmwlk0000qzyw5yne8s08","comments":1,"layout":"post","photos":[],"link":"","content":"<p>1、什么是粘包和半包？</p>\n<p>粘包：一次接收全部消息</p>\n<p>半包：分多次接收到多个不完整的消息</p>\n<p>2、为什么TCP应用会出现粘包和半包现象</p>\n<p>粘包的主要原因：</p>\n<ul>\n<li>发送方每次写入数据 &lt; 套接字缓冲区大小</li>\n<li>接收方读取套接字缓冲区数据不及时</li>\n</ul>\n<p>半包的主要原因：</p>\n<ul>\n<li>发送方写入数据 &gt; 套接字缓冲区大小</li>\n<li>发送的数据大于协议的MTU(Maximum Transmission Unit，最大传输单元)，必须拆包</li>\n</ul>\n<p>收发：<br>一个发送可能被多次接收，多个发送可能被一次接收</p>\n<p>传输：<br>一个发送可能占用多个传输包，多个发送可能公用一个传输包</p>\n<p>根本原因：TCP是流式协议，消息无边界</p>\n<p>3、解决粘包和半包问题的几种常用方法</p>\n<p>解决问题的根本手段：找出消息边界：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方式\\比较</th>\n<th align=\"left\">寻找消息边界方式</th>\n<th align=\"left\">优点</th>\n<th align=\"left\">缺点</th>\n<th align=\"left\">推荐度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">TCP连接改成短链接，一个请求一个短连接</td>\n<td align=\"left\">建立连接到释放连接之间的信息即为传输消息</td>\n<td align=\"left\">简单</td>\n<td align=\"left\">效率低下</td>\n<td align=\"left\">推荐度</td>\n</tr>\n<tr>\n<td align=\"left\">(封装成帧)固定长度</td>\n<td align=\"left\">满足固定长度即可</td>\n<td align=\"left\">简单</td>\n<td align=\"left\">空间浪费</td>\n<td align=\"left\">不推荐</td>\n</tr>\n<tr>\n<td align=\"left\">（封装成帧）分隔符</td>\n<td align=\"left\">分隔符之间</td>\n<td align=\"left\">空间不浪费，也比较简单</td>\n<td align=\"left\">内容本身出现分隔符时需转义，所以需要扫描内容</td>\n<td align=\"left\">推荐</td>\n</tr>\n<tr>\n<td align=\"left\">(封装成帧)固定长度字段存内容的长度信息</td>\n<td align=\"left\">先解析固定长度的字段获取长度，然后读取后续内容</td>\n<td align=\"left\">精确定位用户数据，内容也不用转义</td>\n<td align=\"left\">长度理论上有限制，需提前预知可能的最大长度从而定义长度占用字节数</td>\n<td align=\"left\">推荐</td>\n</tr>\n<tr>\n<td align=\"left\">(封装成帧)其他方式</td>\n<td align=\"left\">json</td>\n<td align=\"left\">需要衡量实际场景，对现有协议的支持</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>4、Netty对三种常用封帧方式的支持</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方式\\支持</th>\n<th align=\"left\">解码</th>\n<th align=\"left\">编码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">固定长度</td>\n<td align=\"left\">FixedLengthFrameDecoder</td>\n<td align=\"left\">简单</td>\n</tr>\n<tr>\n<td align=\"left\">分隔符</td>\n<td align=\"left\">DelimiterBasedFrameDecoder</td>\n<td align=\"left\">简单</td>\n</tr>\n<tr>\n<td align=\"left\">固定长度字段存个内容的长度信息</td>\n<td align=\"left\">LengthFieldBasedFrameDecoder</td>\n<td align=\"left\">LengthFieldPrepender</td>\n</tr>\n</tbody></table>\n<p>5、解读Netty处理粘包、半包的源码</p>\n<ul>\n<li><p>解码的核心工作流程</p>\n</li>\n<li><p>解码中两种数据积累器的区别</p>\n</li>\n<li><p>三种解码器的额外控制参数有哪些</p>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<p>1、什么是粘包和半包？</p>\n<p>粘包：一次接收全部消息</p>\n<p>半包：分多次接收到多个不完整的消息</p>\n<p>2、为什么TCP应用会出现粘包和半包现象</p>\n<p>粘包的主要原因：</p>\n<ul>\n<li>发送方每次写入数据 &lt; 套接字缓冲区大小</li>\n<li>接收方读取套接字缓冲区数据不及时</li>\n</ul>\n<p>半包的主要原因：</p>\n<ul>\n<li>发送方写入数据 &gt; 套接字缓冲区大小</li>\n<li>发送的数据大于协议的MTU(Maximum Transmission Unit，最大传输单元)，必须拆包</li>\n</ul>\n<p>收发：<br>一个发送可能被多次接收，多个发送可能被一次接收</p>\n<p>传输：<br>一个发送可能占用多个传输包，多个发送可能公用一个传输包</p>\n<p>根本原因：TCP是流式协议，消息无边界</p>\n<p>3、解决粘包和半包问题的几种常用方法</p>\n<p>解决问题的根本手段：找出消息边界：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方式\\比较</th>\n<th align=\"left\">寻找消息边界方式</th>\n<th align=\"left\">优点</th>\n<th align=\"left\">缺点</th>\n<th align=\"left\">推荐度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">TCP连接改成短链接，一个请求一个短连接</td>\n<td align=\"left\">建立连接到释放连接之间的信息即为传输消息</td>\n<td align=\"left\">简单</td>\n<td align=\"left\">效率低下</td>\n<td align=\"left\">推荐度</td>\n</tr>\n<tr>\n<td align=\"left\">(封装成帧)固定长度</td>\n<td align=\"left\">满足固定长度即可</td>\n<td align=\"left\">简单</td>\n<td align=\"left\">空间浪费</td>\n<td align=\"left\">不推荐</td>\n</tr>\n<tr>\n<td align=\"left\">（封装成帧）分隔符</td>\n<td align=\"left\">分隔符之间</td>\n<td align=\"left\">空间不浪费，也比较简单</td>\n<td align=\"left\">内容本身出现分隔符时需转义，所以需要扫描内容</td>\n<td align=\"left\">推荐</td>\n</tr>\n<tr>\n<td align=\"left\">(封装成帧)固定长度字段存内容的长度信息</td>\n<td align=\"left\">先解析固定长度的字段获取长度，然后读取后续内容</td>\n<td align=\"left\">精确定位用户数据，内容也不用转义</td>\n<td align=\"left\">长度理论上有限制，需提前预知可能的最大长度从而定义长度占用字节数</td>\n<td align=\"left\">推荐</td>\n</tr>\n<tr>\n<td align=\"left\">(封装成帧)其他方式</td>\n<td align=\"left\">json</td>\n<td align=\"left\">需要衡量实际场景，对现有协议的支持</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>4、Netty对三种常用封帧方式的支持</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方式\\支持</th>\n<th align=\"left\">解码</th>\n<th align=\"left\">编码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">固定长度</td>\n<td align=\"left\">FixedLengthFrameDecoder</td>\n<td align=\"left\">简单</td>\n</tr>\n<tr>\n<td align=\"left\">分隔符</td>\n<td align=\"left\">DelimiterBasedFrameDecoder</td>\n<td align=\"left\">简单</td>\n</tr>\n<tr>\n<td align=\"left\">固定长度字段存个内容的长度信息</td>\n<td align=\"left\">LengthFieldBasedFrameDecoder</td>\n<td align=\"left\">LengthFieldPrepender</td>\n</tr>\n</tbody></table>\n<p>5、解读Netty处理粘包、半包的源码</p>\n<ul>\n<li><p>解码的核心工作流程</p>\n</li>\n<li><p>解码中两种数据积累器的区别</p>\n</li>\n<li><p>三种解码器的额外控制参数有哪些</p>\n</li>\n</ul>\n"},{"title":"常用的二次编码方式","date":"2022-03-14T15:25:00.000Z","_content":"\n### 为什么需要二次解码\n\n因为一次解码的结果是字节，需要和项目中所使用的对象做转换，方便使用，这层解码器可以称为“二次解码器”。相应的，对应的编码器是为了将java 对象转化成字节流方便传输存储。\n\n一次编码器：ByteToMessageDecoder\n\n* io.netty.buffer.ByteBuf(原始数据流) -> io.netty.buffer.ByteBuf（用户数据）\n\n二次解码器：MessageToMessageDecoder\n* io.betty.buffer.ByteBuf(用户数据) ->Java Object\n\n\n### 常用的二次编解码方式\n* Java序列化\n* Marshing\n* XML\n* JSON\n* MEssagePAck\n* Protobuf\n* 其他\n\n### 选择编解码方式的要点\n* 空间：编码后占用空间\n\n### Protobuf简介与使用\n\n### 源码解读：Netty对二次编码的支持\n\n","source":"_posts/Netty/常用的二次编解码方式.md","raw":"---\ntitle: 常用的二次编码方式\ndate: 2022-03-14 23:25:00\ntags:\n  - Netty\ncategories: Netty\n---\n\n### 为什么需要二次解码\n\n因为一次解码的结果是字节，需要和项目中所使用的对象做转换，方便使用，这层解码器可以称为“二次解码器”。相应的，对应的编码器是为了将java 对象转化成字节流方便传输存储。\n\n一次编码器：ByteToMessageDecoder\n\n* io.netty.buffer.ByteBuf(原始数据流) -> io.netty.buffer.ByteBuf（用户数据）\n\n二次解码器：MessageToMessageDecoder\n* io.betty.buffer.ByteBuf(用户数据) ->Java Object\n\n\n### 常用的二次编解码方式\n* Java序列化\n* Marshing\n* XML\n* JSON\n* MEssagePAck\n* Protobuf\n* 其他\n\n### 选择编解码方式的要点\n* 空间：编码后占用空间\n\n### Protobuf简介与使用\n\n### 源码解读：Netty对二次编码的支持\n\n","slug":"Netty/常用的二次编解码方式","published":1,"updated":"2024-01-12T13:57:35.758Z","_id":"clrhlncqy0003qzyw8uh72s3d","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"为什么需要二次解码\"><a href=\"#为什么需要二次解码\" class=\"headerlink\" title=\"为什么需要二次解码\"></a>为什么需要二次解码</h3><p>因为一次解码的结果是字节，需要和项目中所使用的对象做转换，方便使用，这层解码器可以称为“二次解码器”。相应的，对应的编码器是为了将java 对象转化成字节流方便传输存储。</p>\n<p>一次编码器：ByteToMessageDecoder</p>\n<ul>\n<li>io.netty.buffer.ByteBuf(原始数据流) -&gt; io.netty.buffer.ByteBuf（用户数据）</li>\n</ul>\n<p>二次解码器：MessageToMessageDecoder</p>\n<ul>\n<li>io.betty.buffer.ByteBuf(用户数据) -&gt;Java Object</li>\n</ul>\n<h3 id=\"常用的二次编解码方式\"><a href=\"#常用的二次编解码方式\" class=\"headerlink\" title=\"常用的二次编解码方式\"></a>常用的二次编解码方式</h3><ul>\n<li>Java序列化</li>\n<li>Marshing</li>\n<li>XML</li>\n<li>JSON</li>\n<li>MEssagePAck</li>\n<li>Protobuf</li>\n<li>其他</li>\n</ul>\n<h3 id=\"选择编解码方式的要点\"><a href=\"#选择编解码方式的要点\" class=\"headerlink\" title=\"选择编解码方式的要点\"></a>选择编解码方式的要点</h3><ul>\n<li>空间：编码后占用空间</li>\n</ul>\n<h3 id=\"Protobuf简介与使用\"><a href=\"#Protobuf简介与使用\" class=\"headerlink\" title=\"Protobuf简介与使用\"></a>Protobuf简介与使用</h3><h3 id=\"源码解读：Netty对二次编码的支持\"><a href=\"#源码解读：Netty对二次编码的支持\" class=\"headerlink\" title=\"源码解读：Netty对二次编码的支持\"></a>源码解读：Netty对二次编码的支持</h3>","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h3 id=\"为什么需要二次解码\"><a href=\"#为什么需要二次解码\" class=\"headerlink\" title=\"为什么需要二次解码\"></a>为什么需要二次解码</h3><p>因为一次解码的结果是字节，需要和项目中所使用的对象做转换，方便使用，这层解码器可以称为“二次解码器”。相应的，对应的编码器是为了将java 对象转化成字节流方便传输存储。</p>\n<p>一次编码器：ByteToMessageDecoder</p>\n<ul>\n<li>io.netty.buffer.ByteBuf(原始数据流) -&gt; io.netty.buffer.ByteBuf（用户数据）</li>\n</ul>\n<p>二次解码器：MessageToMessageDecoder</p>\n<ul>\n<li>io.betty.buffer.ByteBuf(用户数据) -&gt;Java Object</li>\n</ul>\n<h3 id=\"常用的二次编解码方式\"><a href=\"#常用的二次编解码方式\" class=\"headerlink\" title=\"常用的二次编解码方式\"></a>常用的二次编解码方式</h3><ul>\n<li>Java序列化</li>\n<li>Marshing</li>\n<li>XML</li>\n<li>JSON</li>\n<li>MEssagePAck</li>\n<li>Protobuf</li>\n<li>其他</li>\n</ul>\n<h3 id=\"选择编解码方式的要点\"><a href=\"#选择编解码方式的要点\" class=\"headerlink\" title=\"选择编解码方式的要点\"></a>选择编解码方式的要点</h3><ul>\n<li>空间：编码后占用空间</li>\n</ul>\n<h3 id=\"Protobuf简介与使用\"><a href=\"#Protobuf简介与使用\" class=\"headerlink\" title=\"Protobuf简介与使用\"></a>Protobuf简介与使用</h3><h3 id=\"源码解读：Netty对二次编码的支持\"><a href=\"#源码解读：Netty对二次编码的支持\" class=\"headerlink\" title=\"源码解读：Netty对二次编码的支持\"></a>源码解读：Netty对二次编码的支持</h3>"},{"title":"Kafka核心技术","date":"2022-03-20T04:06:00.000Z","_content":"\n### 生产者消息分区机制原理剖析\n\nKafka的三级结构：主题 - 分区 - 消息\n\n* 为什么要分区？\n\n分区的作用是提供负载均衡的能力，不同的分区分布在不同的机器节点上，数据的读写都是针对分区的粒度进行。可通过增加机器来增加吞吐量\n\n* 都有哪些分区策略\n\n1、轮训策略\n\n2、随机策略\n\n3、消息键保序策略\n\n分区是实现负载均衡以及高吞吐量的关键，故在生产者这一端就要仔细盘算合适的分区策略，避免造成数据倾斜，使得某些分区成为性能瓶颈。\n\n\n\n### Kafka副本机制详解\n\nKafka副本机制的好处：\n\n- 提供数据冗余\n\n同一个分区下的所有副本保存有相同的消息序列，这些副本分散保存在不同的Broker上，从而能对抗部分Broker宕机带来的数据不可用\n\n数据同步机制：\n\n同个分区下的不同副本基于领导者的副本机制进行数据同步,从副本只负责同步数据，不负责对外的读写工作。\n\n原因：\n\n- 方便实现“Read-your-writes”\n- 方便实现单调读（Monotonic Reads）\n\n主从分区实现数据同步的保证：***In-sync Replicas***机制\n\n- Broker 端参数 ***replica.lag.time.max.ms*** 参数值设置的是主从同步的最长间隔\n\n\n\n### Kafka为什么那么快\n\n* Kafka具有优秀的磁盘读写能力\n* 批量量处理。合并小的请求，然后以流的方式进行交互，直顶网络上限。\n* 请求采用多路复用的IO模型\n\n### Kafka请求是怎么处理\n\nKafka在TCP的基础上封装了一组请求协议，PRODUCR 请求用于生产消息，FETCH请求用于消费消息，METADATA请求是用于请求Kafka元数据\n\nKafka使用的是***Reactor***模式处理请求。\n\nReactor模式是事件驱动架构的一种实现方式，特别适合用于处理多个客户端并发向服务端发送请求的场景。\n\nclient   ----->  Reactor(Dispatcher) 公平分配  ------->read(网络线程池   ------>共享请求队列   ------>IO线程池  )   ------->decode  -----> 网络线程池请求响应队列\n\n### 幂等生产者和事务生产者是一回事吗？(kafka如何做到消息不会丢失，也不会被重复发送)\n\n\n\nkafka如何做到消息不会丢失，也不会被重复发送?\n\nKafka提供消息不会丢失，但可能被重复发送的可靠性保障：\n\n- 避免重复生产\n\n1.创建幂等性Producer，当Producer发送了具有相同字段的消息之后，Broker会知道这些消息已经重复，并在后台进行舍弃。原理是就是经典的空间换时间的优化思想，Broker会在后台多保存一些字段，消息上报时会进行字段内容的核对。\n\n幂等性 Producer的局限性：单分区幂等性、单会话幂等性\n\n事务型 Producer:事务型 Producer 能够保证将消息原子性地写入到多个分区中。这批消息要么全部写入成功，要么全部失败。(类似于数据库的串行化)\n\n### \n\n### 生产者压缩算法\n\n* 何时压缩：\n\n生产者端 和 Broker端\n\nBroker指定的压缩算法与生产者不一样时，Broker端需要先解压再依据自己的算法算法压缩。\n\n* 何时解压\n\n在consumer端获取的消息中有该消息的压缩算法\n\n### 无消息丢失配置怎么实现\n\nKafka只对 “已提交的消息”的消息做有限度的持久保证。\n\n* 可在一个或若干个Broker成功接收并写入日志文件后，会告诉生产者已提交\n\n生产者程序丢失数据：Producer永远要使用带有回调通知的发送API\n\n消费者程序丢失数据：维持先消费消息，再更新位移的顺序\n\n还有一个解决办法是，多线程异步处理消费信息，Consumer 程序不要开启自动提交位移，而是要应用程序手动提交位移\n\n总结：\n\n* 使用peoducer.send(msg,callback)\n* 设置acks=all\n* 设置retries为一个较大的值\n* 设置unclean.leader.election.enable=false\n* 设置replication.factor=3\n* 设置min.insynnc.relicas>1\n* 确保replication.factor>min.insynnc.relicas\n* 确保消息消费完成再提交\n\n### 客户端都有哪些不常见但是很高级的功能\n\nKafka 拦截器分为生产者拦截器和消费者拦截器\n\n* kafka拦截器的使用场景\n\nKafka 拦截器可以应用于包括客户端监控、端到端系统性能检测、消息审计等多种功能在内的场景\n\n\n\n### Java生产者是如何管理TCP连接\n\n* 为何采用TCP？\n  * 从社区的角度看，在开发客户端时能够利用TCP本身提供的一些高级特性：多路复用请求以及同时轮询多个连接的能力\n  * 目前已知的 HTTP 库在很多编程语言中都略显简陋\n* TCP连接何时创建？\n  * TCP 连接是在创建 KafkaProducer 实例时建立的\n  * 一个是在更新元数据后\n  * 在消息发送时\n* TCP连接何时关闭？\n  * 用户主动关闭\n  * Kafka自带关闭(TTL)\n\n### Java 消费者如何管理TCP连接\n\n* 何时创建TCP连接？\n  * TCP连接是在调用KafkaConsumer.poll 方法时被创建的\n    * 发起 FindCoordinator 请求时\n    * 连接协调者时\n    * 消费数据时\n* 创建多少个 TCP 连接？\n  * 确定协调者和获取集群元数据\n  * 连接协调者，令其执行组成员管理操作\n  * 执行实际的消息获取\n* 何时关闭连接？\n  * 手动调用 KafkaConsumer.close() 方法，或者是执行 Kill 命令\n  * Kafka 自动关闭，由消费者端参数 connection.max.idle.ms 控制的\n\n\n\n### 消费者组到底是什么?\n\nConsumer Group 是 Kafka 提供的可扩展且具有容错性的消费者机制\n\n传统消息引擎模型：点对点模型和发布 / 订阅模型\n\n点对点模型：消息一旦被消费，就会从队列中删除，而且只能被下游的一个consumer消费。\n\n缺点：伸缩性（scalability）很差，因为下游的多个 Consumer 都要“抢”这个共享消息队列的消息\n\n订阅模型: 允许消息被多个 Consumer 消费\n\n缺点：每个订阅者都必须要订阅主题的所有分区。这种全量订阅的方式既不灵活，也会影响消息的真实投递效果\n\n***Kafka 仅仅使用 Consumer Group 这一种机制，却同时实现了传统消息引擎系统的两大模型***\n\n***Rebalance*** 本质上是一种协议，规定了一个 Consumer Group 下的所有 Consumer 如何达成一致，来分配订阅 Topic 的每个分区\n\n\n\n触发重平衡的条件：\n\n1.组员数发生变更\n\n2.订阅主题数发生变更\n\n3.订阅主题的分区数发生变更\n\n### 揭开神秘的“唯一主题”面纱\n\nkafka自建位移主题保存consumer的消费位移\n\n位移主题中的Key保存的内容格式：<Group ID，主题名，分区号 >\n\n当 Kafka 集群中的第一个 Consumer 程序启动时，Kafka 会自动创建位移主题\n\n\n\n如果位移主题是 Kafka 自动创建的，那么该主题的分区数是 50，副本数是 3\n\n* 位移主题何时提交？\n  * 自动提交位移\n  * 手动提交位移\n\nKafka 提供了专门的后台线程定期地巡检待 Compact 的主题，看看是否存在满足条件的可删除数据\n\n### 消费组重平衡能避免吗 ?\n\n原理：\n\n同一个consumer Group下的所有consumer实例在协调者组件的帮助下完成订阅主题分区的分配\n\n\n\nBroker在启动时会开启相应的Coordinator组件，Broker所属的Coordinator组件与其可能不在同一个节点上。\n\nKafka 为某个 Consumer Group 确定 Coordinator 所在的 Broker 的算法：\n\n* 确定由位移主题的哪个分区来保存该Group数据\n* 找出该分区Leader副本所在的Broker,该Broker即为对应的Broker\n\n\n\n重平衡的弊端：\n\n* Rebalance影响Consumer端的TPS，因为重平衡期间消费者不可用\n* Rebalance很慢，业务将长时间不可用\n\n\n\n在真实的业务场景中，很多Rebalance都是计划外的或者说是不必要的。\n\n触发重平衡的条件：\n\n1.组员数发生变更\n\n2.订阅主题数发生变更\n\n3.订阅主题的分区数发生变更\n\n\n\n后两个都是运维层面的不可避免，但是组员数目可以避免。\n\n避免方式:\n\n* 避免consumer未能及时发送心跳而导致被剔除\n* 避免consumer消费时间过长\n\n### Kafka消息位移提交\n\nConsumer 需要为分配给它的每个分区提交各自的位移数据\n\n\n\n位移提交的语义保障是由你来负责的，Kafka 只会“无脑”地接受你提交的位移\n\n\n\n从用户的角度来说，位移提交分为自动提交和手动提交；从 Consumer 端的角度来说，位移提交分为同步提交和异步提交\n\n\n\nKafka提供的提交位移的方法：\n\n* 自动提交位移:\n\n可能会出现重复消费\n\n* 手动提交位移：\n\n  * 同步提交位移，提交过程中，consumer会处于阻塞状态，知道远端的Broker返回提交结果\n\n  * 异步提交位移，异步提交过程失败，重试并没有意义 因为消费的位移已经不是最新值\n\n    所以实际实践需要commitAsync() 避免程序阻塞，Consumer 要关闭前，我们调用 commitSync() 方法执行同步阻塞式的位移提交。\n\n* 精细化管理位移\n\n### CommitFailedException异常怎么处理？\n\n当消息处理的总时间超过预设的 max.poll.interval.ms 参数值时，Kafka Consumer 端会抛出 CommitFailedException 异常。\n\n处理：\n\n* 缩短单条消息处理的时间\n* 增加 Consumer 端允许下游系统消费一批消息的最大时长\n* 减少下游系统一次性消费的消息总数\n* 下游系统使用多线程来加速消费\n\n### 多线程开发消费者实例\n\n* Kafka Java Consumer 设计原理\n\n  * Kafka Consumer 是双线程的设计，分为用户主线程和心跳线程\n\n  * 原因：\n\n    1.老版本consumer的每个实例都为所订阅的主题分区创建对应的消息获取线程，同时也是阻塞式的，Consumer 实例启动后，内部会创建很多阻塞式的消息获取迭代器，但在很多场景下，Consumer 端是有非阻塞需求的，社区为新版本设计了单线程+轮询的机制\n\n    2.单线程的设计能够简化 Consumer 端的设计。Consumer 获取到消息后，处理消息的逻辑是否采用多线程，完全由你决定。\n\n* Kafka 多线程方案:\n\n  Kafka Consumer 类不是线程安全的 (thread-safe)。所有的网络 I/O 处理都是发生在用户主线程中，因此，你在使用过程中必须要确保线程安全。\n\n  * 消费者程序启动多个线程，每个线程维护专属的 kafka Consumer实例，负责完整的消息获取、消息处理流程。\n  * 消费者程序使用单或多线程获取消息，同时创建多个消费线程执行消息处理逻辑\n\n### 消费者组消费进度监控怎么实现？\n\n监控Kafka的滞后程度 Lag\n\n有三种方法监控：\n\n* Kafka自带命令\n* Kafka Java Consumer API\n* 使用 Kafka 自带的 JMX 监控指标\n\n### 消费者组重平衡全流程解析\n\n依赖消费端的心跳线程来通知其他消费者实例，当需要发生重平衡时，Broker会把需要重平衡的信号封装至心跳上报的响应体中。\n\n重平衡流程：\n\n* 新成员加入：\n  * 新成员分别发送JoinGroup 请求和 SyncGroup 请求把组员信息发送给调解者，由协调者作为节点的分配\n* 组员主动离组：\n  * 流程基本同新成员加入\n* 组员崩溃离组：\n  * 靠心跳线程检测组员状态，由协调者发起重平衡\n\n\n\n### Kafka控制器\n\n运行时只能有一个Broker作为控制器，第一个在zookeeper中创建controller节点的Broker会被指定为控制器\n\n控制器职责：\n\n* 主题管理(创建、删除、增加分区)\n* 分区重分配\n* Preferred领导者选举\n* 集群成员管理(新增Broker 、Broker主动关闭、Briker宕机)\n* 数据服务\n\n控制器单点故障转移由zookeeper的watch功能保证通知\n\n### 关于高水位和Leader Epoch\n\nKafka用高水位来表示Kafka中的消息位移，位移值小于高水位的表示已提交的数据，高于高水位的数据表示未提交信息，不能被消费者消费。\n\n高水位的作用：\n\n1.定义消息可见性，即用来标识分区下的哪些消息是可以被消费者消费的\n\n2.帮助Kafka完成副本同步\n\n\n\n### 管理和监控 skip\n\n\n\n### Kafka Stream与其他流处理平台的差异在哪\n\n* Kafka Stream最大的特色就是它不是一个平台，至少它不是一个具备完整功能的平台\n* 从应用部署方面来看，Kafka Stream倾向于将部署交给开发人员来做，而不是自己实现\n* Kafka Stream只支持与Kafka的集群的交换\n* Kafka Stream依赖Kafka的协调功能提供高容错性和高伸缩性\n\nKafka Stream与consumer的区别是Kafka Stream是实时流处理组件，提供了很多算子，可以实现更多复杂的业务\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Kafka/Kafka核心技术.md","raw":"---\ntitle: Kafka核心技术\ndate: 2022-03-20 12:06:00\ntags:\n  - kafka\ncategories: kafka\n---\n\n### 生产者消息分区机制原理剖析\n\nKafka的三级结构：主题 - 分区 - 消息\n\n* 为什么要分区？\n\n分区的作用是提供负载均衡的能力，不同的分区分布在不同的机器节点上，数据的读写都是针对分区的粒度进行。可通过增加机器来增加吞吐量\n\n* 都有哪些分区策略\n\n1、轮训策略\n\n2、随机策略\n\n3、消息键保序策略\n\n分区是实现负载均衡以及高吞吐量的关键，故在生产者这一端就要仔细盘算合适的分区策略，避免造成数据倾斜，使得某些分区成为性能瓶颈。\n\n\n\n### Kafka副本机制详解\n\nKafka副本机制的好处：\n\n- 提供数据冗余\n\n同一个分区下的所有副本保存有相同的消息序列，这些副本分散保存在不同的Broker上，从而能对抗部分Broker宕机带来的数据不可用\n\n数据同步机制：\n\n同个分区下的不同副本基于领导者的副本机制进行数据同步,从副本只负责同步数据，不负责对外的读写工作。\n\n原因：\n\n- 方便实现“Read-your-writes”\n- 方便实现单调读（Monotonic Reads）\n\n主从分区实现数据同步的保证：***In-sync Replicas***机制\n\n- Broker 端参数 ***replica.lag.time.max.ms*** 参数值设置的是主从同步的最长间隔\n\n\n\n### Kafka为什么那么快\n\n* Kafka具有优秀的磁盘读写能力\n* 批量量处理。合并小的请求，然后以流的方式进行交互，直顶网络上限。\n* 请求采用多路复用的IO模型\n\n### Kafka请求是怎么处理\n\nKafka在TCP的基础上封装了一组请求协议，PRODUCR 请求用于生产消息，FETCH请求用于消费消息，METADATA请求是用于请求Kafka元数据\n\nKafka使用的是***Reactor***模式处理请求。\n\nReactor模式是事件驱动架构的一种实现方式，特别适合用于处理多个客户端并发向服务端发送请求的场景。\n\nclient   ----->  Reactor(Dispatcher) 公平分配  ------->read(网络线程池   ------>共享请求队列   ------>IO线程池  )   ------->decode  -----> 网络线程池请求响应队列\n\n### 幂等生产者和事务生产者是一回事吗？(kafka如何做到消息不会丢失，也不会被重复发送)\n\n\n\nkafka如何做到消息不会丢失，也不会被重复发送?\n\nKafka提供消息不会丢失，但可能被重复发送的可靠性保障：\n\n- 避免重复生产\n\n1.创建幂等性Producer，当Producer发送了具有相同字段的消息之后，Broker会知道这些消息已经重复，并在后台进行舍弃。原理是就是经典的空间换时间的优化思想，Broker会在后台多保存一些字段，消息上报时会进行字段内容的核对。\n\n幂等性 Producer的局限性：单分区幂等性、单会话幂等性\n\n事务型 Producer:事务型 Producer 能够保证将消息原子性地写入到多个分区中。这批消息要么全部写入成功，要么全部失败。(类似于数据库的串行化)\n\n### \n\n### 生产者压缩算法\n\n* 何时压缩：\n\n生产者端 和 Broker端\n\nBroker指定的压缩算法与生产者不一样时，Broker端需要先解压再依据自己的算法算法压缩。\n\n* 何时解压\n\n在consumer端获取的消息中有该消息的压缩算法\n\n### 无消息丢失配置怎么实现\n\nKafka只对 “已提交的消息”的消息做有限度的持久保证。\n\n* 可在一个或若干个Broker成功接收并写入日志文件后，会告诉生产者已提交\n\n生产者程序丢失数据：Producer永远要使用带有回调通知的发送API\n\n消费者程序丢失数据：维持先消费消息，再更新位移的顺序\n\n还有一个解决办法是，多线程异步处理消费信息，Consumer 程序不要开启自动提交位移，而是要应用程序手动提交位移\n\n总结：\n\n* 使用peoducer.send(msg,callback)\n* 设置acks=all\n* 设置retries为一个较大的值\n* 设置unclean.leader.election.enable=false\n* 设置replication.factor=3\n* 设置min.insynnc.relicas>1\n* 确保replication.factor>min.insynnc.relicas\n* 确保消息消费完成再提交\n\n### 客户端都有哪些不常见但是很高级的功能\n\nKafka 拦截器分为生产者拦截器和消费者拦截器\n\n* kafka拦截器的使用场景\n\nKafka 拦截器可以应用于包括客户端监控、端到端系统性能检测、消息审计等多种功能在内的场景\n\n\n\n### Java生产者是如何管理TCP连接\n\n* 为何采用TCP？\n  * 从社区的角度看，在开发客户端时能够利用TCP本身提供的一些高级特性：多路复用请求以及同时轮询多个连接的能力\n  * 目前已知的 HTTP 库在很多编程语言中都略显简陋\n* TCP连接何时创建？\n  * TCP 连接是在创建 KafkaProducer 实例时建立的\n  * 一个是在更新元数据后\n  * 在消息发送时\n* TCP连接何时关闭？\n  * 用户主动关闭\n  * Kafka自带关闭(TTL)\n\n### Java 消费者如何管理TCP连接\n\n* 何时创建TCP连接？\n  * TCP连接是在调用KafkaConsumer.poll 方法时被创建的\n    * 发起 FindCoordinator 请求时\n    * 连接协调者时\n    * 消费数据时\n* 创建多少个 TCP 连接？\n  * 确定协调者和获取集群元数据\n  * 连接协调者，令其执行组成员管理操作\n  * 执行实际的消息获取\n* 何时关闭连接？\n  * 手动调用 KafkaConsumer.close() 方法，或者是执行 Kill 命令\n  * Kafka 自动关闭，由消费者端参数 connection.max.idle.ms 控制的\n\n\n\n### 消费者组到底是什么?\n\nConsumer Group 是 Kafka 提供的可扩展且具有容错性的消费者机制\n\n传统消息引擎模型：点对点模型和发布 / 订阅模型\n\n点对点模型：消息一旦被消费，就会从队列中删除，而且只能被下游的一个consumer消费。\n\n缺点：伸缩性（scalability）很差，因为下游的多个 Consumer 都要“抢”这个共享消息队列的消息\n\n订阅模型: 允许消息被多个 Consumer 消费\n\n缺点：每个订阅者都必须要订阅主题的所有分区。这种全量订阅的方式既不灵活，也会影响消息的真实投递效果\n\n***Kafka 仅仅使用 Consumer Group 这一种机制，却同时实现了传统消息引擎系统的两大模型***\n\n***Rebalance*** 本质上是一种协议，规定了一个 Consumer Group 下的所有 Consumer 如何达成一致，来分配订阅 Topic 的每个分区\n\n\n\n触发重平衡的条件：\n\n1.组员数发生变更\n\n2.订阅主题数发生变更\n\n3.订阅主题的分区数发生变更\n\n### 揭开神秘的“唯一主题”面纱\n\nkafka自建位移主题保存consumer的消费位移\n\n位移主题中的Key保存的内容格式：<Group ID，主题名，分区号 >\n\n当 Kafka 集群中的第一个 Consumer 程序启动时，Kafka 会自动创建位移主题\n\n\n\n如果位移主题是 Kafka 自动创建的，那么该主题的分区数是 50，副本数是 3\n\n* 位移主题何时提交？\n  * 自动提交位移\n  * 手动提交位移\n\nKafka 提供了专门的后台线程定期地巡检待 Compact 的主题，看看是否存在满足条件的可删除数据\n\n### 消费组重平衡能避免吗 ?\n\n原理：\n\n同一个consumer Group下的所有consumer实例在协调者组件的帮助下完成订阅主题分区的分配\n\n\n\nBroker在启动时会开启相应的Coordinator组件，Broker所属的Coordinator组件与其可能不在同一个节点上。\n\nKafka 为某个 Consumer Group 确定 Coordinator 所在的 Broker 的算法：\n\n* 确定由位移主题的哪个分区来保存该Group数据\n* 找出该分区Leader副本所在的Broker,该Broker即为对应的Broker\n\n\n\n重平衡的弊端：\n\n* Rebalance影响Consumer端的TPS，因为重平衡期间消费者不可用\n* Rebalance很慢，业务将长时间不可用\n\n\n\n在真实的业务场景中，很多Rebalance都是计划外的或者说是不必要的。\n\n触发重平衡的条件：\n\n1.组员数发生变更\n\n2.订阅主题数发生变更\n\n3.订阅主题的分区数发生变更\n\n\n\n后两个都是运维层面的不可避免，但是组员数目可以避免。\n\n避免方式:\n\n* 避免consumer未能及时发送心跳而导致被剔除\n* 避免consumer消费时间过长\n\n### Kafka消息位移提交\n\nConsumer 需要为分配给它的每个分区提交各自的位移数据\n\n\n\n位移提交的语义保障是由你来负责的，Kafka 只会“无脑”地接受你提交的位移\n\n\n\n从用户的角度来说，位移提交分为自动提交和手动提交；从 Consumer 端的角度来说，位移提交分为同步提交和异步提交\n\n\n\nKafka提供的提交位移的方法：\n\n* 自动提交位移:\n\n可能会出现重复消费\n\n* 手动提交位移：\n\n  * 同步提交位移，提交过程中，consumer会处于阻塞状态，知道远端的Broker返回提交结果\n\n  * 异步提交位移，异步提交过程失败，重试并没有意义 因为消费的位移已经不是最新值\n\n    所以实际实践需要commitAsync() 避免程序阻塞，Consumer 要关闭前，我们调用 commitSync() 方法执行同步阻塞式的位移提交。\n\n* 精细化管理位移\n\n### CommitFailedException异常怎么处理？\n\n当消息处理的总时间超过预设的 max.poll.interval.ms 参数值时，Kafka Consumer 端会抛出 CommitFailedException 异常。\n\n处理：\n\n* 缩短单条消息处理的时间\n* 增加 Consumer 端允许下游系统消费一批消息的最大时长\n* 减少下游系统一次性消费的消息总数\n* 下游系统使用多线程来加速消费\n\n### 多线程开发消费者实例\n\n* Kafka Java Consumer 设计原理\n\n  * Kafka Consumer 是双线程的设计，分为用户主线程和心跳线程\n\n  * 原因：\n\n    1.老版本consumer的每个实例都为所订阅的主题分区创建对应的消息获取线程，同时也是阻塞式的，Consumer 实例启动后，内部会创建很多阻塞式的消息获取迭代器，但在很多场景下，Consumer 端是有非阻塞需求的，社区为新版本设计了单线程+轮询的机制\n\n    2.单线程的设计能够简化 Consumer 端的设计。Consumer 获取到消息后，处理消息的逻辑是否采用多线程，完全由你决定。\n\n* Kafka 多线程方案:\n\n  Kafka Consumer 类不是线程安全的 (thread-safe)。所有的网络 I/O 处理都是发生在用户主线程中，因此，你在使用过程中必须要确保线程安全。\n\n  * 消费者程序启动多个线程，每个线程维护专属的 kafka Consumer实例，负责完整的消息获取、消息处理流程。\n  * 消费者程序使用单或多线程获取消息，同时创建多个消费线程执行消息处理逻辑\n\n### 消费者组消费进度监控怎么实现？\n\n监控Kafka的滞后程度 Lag\n\n有三种方法监控：\n\n* Kafka自带命令\n* Kafka Java Consumer API\n* 使用 Kafka 自带的 JMX 监控指标\n\n### 消费者组重平衡全流程解析\n\n依赖消费端的心跳线程来通知其他消费者实例，当需要发生重平衡时，Broker会把需要重平衡的信号封装至心跳上报的响应体中。\n\n重平衡流程：\n\n* 新成员加入：\n  * 新成员分别发送JoinGroup 请求和 SyncGroup 请求把组员信息发送给调解者，由协调者作为节点的分配\n* 组员主动离组：\n  * 流程基本同新成员加入\n* 组员崩溃离组：\n  * 靠心跳线程检测组员状态，由协调者发起重平衡\n\n\n\n### Kafka控制器\n\n运行时只能有一个Broker作为控制器，第一个在zookeeper中创建controller节点的Broker会被指定为控制器\n\n控制器职责：\n\n* 主题管理(创建、删除、增加分区)\n* 分区重分配\n* Preferred领导者选举\n* 集群成员管理(新增Broker 、Broker主动关闭、Briker宕机)\n* 数据服务\n\n控制器单点故障转移由zookeeper的watch功能保证通知\n\n### 关于高水位和Leader Epoch\n\nKafka用高水位来表示Kafka中的消息位移，位移值小于高水位的表示已提交的数据，高于高水位的数据表示未提交信息，不能被消费者消费。\n\n高水位的作用：\n\n1.定义消息可见性，即用来标识分区下的哪些消息是可以被消费者消费的\n\n2.帮助Kafka完成副本同步\n\n\n\n### 管理和监控 skip\n\n\n\n### Kafka Stream与其他流处理平台的差异在哪\n\n* Kafka Stream最大的特色就是它不是一个平台，至少它不是一个具备完整功能的平台\n* 从应用部署方面来看，Kafka Stream倾向于将部署交给开发人员来做，而不是自己实现\n* Kafka Stream只支持与Kafka的集群的交换\n* Kafka Stream依赖Kafka的协调功能提供高容错性和高伸缩性\n\nKafka Stream与consumer的区别是Kafka Stream是实时流处理组件，提供了很多算子，可以实现更多复杂的业务\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Kafka/Kafka核心技术","published":1,"updated":"2024-01-12T13:57:35.753Z","_id":"clrhlnh170006qzywgvs119dl","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"生产者消息分区机制原理剖析\"><a href=\"#生产者消息分区机制原理剖析\" class=\"headerlink\" title=\"生产者消息分区机制原理剖析\"></a>生产者消息分区机制原理剖析</h3><p>Kafka的三级结构：主题 - 分区 - 消息</p>\n<ul>\n<li>为什么要分区？</li>\n</ul>\n<p>分区的作用是提供负载均衡的能力，不同的分区分布在不同的机器节点上，数据的读写都是针对分区的粒度进行。可通过增加机器来增加吞吐量</p>\n<ul>\n<li>都有哪些分区策略</li>\n</ul>\n<p>1、轮训策略</p>\n<p>2、随机策略</p>\n<p>3、消息键保序策略</p>\n<p>分区是实现负载均衡以及高吞吐量的关键，故在生产者这一端就要仔细盘算合适的分区策略，避免造成数据倾斜，使得某些分区成为性能瓶颈。</p>\n<h3 id=\"Kafka副本机制详解\"><a href=\"#Kafka副本机制详解\" class=\"headerlink\" title=\"Kafka副本机制详解\"></a>Kafka副本机制详解</h3><p>Kafka副本机制的好处：</p>\n<ul>\n<li>提供数据冗余</li>\n</ul>\n<p>同一个分区下的所有副本保存有相同的消息序列，这些副本分散保存在不同的Broker上，从而能对抗部分Broker宕机带来的数据不可用</p>\n<p>数据同步机制：</p>\n<p>同个分区下的不同副本基于领导者的副本机制进行数据同步,从副本只负责同步数据，不负责对外的读写工作。</p>\n<p>原因：</p>\n<ul>\n<li>方便实现“Read-your-writes”</li>\n<li>方便实现单调读（Monotonic Reads）</li>\n</ul>\n<p>主从分区实现数据同步的保证：<em><strong>In-sync Replicas</strong></em>机制</p>\n<ul>\n<li>Broker 端参数 <em><strong>replica.lag.time.max.ms</strong></em> 参数值设置的是主从同步的最长间隔</li>\n</ul>\n<h3 id=\"Kafka为什么那么快\"><a href=\"#Kafka为什么那么快\" class=\"headerlink\" title=\"Kafka为什么那么快\"></a>Kafka为什么那么快</h3><ul>\n<li>Kafka具有优秀的磁盘读写能力</li>\n<li>批量量处理。合并小的请求，然后以流的方式进行交互，直顶网络上限。</li>\n<li>请求采用多路复用的IO模型</li>\n</ul>\n<h3 id=\"Kafka请求是怎么处理\"><a href=\"#Kafka请求是怎么处理\" class=\"headerlink\" title=\"Kafka请求是怎么处理\"></a>Kafka请求是怎么处理</h3><p>Kafka在TCP的基础上封装了一组请求协议，PRODUCR 请求用于生产消息，FETCH请求用于消费消息，METADATA请求是用于请求Kafka元数据</p>\n<p>Kafka使用的是<em><strong>Reactor</strong></em>模式处理请求。</p>\n<p>Reactor模式是事件驱动架构的一种实现方式，特别适合用于处理多个客户端并发向服务端发送请求的场景。</p>\n<p>client   —–&gt;  Reactor(Dispatcher) 公平分配  ——-&gt;read(网络线程池   ——&gt;共享请求队列   ——&gt;IO线程池  )   ——-&gt;decode  —–&gt; 网络线程池请求响应队列</p>\n<h3 id=\"幂等生产者和事务生产者是一回事吗？-kafka如何做到消息不会丢失，也不会被重复发送\"><a href=\"#幂等生产者和事务生产者是一回事吗？-kafka如何做到消息不会丢失，也不会被重复发送\" class=\"headerlink\" title=\"幂等生产者和事务生产者是一回事吗？(kafka如何做到消息不会丢失，也不会被重复发送)\"></a>幂等生产者和事务生产者是一回事吗？(kafka如何做到消息不会丢失，也不会被重复发送)</h3><p>kafka如何做到消息不会丢失，也不会被重复发送?</p>\n<p>Kafka提供消息不会丢失，但可能被重复发送的可靠性保障：</p>\n<ul>\n<li>避免重复生产</li>\n</ul>\n<p>1.创建幂等性Producer，当Producer发送了具有相同字段的消息之后，Broker会知道这些消息已经重复，并在后台进行舍弃。原理是就是经典的空间换时间的优化思想，Broker会在后台多保存一些字段，消息上报时会进行字段内容的核对。</p>\n<p>幂等性 Producer的局限性：单分区幂等性、单会话幂等性</p>\n<p>事务型 Producer:事务型 Producer 能够保证将消息原子性地写入到多个分区中。这批消息要么全部写入成功，要么全部失败。(类似于数据库的串行化)</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"生产者压缩算法\"><a href=\"#生产者压缩算法\" class=\"headerlink\" title=\"生产者压缩算法\"></a>生产者压缩算法</h3><ul>\n<li>何时压缩：</li>\n</ul>\n<p>生产者端 和 Broker端</p>\n<p>Broker指定的压缩算法与生产者不一样时，Broker端需要先解压再依据自己的算法算法压缩。</p>\n<ul>\n<li>何时解压</li>\n</ul>\n<p>在consumer端获取的消息中有该消息的压缩算法</p>\n<h3 id=\"无消息丢失配置怎么实现\"><a href=\"#无消息丢失配置怎么实现\" class=\"headerlink\" title=\"无消息丢失配置怎么实现\"></a>无消息丢失配置怎么实现</h3><p>Kafka只对 “已提交的消息”的消息做有限度的持久保证。</p>\n<ul>\n<li>可在一个或若干个Broker成功接收并写入日志文件后，会告诉生产者已提交</li>\n</ul>\n<p>生产者程序丢失数据：Producer永远要使用带有回调通知的发送API</p>\n<p>消费者程序丢失数据：维持先消费消息，再更新位移的顺序</p>\n<p>还有一个解决办法是，多线程异步处理消费信息，Consumer 程序不要开启自动提交位移，而是要应用程序手动提交位移</p>\n<p>总结：</p>\n<ul>\n<li>使用peoducer.send(msg,callback)</li>\n<li>设置acks=all</li>\n<li>设置retries为一个较大的值</li>\n<li>设置unclean.leader.election.enable=false</li>\n<li>设置replication.factor=3</li>\n<li>设置min.insynnc.relicas&gt;1</li>\n<li>确保replication.factor&gt;min.insynnc.relicas</li>\n<li>确保消息消费完成再提交</li>\n</ul>\n<h3 id=\"客户端都有哪些不常见但是很高级的功能\"><a href=\"#客户端都有哪些不常见但是很高级的功能\" class=\"headerlink\" title=\"客户端都有哪些不常见但是很高级的功能\"></a>客户端都有哪些不常见但是很高级的功能</h3><p>Kafka 拦截器分为生产者拦截器和消费者拦截器</p>\n<ul>\n<li>kafka拦截器的使用场景</li>\n</ul>\n<p>Kafka 拦截器可以应用于包括客户端监控、端到端系统性能检测、消息审计等多种功能在内的场景</p>\n<h3 id=\"Java生产者是如何管理TCP连接\"><a href=\"#Java生产者是如何管理TCP连接\" class=\"headerlink\" title=\"Java生产者是如何管理TCP连接\"></a>Java生产者是如何管理TCP连接</h3><ul>\n<li>为何采用TCP？<ul>\n<li>从社区的角度看，在开发客户端时能够利用TCP本身提供的一些高级特性：多路复用请求以及同时轮询多个连接的能力</li>\n<li>目前已知的 HTTP 库在很多编程语言中都略显简陋</li>\n</ul>\n</li>\n<li>TCP连接何时创建？<ul>\n<li>TCP 连接是在创建 KafkaProducer 实例时建立的</li>\n<li>一个是在更新元数据后</li>\n<li>在消息发送时</li>\n</ul>\n</li>\n<li>TCP连接何时关闭？<ul>\n<li>用户主动关闭</li>\n<li>Kafka自带关闭(TTL)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Java-消费者如何管理TCP连接\"><a href=\"#Java-消费者如何管理TCP连接\" class=\"headerlink\" title=\"Java 消费者如何管理TCP连接\"></a>Java 消费者如何管理TCP连接</h3><ul>\n<li>何时创建TCP连接？<ul>\n<li>TCP连接是在调用KafkaConsumer.poll 方法时被创建的<ul>\n<li>发起 FindCoordinator 请求时</li>\n<li>连接协调者时</li>\n<li>消费数据时</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>创建多少个 TCP 连接？<ul>\n<li>确定协调者和获取集群元数据</li>\n<li>连接协调者，令其执行组成员管理操作</li>\n<li>执行实际的消息获取</li>\n</ul>\n</li>\n<li>何时关闭连接？<ul>\n<li>手动调用 KafkaConsumer.close() 方法，或者是执行 Kill 命令</li>\n<li>Kafka 自动关闭，由消费者端参数 connection.max.idle.ms 控制的</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"消费者组到底是什么\"><a href=\"#消费者组到底是什么\" class=\"headerlink\" title=\"消费者组到底是什么?\"></a>消费者组到底是什么?</h3><p>Consumer Group 是 Kafka 提供的可扩展且具有容错性的消费者机制</p>\n<p>传统消息引擎模型：点对点模型和发布 / 订阅模型</p>\n<p>点对点模型：消息一旦被消费，就会从队列中删除，而且只能被下游的一个consumer消费。</p>\n<p>缺点：伸缩性（scalability）很差，因为下游的多个 Consumer 都要“抢”这个共享消息队列的消息</p>\n<p>订阅模型: 允许消息被多个 Consumer 消费</p>\n<p>缺点：每个订阅者都必须要订阅主题的所有分区。这种全量订阅的方式既不灵活，也会影响消息的真实投递效果</p>\n<p><em><strong>Kafka 仅仅使用 Consumer Group 这一种机制，却同时实现了传统消息引擎系统的两大模型</strong></em></p>\n<p><em><strong>Rebalance</strong></em> 本质上是一种协议，规定了一个 Consumer Group 下的所有 Consumer 如何达成一致，来分配订阅 Topic 的每个分区</p>\n<p>触发重平衡的条件：</p>\n<p>1.组员数发生变更</p>\n<p>2.订阅主题数发生变更</p>\n<p>3.订阅主题的分区数发生变更</p>\n<h3 id=\"揭开神秘的“唯一主题”面纱\"><a href=\"#揭开神秘的“唯一主题”面纱\" class=\"headerlink\" title=\"揭开神秘的“唯一主题”面纱\"></a>揭开神秘的“唯一主题”面纱</h3><p>kafka自建位移主题保存consumer的消费位移</p>\n<p>位移主题中的Key保存的内容格式：&lt;Group ID，主题名，分区号 &gt;</p>\n<p>当 Kafka 集群中的第一个 Consumer 程序启动时，Kafka 会自动创建位移主题</p>\n<p>如果位移主题是 Kafka 自动创建的，那么该主题的分区数是 50，副本数是 3</p>\n<ul>\n<li>位移主题何时提交？<ul>\n<li>自动提交位移</li>\n<li>手动提交位移</li>\n</ul>\n</li>\n</ul>\n<p>Kafka 提供了专门的后台线程定期地巡检待 Compact 的主题，看看是否存在满足条件的可删除数据</p>\n<h3 id=\"消费组重平衡能避免吗\"><a href=\"#消费组重平衡能避免吗\" class=\"headerlink\" title=\"消费组重平衡能避免吗 ?\"></a>消费组重平衡能避免吗 ?</h3><p>原理：</p>\n<p>同一个consumer Group下的所有consumer实例在协调者组件的帮助下完成订阅主题分区的分配</p>\n<p>Broker在启动时会开启相应的Coordinator组件，Broker所属的Coordinator组件与其可能不在同一个节点上。</p>\n<p>Kafka 为某个 Consumer Group 确定 Coordinator 所在的 Broker 的算法：</p>\n<ul>\n<li>确定由位移主题的哪个分区来保存该Group数据</li>\n<li>找出该分区Leader副本所在的Broker,该Broker即为对应的Broker</li>\n</ul>\n<p>重平衡的弊端：</p>\n<ul>\n<li>Rebalance影响Consumer端的TPS，因为重平衡期间消费者不可用</li>\n<li>Rebalance很慢，业务将长时间不可用</li>\n</ul>\n<p>在真实的业务场景中，很多Rebalance都是计划外的或者说是不必要的。</p>\n<p>触发重平衡的条件：</p>\n<p>1.组员数发生变更</p>\n<p>2.订阅主题数发生变更</p>\n<p>3.订阅主题的分区数发生变更</p>\n<p>后两个都是运维层面的不可避免，但是组员数目可以避免。</p>\n<p>避免方式:</p>\n<ul>\n<li>避免consumer未能及时发送心跳而导致被剔除</li>\n<li>避免consumer消费时间过长</li>\n</ul>\n<h3 id=\"Kafka消息位移提交\"><a href=\"#Kafka消息位移提交\" class=\"headerlink\" title=\"Kafka消息位移提交\"></a>Kafka消息位移提交</h3><p>Consumer 需要为分配给它的每个分区提交各自的位移数据</p>\n<p>位移提交的语义保障是由你来负责的，Kafka 只会“无脑”地接受你提交的位移</p>\n<p>从用户的角度来说，位移提交分为自动提交和手动提交；从 Consumer 端的角度来说，位移提交分为同步提交和异步提交</p>\n<p>Kafka提供的提交位移的方法：</p>\n<ul>\n<li>自动提交位移:</li>\n</ul>\n<p>可能会出现重复消费</p>\n<ul>\n<li><p>手动提交位移：</p>\n<ul>\n<li><p>同步提交位移，提交过程中，consumer会处于阻塞状态，知道远端的Broker返回提交结果</p>\n</li>\n<li><p>异步提交位移，异步提交过程失败，重试并没有意义 因为消费的位移已经不是最新值</p>\n<p>所以实际实践需要commitAsync() 避免程序阻塞，Consumer 要关闭前，我们调用 commitSync() 方法执行同步阻塞式的位移提交。</p>\n</li>\n</ul>\n</li>\n<li><p>精细化管理位移</p>\n</li>\n</ul>\n<h3 id=\"CommitFailedException异常怎么处理？\"><a href=\"#CommitFailedException异常怎么处理？\" class=\"headerlink\" title=\"CommitFailedException异常怎么处理？\"></a>CommitFailedException异常怎么处理？</h3><p>当消息处理的总时间超过预设的 max.poll.interval.ms 参数值时，Kafka Consumer 端会抛出 CommitFailedException 异常。</p>\n<p>处理：</p>\n<ul>\n<li>缩短单条消息处理的时间</li>\n<li>增加 Consumer 端允许下游系统消费一批消息的最大时长</li>\n<li>减少下游系统一次性消费的消息总数</li>\n<li>下游系统使用多线程来加速消费</li>\n</ul>\n<h3 id=\"多线程开发消费者实例\"><a href=\"#多线程开发消费者实例\" class=\"headerlink\" title=\"多线程开发消费者实例\"></a>多线程开发消费者实例</h3><ul>\n<li><p>Kafka Java Consumer 设计原理</p>\n<ul>\n<li><p>Kafka Consumer 是双线程的设计，分为用户主线程和心跳线程</p>\n</li>\n<li><p>原因：</p>\n<p>1.老版本consumer的每个实例都为所订阅的主题分区创建对应的消息获取线程，同时也是阻塞式的，Consumer 实例启动后，内部会创建很多阻塞式的消息获取迭代器，但在很多场景下，Consumer 端是有非阻塞需求的，社区为新版本设计了单线程+轮询的机制</p>\n<p>2.单线程的设计能够简化 Consumer 端的设计。Consumer 获取到消息后，处理消息的逻辑是否采用多线程，完全由你决定。</p>\n</li>\n</ul>\n</li>\n<li><p>Kafka 多线程方案:</p>\n<p>Kafka Consumer 类不是线程安全的 (thread-safe)。所有的网络 I/O 处理都是发生在用户主线程中，因此，你在使用过程中必须要确保线程安全。</p>\n<ul>\n<li>消费者程序启动多个线程，每个线程维护专属的 kafka Consumer实例，负责完整的消息获取、消息处理流程。</li>\n<li>消费者程序使用单或多线程获取消息，同时创建多个消费线程执行消息处理逻辑</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"消费者组消费进度监控怎么实现？\"><a href=\"#消费者组消费进度监控怎么实现？\" class=\"headerlink\" title=\"消费者组消费进度监控怎么实现？\"></a>消费者组消费进度监控怎么实现？</h3><p>监控Kafka的滞后程度 Lag</p>\n<p>有三种方法监控：</p>\n<ul>\n<li>Kafka自带命令</li>\n<li>Kafka Java Consumer API</li>\n<li>使用 Kafka 自带的 JMX 监控指标</li>\n</ul>\n<h3 id=\"消费者组重平衡全流程解析\"><a href=\"#消费者组重平衡全流程解析\" class=\"headerlink\" title=\"消费者组重平衡全流程解析\"></a>消费者组重平衡全流程解析</h3><p>依赖消费端的心跳线程来通知其他消费者实例，当需要发生重平衡时，Broker会把需要重平衡的信号封装至心跳上报的响应体中。</p>\n<p>重平衡流程：</p>\n<ul>\n<li>新成员加入：<ul>\n<li>新成员分别发送JoinGroup 请求和 SyncGroup 请求把组员信息发送给调解者，由协调者作为节点的分配</li>\n</ul>\n</li>\n<li>组员主动离组：<ul>\n<li>流程基本同新成员加入</li>\n</ul>\n</li>\n<li>组员崩溃离组：<ul>\n<li>靠心跳线程检测组员状态，由协调者发起重平衡</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Kafka控制器\"><a href=\"#Kafka控制器\" class=\"headerlink\" title=\"Kafka控制器\"></a>Kafka控制器</h3><p>运行时只能有一个Broker作为控制器，第一个在zookeeper中创建controller节点的Broker会被指定为控制器</p>\n<p>控制器职责：</p>\n<ul>\n<li>主题管理(创建、删除、增加分区)</li>\n<li>分区重分配</li>\n<li>Preferred领导者选举</li>\n<li>集群成员管理(新增Broker 、Broker主动关闭、Briker宕机)</li>\n<li>数据服务</li>\n</ul>\n<p>控制器单点故障转移由zookeeper的watch功能保证通知</p>\n<h3 id=\"关于高水位和Leader-Epoch\"><a href=\"#关于高水位和Leader-Epoch\" class=\"headerlink\" title=\"关于高水位和Leader Epoch\"></a>关于高水位和Leader Epoch</h3><p>Kafka用高水位来表示Kafka中的消息位移，位移值小于高水位的表示已提交的数据，高于高水位的数据表示未提交信息，不能被消费者消费。</p>\n<p>高水位的作用：</p>\n<p>1.定义消息可见性，即用来标识分区下的哪些消息是可以被消费者消费的</p>\n<p>2.帮助Kafka完成副本同步</p>\n<h3 id=\"管理和监控-skip\"><a href=\"#管理和监控-skip\" class=\"headerlink\" title=\"管理和监控 skip\"></a>管理和监控 skip</h3><h3 id=\"Kafka-Stream与其他流处理平台的差异在哪\"><a href=\"#Kafka-Stream与其他流处理平台的差异在哪\" class=\"headerlink\" title=\"Kafka Stream与其他流处理平台的差异在哪\"></a>Kafka Stream与其他流处理平台的差异在哪</h3><ul>\n<li>Kafka Stream最大的特色就是它不是一个平台，至少它不是一个具备完整功能的平台</li>\n<li>从应用部署方面来看，Kafka Stream倾向于将部署交给开发人员来做，而不是自己实现</li>\n<li>Kafka Stream只支持与Kafka的集群的交换</li>\n<li>Kafka Stream依赖Kafka的协调功能提供高容错性和高伸缩性</li>\n</ul>\n<p>Kafka Stream与consumer的区别是Kafka Stream是实时流处理组件，提供了很多算子，可以实现更多复杂的业务</p>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h3 id=\"生产者消息分区机制原理剖析\"><a href=\"#生产者消息分区机制原理剖析\" class=\"headerlink\" title=\"生产者消息分区机制原理剖析\"></a>生产者消息分区机制原理剖析</h3><p>Kafka的三级结构：主题 - 分区 - 消息</p>\n<ul>\n<li>为什么要分区？</li>\n</ul>\n<p>分区的作用是提供负载均衡的能力，不同的分区分布在不同的机器节点上，数据的读写都是针对分区的粒度进行。可通过增加机器来增加吞吐量</p>\n<ul>\n<li>都有哪些分区策略</li>\n</ul>\n<p>1、轮训策略</p>\n<p>2、随机策略</p>\n<p>3、消息键保序策略</p>\n<p>分区是实现负载均衡以及高吞吐量的关键，故在生产者这一端就要仔细盘算合适的分区策略，避免造成数据倾斜，使得某些分区成为性能瓶颈。</p>\n<h3 id=\"Kafka副本机制详解\"><a href=\"#Kafka副本机制详解\" class=\"headerlink\" title=\"Kafka副本机制详解\"></a>Kafka副本机制详解</h3><p>Kafka副本机制的好处：</p>\n<ul>\n<li>提供数据冗余</li>\n</ul>\n<p>同一个分区下的所有副本保存有相同的消息序列，这些副本分散保存在不同的Broker上，从而能对抗部分Broker宕机带来的数据不可用</p>\n<p>数据同步机制：</p>\n<p>同个分区下的不同副本基于领导者的副本机制进行数据同步,从副本只负责同步数据，不负责对外的读写工作。</p>\n<p>原因：</p>\n<ul>\n<li>方便实现“Read-your-writes”</li>\n<li>方便实现单调读（Monotonic Reads）</li>\n</ul>\n<p>主从分区实现数据同步的保证：<em><strong>In-sync Replicas</strong></em>机制</p>\n<ul>\n<li>Broker 端参数 <em><strong>replica.lag.time.max.ms</strong></em> 参数值设置的是主从同步的最长间隔</li>\n</ul>\n<h3 id=\"Kafka为什么那么快\"><a href=\"#Kafka为什么那么快\" class=\"headerlink\" title=\"Kafka为什么那么快\"></a>Kafka为什么那么快</h3><ul>\n<li>Kafka具有优秀的磁盘读写能力</li>\n<li>批量量处理。合并小的请求，然后以流的方式进行交互，直顶网络上限。</li>\n<li>请求采用多路复用的IO模型</li>\n</ul>\n<h3 id=\"Kafka请求是怎么处理\"><a href=\"#Kafka请求是怎么处理\" class=\"headerlink\" title=\"Kafka请求是怎么处理\"></a>Kafka请求是怎么处理</h3><p>Kafka在TCP的基础上封装了一组请求协议，PRODUCR 请求用于生产消息，FETCH请求用于消费消息，METADATA请求是用于请求Kafka元数据</p>\n<p>Kafka使用的是<em><strong>Reactor</strong></em>模式处理请求。</p>\n<p>Reactor模式是事件驱动架构的一种实现方式，特别适合用于处理多个客户端并发向服务端发送请求的场景。</p>\n<p>client   —–&gt;  Reactor(Dispatcher) 公平分配  ——-&gt;read(网络线程池   ——&gt;共享请求队列   ——&gt;IO线程池  )   ——-&gt;decode  —–&gt; 网络线程池请求响应队列</p>\n<h3 id=\"幂等生产者和事务生产者是一回事吗？-kafka如何做到消息不会丢失，也不会被重复发送\"><a href=\"#幂等生产者和事务生产者是一回事吗？-kafka如何做到消息不会丢失，也不会被重复发送\" class=\"headerlink\" title=\"幂等生产者和事务生产者是一回事吗？(kafka如何做到消息不会丢失，也不会被重复发送)\"></a>幂等生产者和事务生产者是一回事吗？(kafka如何做到消息不会丢失，也不会被重复发送)</h3><p>kafka如何做到消息不会丢失，也不会被重复发送?</p>\n<p>Kafka提供消息不会丢失，但可能被重复发送的可靠性保障：</p>\n<ul>\n<li>避免重复生产</li>\n</ul>\n<p>1.创建幂等性Producer，当Producer发送了具有相同字段的消息之后，Broker会知道这些消息已经重复，并在后台进行舍弃。原理是就是经典的空间换时间的优化思想，Broker会在后台多保存一些字段，消息上报时会进行字段内容的核对。</p>\n<p>幂等性 Producer的局限性：单分区幂等性、单会话幂等性</p>\n<p>事务型 Producer:事务型 Producer 能够保证将消息原子性地写入到多个分区中。这批消息要么全部写入成功，要么全部失败。(类似于数据库的串行化)</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"生产者压缩算法\"><a href=\"#生产者压缩算法\" class=\"headerlink\" title=\"生产者压缩算法\"></a>生产者压缩算法</h3><ul>\n<li>何时压缩：</li>\n</ul>\n<p>生产者端 和 Broker端</p>\n<p>Broker指定的压缩算法与生产者不一样时，Broker端需要先解压再依据自己的算法算法压缩。</p>\n<ul>\n<li>何时解压</li>\n</ul>\n<p>在consumer端获取的消息中有该消息的压缩算法</p>\n<h3 id=\"无消息丢失配置怎么实现\"><a href=\"#无消息丢失配置怎么实现\" class=\"headerlink\" title=\"无消息丢失配置怎么实现\"></a>无消息丢失配置怎么实现</h3><p>Kafka只对 “已提交的消息”的消息做有限度的持久保证。</p>\n<ul>\n<li>可在一个或若干个Broker成功接收并写入日志文件后，会告诉生产者已提交</li>\n</ul>\n<p>生产者程序丢失数据：Producer永远要使用带有回调通知的发送API</p>\n<p>消费者程序丢失数据：维持先消费消息，再更新位移的顺序</p>\n<p>还有一个解决办法是，多线程异步处理消费信息，Consumer 程序不要开启自动提交位移，而是要应用程序手动提交位移</p>\n<p>总结：</p>\n<ul>\n<li>使用peoducer.send(msg,callback)</li>\n<li>设置acks&#x3D;all</li>\n<li>设置retries为一个较大的值</li>\n<li>设置unclean.leader.election.enable&#x3D;false</li>\n<li>设置replication.factor&#x3D;3</li>\n<li>设置min.insynnc.relicas&gt;1</li>\n<li>确保replication.factor&gt;min.insynnc.relicas</li>\n<li>确保消息消费完成再提交</li>\n</ul>\n<h3 id=\"客户端都有哪些不常见但是很高级的功能\"><a href=\"#客户端都有哪些不常见但是很高级的功能\" class=\"headerlink\" title=\"客户端都有哪些不常见但是很高级的功能\"></a>客户端都有哪些不常见但是很高级的功能</h3><p>Kafka 拦截器分为生产者拦截器和消费者拦截器</p>\n<ul>\n<li>kafka拦截器的使用场景</li>\n</ul>\n<p>Kafka 拦截器可以应用于包括客户端监控、端到端系统性能检测、消息审计等多种功能在内的场景</p>\n<h3 id=\"Java生产者是如何管理TCP连接\"><a href=\"#Java生产者是如何管理TCP连接\" class=\"headerlink\" title=\"Java生产者是如何管理TCP连接\"></a>Java生产者是如何管理TCP连接</h3><ul>\n<li>为何采用TCP？<ul>\n<li>从社区的角度看，在开发客户端时能够利用TCP本身提供的一些高级特性：多路复用请求以及同时轮询多个连接的能力</li>\n<li>目前已知的 HTTP 库在很多编程语言中都略显简陋</li>\n</ul>\n</li>\n<li>TCP连接何时创建？<ul>\n<li>TCP 连接是在创建 KafkaProducer 实例时建立的</li>\n<li>一个是在更新元数据后</li>\n<li>在消息发送时</li>\n</ul>\n</li>\n<li>TCP连接何时关闭？<ul>\n<li>用户主动关闭</li>\n<li>Kafka自带关闭(TTL)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Java-消费者如何管理TCP连接\"><a href=\"#Java-消费者如何管理TCP连接\" class=\"headerlink\" title=\"Java 消费者如何管理TCP连接\"></a>Java 消费者如何管理TCP连接</h3><ul>\n<li>何时创建TCP连接？<ul>\n<li>TCP连接是在调用KafkaConsumer.poll 方法时被创建的<ul>\n<li>发起 FindCoordinator 请求时</li>\n<li>连接协调者时</li>\n<li>消费数据时</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>创建多少个 TCP 连接？<ul>\n<li>确定协调者和获取集群元数据</li>\n<li>连接协调者，令其执行组成员管理操作</li>\n<li>执行实际的消息获取</li>\n</ul>\n</li>\n<li>何时关闭连接？<ul>\n<li>手动调用 KafkaConsumer.close() 方法，或者是执行 Kill 命令</li>\n<li>Kafka 自动关闭，由消费者端参数 connection.max.idle.ms 控制的</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"消费者组到底是什么\"><a href=\"#消费者组到底是什么\" class=\"headerlink\" title=\"消费者组到底是什么?\"></a>消费者组到底是什么?</h3><p>Consumer Group 是 Kafka 提供的可扩展且具有容错性的消费者机制</p>\n<p>传统消息引擎模型：点对点模型和发布 &#x2F; 订阅模型</p>\n<p>点对点模型：消息一旦被消费，就会从队列中删除，而且只能被下游的一个consumer消费。</p>\n<p>缺点：伸缩性（scalability）很差，因为下游的多个 Consumer 都要“抢”这个共享消息队列的消息</p>\n<p>订阅模型: 允许消息被多个 Consumer 消费</p>\n<p>缺点：每个订阅者都必须要订阅主题的所有分区。这种全量订阅的方式既不灵活，也会影响消息的真实投递效果</p>\n<p><em><strong>Kafka 仅仅使用 Consumer Group 这一种机制，却同时实现了传统消息引擎系统的两大模型</strong></em></p>\n<p><em><strong>Rebalance</strong></em> 本质上是一种协议，规定了一个 Consumer Group 下的所有 Consumer 如何达成一致，来分配订阅 Topic 的每个分区</p>\n<p>触发重平衡的条件：</p>\n<p>1.组员数发生变更</p>\n<p>2.订阅主题数发生变更</p>\n<p>3.订阅主题的分区数发生变更</p>\n<h3 id=\"揭开神秘的“唯一主题”面纱\"><a href=\"#揭开神秘的“唯一主题”面纱\" class=\"headerlink\" title=\"揭开神秘的“唯一主题”面纱\"></a>揭开神秘的“唯一主题”面纱</h3><p>kafka自建位移主题保存consumer的消费位移</p>\n<p>位移主题中的Key保存的内容格式：&lt;Group ID，主题名，分区号 &gt;</p>\n<p>当 Kafka 集群中的第一个 Consumer 程序启动时，Kafka 会自动创建位移主题</p>\n<p>如果位移主题是 Kafka 自动创建的，那么该主题的分区数是 50，副本数是 3</p>\n<ul>\n<li>位移主题何时提交？<ul>\n<li>自动提交位移</li>\n<li>手动提交位移</li>\n</ul>\n</li>\n</ul>\n<p>Kafka 提供了专门的后台线程定期地巡检待 Compact 的主题，看看是否存在满足条件的可删除数据</p>\n<h3 id=\"消费组重平衡能避免吗\"><a href=\"#消费组重平衡能避免吗\" class=\"headerlink\" title=\"消费组重平衡能避免吗 ?\"></a>消费组重平衡能避免吗 ?</h3><p>原理：</p>\n<p>同一个consumer Group下的所有consumer实例在协调者组件的帮助下完成订阅主题分区的分配</p>\n<p>Broker在启动时会开启相应的Coordinator组件，Broker所属的Coordinator组件与其可能不在同一个节点上。</p>\n<p>Kafka 为某个 Consumer Group 确定 Coordinator 所在的 Broker 的算法：</p>\n<ul>\n<li>确定由位移主题的哪个分区来保存该Group数据</li>\n<li>找出该分区Leader副本所在的Broker,该Broker即为对应的Broker</li>\n</ul>\n<p>重平衡的弊端：</p>\n<ul>\n<li>Rebalance影响Consumer端的TPS，因为重平衡期间消费者不可用</li>\n<li>Rebalance很慢，业务将长时间不可用</li>\n</ul>\n<p>在真实的业务场景中，很多Rebalance都是计划外的或者说是不必要的。</p>\n<p>触发重平衡的条件：</p>\n<p>1.组员数发生变更</p>\n<p>2.订阅主题数发生变更</p>\n<p>3.订阅主题的分区数发生变更</p>\n<p>后两个都是运维层面的不可避免，但是组员数目可以避免。</p>\n<p>避免方式:</p>\n<ul>\n<li>避免consumer未能及时发送心跳而导致被剔除</li>\n<li>避免consumer消费时间过长</li>\n</ul>\n<h3 id=\"Kafka消息位移提交\"><a href=\"#Kafka消息位移提交\" class=\"headerlink\" title=\"Kafka消息位移提交\"></a>Kafka消息位移提交</h3><p>Consumer 需要为分配给它的每个分区提交各自的位移数据</p>\n<p>位移提交的语义保障是由你来负责的，Kafka 只会“无脑”地接受你提交的位移</p>\n<p>从用户的角度来说，位移提交分为自动提交和手动提交；从 Consumer 端的角度来说，位移提交分为同步提交和异步提交</p>\n<p>Kafka提供的提交位移的方法：</p>\n<ul>\n<li>自动提交位移:</li>\n</ul>\n<p>可能会出现重复消费</p>\n<ul>\n<li><p>手动提交位移：</p>\n<ul>\n<li><p>同步提交位移，提交过程中，consumer会处于阻塞状态，知道远端的Broker返回提交结果</p>\n</li>\n<li><p>异步提交位移，异步提交过程失败，重试并没有意义 因为消费的位移已经不是最新值</p>\n<p>所以实际实践需要commitAsync() 避免程序阻塞，Consumer 要关闭前，我们调用 commitSync() 方法执行同步阻塞式的位移提交。</p>\n</li>\n</ul>\n</li>\n<li><p>精细化管理位移</p>\n</li>\n</ul>\n<h3 id=\"CommitFailedException异常怎么处理？\"><a href=\"#CommitFailedException异常怎么处理？\" class=\"headerlink\" title=\"CommitFailedException异常怎么处理？\"></a>CommitFailedException异常怎么处理？</h3><p>当消息处理的总时间超过预设的 max.poll.interval.ms 参数值时，Kafka Consumer 端会抛出 CommitFailedException 异常。</p>\n<p>处理：</p>\n<ul>\n<li>缩短单条消息处理的时间</li>\n<li>增加 Consumer 端允许下游系统消费一批消息的最大时长</li>\n<li>减少下游系统一次性消费的消息总数</li>\n<li>下游系统使用多线程来加速消费</li>\n</ul>\n<h3 id=\"多线程开发消费者实例\"><a href=\"#多线程开发消费者实例\" class=\"headerlink\" title=\"多线程开发消费者实例\"></a>多线程开发消费者实例</h3><ul>\n<li><p>Kafka Java Consumer 设计原理</p>\n<ul>\n<li><p>Kafka Consumer 是双线程的设计，分为用户主线程和心跳线程</p>\n</li>\n<li><p>原因：</p>\n<p>1.老版本consumer的每个实例都为所订阅的主题分区创建对应的消息获取线程，同时也是阻塞式的，Consumer 实例启动后，内部会创建很多阻塞式的消息获取迭代器，但在很多场景下，Consumer 端是有非阻塞需求的，社区为新版本设计了单线程+轮询的机制</p>\n<p>2.单线程的设计能够简化 Consumer 端的设计。Consumer 获取到消息后，处理消息的逻辑是否采用多线程，完全由你决定。</p>\n</li>\n</ul>\n</li>\n<li><p>Kafka 多线程方案:</p>\n<p>Kafka Consumer 类不是线程安全的 (thread-safe)。所有的网络 I&#x2F;O 处理都是发生在用户主线程中，因此，你在使用过程中必须要确保线程安全。</p>\n<ul>\n<li>消费者程序启动多个线程，每个线程维护专属的 kafka Consumer实例，负责完整的消息获取、消息处理流程。</li>\n<li>消费者程序使用单或多线程获取消息，同时创建多个消费线程执行消息处理逻辑</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"消费者组消费进度监控怎么实现？\"><a href=\"#消费者组消费进度监控怎么实现？\" class=\"headerlink\" title=\"消费者组消费进度监控怎么实现？\"></a>消费者组消费进度监控怎么实现？</h3><p>监控Kafka的滞后程度 Lag</p>\n<p>有三种方法监控：</p>\n<ul>\n<li>Kafka自带命令</li>\n<li>Kafka Java Consumer API</li>\n<li>使用 Kafka 自带的 JMX 监控指标</li>\n</ul>\n<h3 id=\"消费者组重平衡全流程解析\"><a href=\"#消费者组重平衡全流程解析\" class=\"headerlink\" title=\"消费者组重平衡全流程解析\"></a>消费者组重平衡全流程解析</h3><p>依赖消费端的心跳线程来通知其他消费者实例，当需要发生重平衡时，Broker会把需要重平衡的信号封装至心跳上报的响应体中。</p>\n<p>重平衡流程：</p>\n<ul>\n<li>新成员加入：<ul>\n<li>新成员分别发送JoinGroup 请求和 SyncGroup 请求把组员信息发送给调解者，由协调者作为节点的分配</li>\n</ul>\n</li>\n<li>组员主动离组：<ul>\n<li>流程基本同新成员加入</li>\n</ul>\n</li>\n<li>组员崩溃离组：<ul>\n<li>靠心跳线程检测组员状态，由协调者发起重平衡</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Kafka控制器\"><a href=\"#Kafka控制器\" class=\"headerlink\" title=\"Kafka控制器\"></a>Kafka控制器</h3><p>运行时只能有一个Broker作为控制器，第一个在zookeeper中创建controller节点的Broker会被指定为控制器</p>\n<p>控制器职责：</p>\n<ul>\n<li>主题管理(创建、删除、增加分区)</li>\n<li>分区重分配</li>\n<li>Preferred领导者选举</li>\n<li>集群成员管理(新增Broker 、Broker主动关闭、Briker宕机)</li>\n<li>数据服务</li>\n</ul>\n<p>控制器单点故障转移由zookeeper的watch功能保证通知</p>\n<h3 id=\"关于高水位和Leader-Epoch\"><a href=\"#关于高水位和Leader-Epoch\" class=\"headerlink\" title=\"关于高水位和Leader Epoch\"></a>关于高水位和Leader Epoch</h3><p>Kafka用高水位来表示Kafka中的消息位移，位移值小于高水位的表示已提交的数据，高于高水位的数据表示未提交信息，不能被消费者消费。</p>\n<p>高水位的作用：</p>\n<p>1.定义消息可见性，即用来标识分区下的哪些消息是可以被消费者消费的</p>\n<p>2.帮助Kafka完成副本同步</p>\n<h3 id=\"管理和监控-skip\"><a href=\"#管理和监控-skip\" class=\"headerlink\" title=\"管理和监控 skip\"></a>管理和监控 skip</h3><h3 id=\"Kafka-Stream与其他流处理平台的差异在哪\"><a href=\"#Kafka-Stream与其他流处理平台的差异在哪\" class=\"headerlink\" title=\"Kafka Stream与其他流处理平台的差异在哪\"></a>Kafka Stream与其他流处理平台的差异在哪</h3><ul>\n<li>Kafka Stream最大的特色就是它不是一个平台，至少它不是一个具备完整功能的平台</li>\n<li>从应用部署方面来看，Kafka Stream倾向于将部署交给开发人员来做，而不是自己实现</li>\n<li>Kafka Stream只支持与Kafka的集群的交换</li>\n<li>Kafka Stream依赖Kafka的协调功能提供高容错性和高伸缩性</li>\n</ul>\n<p>Kafka Stream与consumer的区别是Kafka Stream是实时流处理组件，提供了很多算子，可以实现更多复杂的业务</p>\n"},{"title":"服务网格","date":"2022-03-24T08:11:00.000Z","_content":"\n### 什么是服务网格？\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/ServiceMesh/服务网格.md","raw":"---\ntitle: 服务网格\ndate: 2022-03-24 16:11:00\ntags:\n  - ServiceMesh\ncategories: ServiceMesh\n---\n\n### 什么是服务网格？\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"ServiceMesh/服务网格","published":1,"updated":"2024-01-12T13:57:35.759Z","_id":"clrhm9e7t0009qzyw32r504ju","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"什么是服务网格？\"><a href=\"#什么是服务网格？\" class=\"headerlink\" title=\"什么是服务网格？\"></a>什么是服务网格？</h3>","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h3 id=\"什么是服务网格？\"><a href=\"#什么是服务网格？\" class=\"headerlink\" title=\"什么是服务网格？\"></a>什么是服务网格？</h3>"},{"title":"2023年不太顺利地过渡","date":"2023-12-30T16:01:00.000Z","_content":"\n## 前言\n在看完一位我十分欣赏的技术大佬DIYGOD的年终总结之后，十分羡慕她如诗一般的2023，得益于她优秀的文笔，一个个碎片化的经历以图文的形式进行记录和整理，逝去的时间仿佛又生动而具体地进行了重现。受此激励，我也要完完整整地写一篇2023的年终总结!!!\n\n## 生活\n### 2023年1月13日\n来网易的第一个年会，就抽到switch-新人光环666。不过一整年switch都持续吃灰，尝试甩在闲鱼，最高是有1200想收，后来想了想，还是持续吃灰吧，万一之后任天堂出了有意思且想玩的游戏呢\n\n![swich1.jpg](..%2F..%2Fimg%2F2023%2Fswich1.jpg)\n![swich2.jpg](..%2F..%2Fimg%2F2023%2Fswich2.jpg)\n![swich3.jpg](..%2F..%2Fimg%2F2023%2Fswich3.jpg)\n\n### 2023年1月22日\n年前横跨1600公里自驾回广西，期间经过了长沙，喝了茶颜悦色，是我喝的最好喝的奶茶\n![tea.jpg](..%2F..%2Fimg%2F2023%2Ftea.jpg)\n烤蜈蚣，感觉吃了就要嘎了\n![food1.jpg](..%2F..%2Fimg%2F2023%2Ffood1.jpg)\n长沙臭豆腐～感觉和其他地方的没啥区别呢？hhh\n![food2.jpg](..%2F..%2Fimg%2F2023%2Ffood2.jpg)\n便宜好喝的果汁～\n![food3.jpg](..%2F..%2Fimg%2F2023%2Ffood3.jpg)\n\n### 2023年2月23日\n时隔好些年终于再见到外婆了，脸上还爬满了皱纹，还在外婆家烤起了串～\n\n![grandma1.jpg](..%2F..%2Fimg%2F2023%2Fgrandma1.jpg)\n![grandma2.jpg](..%2F..%2Fimg%2F2023%2Fgrandma2.jpg)\n![food4.jpg](..%2F..%2Fimg%2F2023%2Ffood4.jpg)\n\n### 2023年2月26日\n自驾回杭州，又是经过湖南，不过这次我们爬了一趟家界，感觉风景一般般，但是山路十八弯真的够惊险的。风景很好看，以后不来了\n\n![张家界1.jpg](..%2F..%2Fimg%2F2023%2F%E5%BC%A0%E5%AE%B6%E7%95%8C1.jpg)\n![张家界2.jpg](..%2F..%2Fimg%2F2023%2F%E5%BC%A0%E5%AE%B6%E7%95%8C2.jpg)\n\n### 2023年3月1日\n温州楠溪江音乐节，在后排的树荫下躺着充气沙发，非常惬意的听了一整天的音乐。这次来了房东的猫，夏日入侵企划，棱镜，。。这次音乐节承包了~年份的live。最后的压轴的两位，毛不易和许嵩，爷的青春又回来了\n\n### 2023年3月1日\n和友人A非常惬意的早晨只知道当时的阳光很明媚当时的风很温暖\n\n### 2023年5月6日\njay在多年前七月上等爆火之后隐匿了多年，如今她带着新作品回来了，这也是第一次见到本人\n\n## 工作\n\n## 学习\n\n## 2023 to 2024\n\n","source":"_posts/Live/2023年不太顺利地过渡.md","raw":"---\ntitle: 2023年不太顺利地过渡\ndate: 2023-12-31 00:01:00\ntags:\n  - 2023\n  - 回顾总结\ncategories: 生活\n---\n\n## 前言\n在看完一位我十分欣赏的技术大佬DIYGOD的年终总结之后，十分羡慕她如诗一般的2023，得益于她优秀的文笔，一个个碎片化的经历以图文的形式进行记录和整理，逝去的时间仿佛又生动而具体地进行了重现。受此激励，我也要完完整整地写一篇2023的年终总结!!!\n\n## 生活\n### 2023年1月13日\n来网易的第一个年会，就抽到switch-新人光环666。不过一整年switch都持续吃灰，尝试甩在闲鱼，最高是有1200想收，后来想了想，还是持续吃灰吧，万一之后任天堂出了有意思且想玩的游戏呢\n\n![swich1.jpg](..%2F..%2Fimg%2F2023%2Fswich1.jpg)\n![swich2.jpg](..%2F..%2Fimg%2F2023%2Fswich2.jpg)\n![swich3.jpg](..%2F..%2Fimg%2F2023%2Fswich3.jpg)\n\n### 2023年1月22日\n年前横跨1600公里自驾回广西，期间经过了长沙，喝了茶颜悦色，是我喝的最好喝的奶茶\n![tea.jpg](..%2F..%2Fimg%2F2023%2Ftea.jpg)\n烤蜈蚣，感觉吃了就要嘎了\n![food1.jpg](..%2F..%2Fimg%2F2023%2Ffood1.jpg)\n长沙臭豆腐～感觉和其他地方的没啥区别呢？hhh\n![food2.jpg](..%2F..%2Fimg%2F2023%2Ffood2.jpg)\n便宜好喝的果汁～\n![food3.jpg](..%2F..%2Fimg%2F2023%2Ffood3.jpg)\n\n### 2023年2月23日\n时隔好些年终于再见到外婆了，脸上还爬满了皱纹，还在外婆家烤起了串～\n\n![grandma1.jpg](..%2F..%2Fimg%2F2023%2Fgrandma1.jpg)\n![grandma2.jpg](..%2F..%2Fimg%2F2023%2Fgrandma2.jpg)\n![food4.jpg](..%2F..%2Fimg%2F2023%2Ffood4.jpg)\n\n### 2023年2月26日\n自驾回杭州，又是经过湖南，不过这次我们爬了一趟家界，感觉风景一般般，但是山路十八弯真的够惊险的。风景很好看，以后不来了\n\n![张家界1.jpg](..%2F..%2Fimg%2F2023%2F%E5%BC%A0%E5%AE%B6%E7%95%8C1.jpg)\n![张家界2.jpg](..%2F..%2Fimg%2F2023%2F%E5%BC%A0%E5%AE%B6%E7%95%8C2.jpg)\n\n### 2023年3月1日\n温州楠溪江音乐节，在后排的树荫下躺着充气沙发，非常惬意的听了一整天的音乐。这次来了房东的猫，夏日入侵企划，棱镜，。。这次音乐节承包了~年份的live。最后的压轴的两位，毛不易和许嵩，爷的青春又回来了\n\n### 2023年3月1日\n和友人A非常惬意的早晨只知道当时的阳光很明媚当时的风很温暖\n\n### 2023年5月6日\njay在多年前七月上等爆火之后隐匿了多年，如今她带着新作品回来了，这也是第一次见到本人\n\n## 工作\n\n## 学习\n\n## 2023 to 2024\n\n","slug":"Live/2023年不太顺利地过渡","published":1,"updated":"2024-01-22T09:13:14.624Z","_id":"clrhm9ub2000cqzyw61jwax3j","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在看完一位我十分欣赏的技术大佬DIYGOD的年终总结之后，十分羡慕她如诗一般的2023，得益于她优秀的文笔，一个个碎片化的经历以图文的形式进行记录和整理，逝去的时间仿佛又生动而具体地进行了重现。受此激励，我也要完完整整地写一篇2023的年终总结!!!</p>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><h3 id=\"2023年1月13日\"><a href=\"#2023年1月13日\" class=\"headerlink\" title=\"2023年1月13日\"></a>2023年1月13日</h3><p>来网易的第一个年会，就抽到switch-新人光环666。不过一整年switch都持续吃灰，尝试甩在闲鱼，最高是有1200想收，后来想了想，还是持续吃灰吧，万一之后任天堂出了有意思且想玩的游戏呢</p>\n<p><img src=\"/../../img/2023/swich1.jpg\" alt=\"swich1.jpg\"><br><img src=\"/../../img/2023/swich2.jpg\" alt=\"swich2.jpg\"><br><img src=\"/../../img/2023/swich3.jpg\" alt=\"swich3.jpg\"></p>\n<h3 id=\"2023年1月22日\"><a href=\"#2023年1月22日\" class=\"headerlink\" title=\"2023年1月22日\"></a>2023年1月22日</h3><p>年前横跨1600公里自驾回广西，期间经过了长沙，喝了茶颜悦色，是我喝的最好喝的奶茶<br><img src=\"/../../img/2023/tea.jpg\" alt=\"tea.jpg\"><br>烤蜈蚣，感觉吃了就要嘎了<br><img src=\"/../../img/2023/food1.jpg\" alt=\"food1.jpg\"><br>长沙臭豆腐～感觉和其他地方的没啥区别呢？hhh<br><img src=\"/../../img/2023/food2.jpg\" alt=\"food2.jpg\"><br>便宜好喝的果汁～<br><img src=\"/../../img/2023/food3.jpg\" alt=\"food3.jpg\"></p>\n<h3 id=\"2023年2月23日\"><a href=\"#2023年2月23日\" class=\"headerlink\" title=\"2023年2月23日\"></a>2023年2月23日</h3><p>时隔好些年终于再见到外婆了，脸上还爬满了皱纹，还在外婆家烤起了串～</p>\n<p><img src=\"/../../img/2023/grandma1.jpg\" alt=\"grandma1.jpg\"><br><img src=\"/../../img/2023/grandma2.jpg\" alt=\"grandma2.jpg\"><br><img src=\"/../../img/2023/food4.jpg\" alt=\"food4.jpg\"></p>\n<h3 id=\"2023年2月26日\"><a href=\"#2023年2月26日\" class=\"headerlink\" title=\"2023年2月26日\"></a>2023年2月26日</h3><p>自驾回杭州，又是经过湖南，不过这次我们爬了一趟家界，感觉风景一般般，但是山路十八弯真的够惊险的。风景很好看，以后不来了</p>\n<p><img src=\"/../../img/2023/%E5%BC%A0%E5%AE%B6%E7%95%8C1.jpg\" alt=\"张家界1.jpg\"><br><img src=\"/../../img/2023/%E5%BC%A0%E5%AE%B6%E7%95%8C2.jpg\" alt=\"张家界2.jpg\"></p>\n<h3 id=\"2023年3月1日\"><a href=\"#2023年3月1日\" class=\"headerlink\" title=\"2023年3月1日\"></a>2023年3月1日</h3><p>温州楠溪江音乐节，在后排的树荫下躺着充气沙发，非常惬意的听了一整天的音乐。这次来了房东的猫，夏日入侵企划，棱镜，。。这次音乐节承包了~年份的live。最后的压轴的两位，毛不易和许嵩，爷的青春又回来了</p>\n<h3 id=\"2023年3月1日-1\"><a href=\"#2023年3月1日-1\" class=\"headerlink\" title=\"2023年3月1日\"></a>2023年3月1日</h3><p>和友人A非常惬意的早晨只知道当时的阳光很明媚当时的风很温暖</p>\n<h3 id=\"2023年5月6日\"><a href=\"#2023年5月6日\" class=\"headerlink\" title=\"2023年5月6日\"></a>2023年5月6日</h3><p>jay在多年前七月上等爆火之后隐匿了多年，如今她带着新作品回来了，这也是第一次见到本人</p>\n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><h2 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h2><h2 id=\"2023-to-2024\"><a href=\"#2023-to-2024\" class=\"headerlink\" title=\"2023 to 2024\"></a>2023 to 2024</h2>","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在看完一位我十分欣赏的技术大佬DIYGOD的年终总结之后，十分羡慕她如诗一般的2023，得益于她优秀的文笔，一个个碎片化的经历以图文的形式进行记录和整理，逝去的时间仿佛又生动而具体地进行了重现。受此激励，我也要完完整整地写一篇2023的年终总结!!!</p>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><h3 id=\"2023年1月13日\"><a href=\"#2023年1月13日\" class=\"headerlink\" title=\"2023年1月13日\"></a>2023年1月13日</h3><p>来网易的第一个年会，就抽到switch-新人光环666。不过一整年switch都持续吃灰，尝试甩在闲鱼，最高是有1200想收，后来想了想，还是持续吃灰吧，万一之后任天堂出了有意思且想玩的游戏呢</p>\n<p><img src=\"/../../img/2023/swich1.jpg\" alt=\"swich1.jpg\"><br><img src=\"/../../img/2023/swich2.jpg\" alt=\"swich2.jpg\"><br><img src=\"/../../img/2023/swich3.jpg\" alt=\"swich3.jpg\"></p>\n<h3 id=\"2023年1月22日\"><a href=\"#2023年1月22日\" class=\"headerlink\" title=\"2023年1月22日\"></a>2023年1月22日</h3><p>年前横跨1600公里自驾回广西，期间经过了长沙，喝了茶颜悦色，是我喝的最好喝的奶茶<br><img src=\"/../../img/2023/tea.jpg\" alt=\"tea.jpg\"><br>烤蜈蚣，感觉吃了就要嘎了<br><img src=\"/../../img/2023/food1.jpg\" alt=\"food1.jpg\"><br>长沙臭豆腐～感觉和其他地方的没啥区别呢？hhh<br><img src=\"/../../img/2023/food2.jpg\" alt=\"food2.jpg\"><br>便宜好喝的果汁～<br><img src=\"/../../img/2023/food3.jpg\" alt=\"food3.jpg\"></p>\n<h3 id=\"2023年2月23日\"><a href=\"#2023年2月23日\" class=\"headerlink\" title=\"2023年2月23日\"></a>2023年2月23日</h3><p>时隔好些年终于再见到外婆了，脸上还爬满了皱纹，还在外婆家烤起了串～</p>\n<p><img src=\"/../../img/2023/grandma1.jpg\" alt=\"grandma1.jpg\"><br><img src=\"/../../img/2023/grandma2.jpg\" alt=\"grandma2.jpg\"><br><img src=\"/../../img/2023/food4.jpg\" alt=\"food4.jpg\"></p>\n<h3 id=\"2023年2月26日\"><a href=\"#2023年2月26日\" class=\"headerlink\" title=\"2023年2月26日\"></a>2023年2月26日</h3><p>自驾回杭州，又是经过湖南，不过这次我们爬了一趟家界，感觉风景一般般，但是山路十八弯真的够惊险的。风景很好看，以后不来了</p>\n<p><img src=\"/../../img/2023/%E5%BC%A0%E5%AE%B6%E7%95%8C1.jpg\" alt=\"张家界1.jpg\"><br><img src=\"/../../img/2023/%E5%BC%A0%E5%AE%B6%E7%95%8C2.jpg\" alt=\"张家界2.jpg\"></p>\n<h3 id=\"2023年3月1日\"><a href=\"#2023年3月1日\" class=\"headerlink\" title=\"2023年3月1日\"></a>2023年3月1日</h3><p>温州楠溪江音乐节，在后排的树荫下躺着充气沙发，非常惬意的听了一整天的音乐。这次来了房东的猫，夏日入侵企划，棱镜，。。这次音乐节承包了~年份的live。最后的压轴的两位，毛不易和许嵩，爷的青春又回来了</p>\n<h3 id=\"2023年3月1日-1\"><a href=\"#2023年3月1日-1\" class=\"headerlink\" title=\"2023年3月1日\"></a>2023年3月1日</h3><p>和友人A非常惬意的早晨只知道当时的阳光很明媚当时的风很温暖</p>\n<h3 id=\"2023年5月6日\"><a href=\"#2023年5月6日\" class=\"headerlink\" title=\"2023年5月6日\"></a>2023年5月6日</h3><p>jay在多年前七月上等爆火之后隐匿了多年，如今她带着新作品回来了，这也是第一次见到本人</p>\n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><h2 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h2><h2 id=\"2023-to-2024\"><a href=\"#2023-to-2024\" class=\"headerlink\" title=\"2023 to 2024\"></a>2023 to 2024</h2>"},{"title":"Kubernetes的设计解读","date":"2022-03-20T04:31:00.000Z","_content":"### pod 设计解读\n\n在kubernetes中，创建、调度、管理的最小单位是pod\n\n- pod是IP等网络资源的分配的基本单位，这个IP及其对应的network namespace是由pod里面的容器共享的\n- pod内的所有容器页共享volume。当一个volume被挂载在同属同一个pod的多个Docker容器的文件系统\n- IPC namespace 即同一个pod内的应用容器能够使用System V IPC或者POSIX消息队列进行通信\n- UTS namespace 即同一个pod内的应用容器共享主机名\n\n1.label 和label selector与pod协作\n\n2.pod的现状和未来\n\n- 资源共享和通信\n- 集中式管理，指pod内的所有容器资源\n\n3.pod内的容器网络与通信\n\n​\t通过pause容器进行pod内的容器网络与通信\n\n- replication controller设计解读\n\n  replication controller在设计上依然体现出了\"旁路控制\"的思想，为每个pod “外挂”了一个控制器进程，从而避免了健康检查组件成为性能瓶颈\n\n  replication controller只能与重启策略为Always的pod进行协作\n\n  replication controller的经典场景:\n\n    - 重调度\n    - 弹性伸缩\n    - 滚动更新\n    - 多版本应用release追踪\n\n- service的设计解读\n\n  service通过标签label将流量负载均衡到对应label标签的pod上\n\n    - service工作原理\n\n      Kubernetes集群上的每个节点都运行着一个服务代理(service proxy),它是负责实现service的主要组件\n\n      kube proxy两种工作模式：\n\n        - userspace模式\n\n          对于每个service kube-proxy都会在宿主机监听一个端口与这个service对应起来，并在宿主机上建立起iptables规则，将service IP:service port的流量重定向到上述端口\n\n        - iptables模式\n\n          iptables模式下的kube-proxy将负责创建和维护iptables的路由规则，其余工作交由内核态的iptables完成\n\n    - service的自发现机制\n\n        - 环境变量方式\n        - DNS方式(mysvc.myns)\n\n    - service 外部可路由性设计\n\n        - NodePort\n        - LoadBalancer\n        - external ip\n\n- 新一代版本控制器 replica set\n\n  replica set 用于保证label selector 匹配的pod数量维持在期望状态\n\n  replicat set 与 replication controller 的区别是：replication controller只支持等值匹配   replicat set支持基于子集的查询\n\n- Deployment\n\n  Deployment多用于pod 和replica set 的更新，可以方便地跟踪观察其所属的relica set或者pod的数量以及状态变化\n\n- DaemonSet\n\n- ConfigMap\n- Job\n\n### Kubernetes核心 组件解读\n\n#### Master节点：\n\n##### APIServer:\n\nKubernetes APIserver负责对外提供Kubernetes API服务，它运行在Kubernetes的管理节点-Master节点\n\n* APIServer的职能:\n\n    * 对外提供RESTful的管理接口\n    * 配置Kubernetes的资源对象\n    * 提供可定制的功能性插件\n\n* APIServer启动过程:\n\n  1.新建APIServer 定义一个APIServer所需的关键资源\n\n  2.接受用户命令行输入，为上述各参数赋值\n\n  3.解析并格式化用户传入的参数\n\n  4.初始化log配置\n\n  5.启动运行一个全新的APIServer\n\n* APIServer对etcd的封装：\n\n  Kubernetes使用etcd作为后台存储解决方案，而APIServer则基于etcd实现了一套RESTful API，用于操作存储在etcd中的Kubernetes对象实例\n\n* APIServer如何保证API操作的原子性:\n\n  Kubernetes的资源对象都设置了resourceVersion作为其元数据的一部分，APIServer以此保证资源对象操作的原子性\n\n##### Scheduler:\n\n根据特定的调度算法将pod调度到指定的工作节点上，这一过程称作绑定\n\n* Scheduler的数据采集模型\n\n  Scheduler定时向APIServer获取各种各样它需要的数据，为了减少轮询时APIServer带来的额外开销，对于感兴趣的资源设置了本地缓存机制\n\n* Scheduler调度算法\n\n  Kubernetes中的调度策略分为两个阶段：Predicates , Priorites\n\n    * Predicates :回答能不能\n    * Priorites：在Predicates基础上回答匹配度\n\n* controller manager\n\n  kubernetes controller manager 运行在集群的master节点上，管理着集群中的各种控制器\n\n#### 工作节点：\n\n##### cAdvisor:\n\n获取当前工作节点的宿主机信息\n\n##### kubelet :\n\nkubelet组件 是Kubenetes集群工作节点上最重要的组件进程，它负责管理和维护在这台主机上运行着的所有容器。本质上它的工作可以归纳为使得pod的运行状态（status）与它的期待值（spec）一致。\n\nKubelet如何同步工作节点状态：\n\n1.kubelet调用APIServer API向etcd获取包含当前工作节点状态信息的node 对象，查询的键值就是kubelet所在工作节点的主机名，\n\n2.调用cAdvisor客户端API获取当前工作节点的宿主机信息，更新前面步骤获取到的node对象\n\n3.kubelet再次调用APIServer API将上述更新持久化到etcd中\n\n##### kube-proxy :\n\nKubernetes基于service、endpoint等概念为用户提供了一种服务发现和反向代理服务，而kube-proxy正是这种服务的底层实现机制。\n\n服务发现实现：\n\nKube-proxy使用etcd的watch机制，监控集群中service和endpoint对象数据的动态变化，并且维护一个从service到endpoint的映射关系，从而保证了后端pod的IP变化不会对访问者造成影响。\n\nkube-proxy主要有两种工作模式: userspace 和 iptables\n\nuserspace模式：\n\niptables模式：\n\niptables模式下的proxier值负责在发现变更时更新iptables规则，而不再为每个service打开一个本地端口，所有流量转发到pod的工作将交由内核态的iptables完成。\n\n### 核心组件协作流程：\n\n#### 创建pod\n\n当客户端发起一个创建pod的请求后，kubectl向APIServer的/pods端点发送一个HTTP POST请求，请求的内容即客户端提供的pod资源配置文件\n\n\n\nAPIServer收到该REST API请求后会进行一系列的验证操作，包括用户认证，授权和资源配额控制等。验证通过后，APIServer调用etcd的存储接口在后台数据库中创建一个pod对象。\n\n\n\nScheduler使用APIServer 的API  定期从etcd获取或者监控系统中可用的工作节点列表和待调度pod , 并使用调度策略为pod选择一个运行的工作节点，这个过程叫绑定\n\n\n\n绑定完成后，scheduler会调用APIServer的API在etcd中创建bingding对象，描述在一个工作节点上绑定运行的所有pod信息。同时kubelet会监听APIServer上pod的更新，如果发现有pod更新信息，则会自动在podWorker的同步周期中更新对应的pod\n\n\n\n这正是Kubernetes实现中 \"一切皆资源\"的体现，即所有实体对象，消息都是作为etcd里保存起来的一种资源对待，其他所有组件间协作都通过基于APIServer的数据交换，组件间一种松耦合的状态。\n\n#### 创建service\n\n当客户端发起一个创建service的请求后，kubectl向APIServer的/service端点发送一个HTTP POST请求，请求的内容即客户端提供的service资源配置文件。\n\n\n\n同样，APIServer收到该REST API请求后会进行一系列的验证操作。验证通过后，APIServer调用etcd的存储接口在后台数据库中创建一个service对象\n\n\n\nkube-proxy会定期调用APIServer的API获取期望service对象列表，然后再遍历期望service对象列表。对每个service调用APIServer的API获取对应的pod集的信息，并从pod信息列表中提取pod IP和容器端口号封装成endpoint对象，然后调用APIServer的API在etcd中创建对象\n\n在```userspace kube-proxy模式``下：\n\n对于每个新建的service，kube-proxy会为其在本地随机分配一个随机端口号，并相应地创建一个ProxySocket，随后使用iptables工具在宿主机上建立一条从ServiceProxy到ProxySocket的了链路。同时，kube-proxy后台启动一个协程监听ProxySocket上的数据并根据endpoint实例的信息将来自客户端的请求转发给相应的service后端pod.\n\n\n\n在```iptables kube-proxy模式```下：\n\n对于每个新建的service，kube-proxy会为其创建对应的iptables。来自客户端的请求将由内核态iptables负责转发给service后端pod完成\n\n\n\n最后，kube-proxy会定期调用APIService的API获取期望service和endpoint列表并与本地的service 和endpoint实例同步。\n\n### Kubernetes 网络核心原理\n\n#### 单pod单IP模型\n\nKubernetes为每一个pod分配一个私有网络地址段的IP地址，通过该IP地址，pod能够跨网络与其他物理机，虚拟机或容器进行通信，pod内的容器全部共享这个pod的容器配置，彼此之间使用localhost通信。\n\n#### 单pod单IP实现原理\n\n在每一个pod中有一个网络容器，该容器先于pod内所有用户容器被创建，并且拥有该pod的网络namespace，pod的其他用户容器使用Docker的--net=container:<id>选项加入该网络的namespace，这样就实现了pod内所有容器对于网络栈的共享\n\n### Kubernetes 高级实践\n\n应用健康检查:\n\n* 进程级健康检查\n\n* 业务级健康检查:\n\n  活性探针：\n\n    * HTTP Get: kubelet 将调用容器内Web应用的web hook 如果返回的状态为200 和 399 之间则成功\n    * Container Exec: kubelet 将在用户容器内执行一次命令，返回码为0 则正常\n    * TCP Socket : 尝试建立socker,但目前尚未支持\n\n  如果readiness probe的健康检查结果是fail kubelet并不会杀死容器进程，而只是将该容器所属的pod 从endpoint列表删除\n\n### Kubernetes 未来动向\n\n坚持走更加开放的道路\n\n汲取Borg与Omega的优秀设计思想\n\n致力于树立行业标准","source":"_posts/Kubernetes/Kubernetes的设计解读.md","raw":"---\ntitle: Kubernetes的设计解读\ndate: 2022-03-20 12:31:00\ntags:\n  - Kubernetes\ncategories: Kubernetes\n---\n### pod 设计解读\n\n在kubernetes中，创建、调度、管理的最小单位是pod\n\n- pod是IP等网络资源的分配的基本单位，这个IP及其对应的network namespace是由pod里面的容器共享的\n- pod内的所有容器页共享volume。当一个volume被挂载在同属同一个pod的多个Docker容器的文件系统\n- IPC namespace 即同一个pod内的应用容器能够使用System V IPC或者POSIX消息队列进行通信\n- UTS namespace 即同一个pod内的应用容器共享主机名\n\n1.label 和label selector与pod协作\n\n2.pod的现状和未来\n\n- 资源共享和通信\n- 集中式管理，指pod内的所有容器资源\n\n3.pod内的容器网络与通信\n\n​\t通过pause容器进行pod内的容器网络与通信\n\n- replication controller设计解读\n\n  replication controller在设计上依然体现出了\"旁路控制\"的思想，为每个pod “外挂”了一个控制器进程，从而避免了健康检查组件成为性能瓶颈\n\n  replication controller只能与重启策略为Always的pod进行协作\n\n  replication controller的经典场景:\n\n    - 重调度\n    - 弹性伸缩\n    - 滚动更新\n    - 多版本应用release追踪\n\n- service的设计解读\n\n  service通过标签label将流量负载均衡到对应label标签的pod上\n\n    - service工作原理\n\n      Kubernetes集群上的每个节点都运行着一个服务代理(service proxy),它是负责实现service的主要组件\n\n      kube proxy两种工作模式：\n\n        - userspace模式\n\n          对于每个service kube-proxy都会在宿主机监听一个端口与这个service对应起来，并在宿主机上建立起iptables规则，将service IP:service port的流量重定向到上述端口\n\n        - iptables模式\n\n          iptables模式下的kube-proxy将负责创建和维护iptables的路由规则，其余工作交由内核态的iptables完成\n\n    - service的自发现机制\n\n        - 环境变量方式\n        - DNS方式(mysvc.myns)\n\n    - service 外部可路由性设计\n\n        - NodePort\n        - LoadBalancer\n        - external ip\n\n- 新一代版本控制器 replica set\n\n  replica set 用于保证label selector 匹配的pod数量维持在期望状态\n\n  replicat set 与 replication controller 的区别是：replication controller只支持等值匹配   replicat set支持基于子集的查询\n\n- Deployment\n\n  Deployment多用于pod 和replica set 的更新，可以方便地跟踪观察其所属的relica set或者pod的数量以及状态变化\n\n- DaemonSet\n\n- ConfigMap\n- Job\n\n### Kubernetes核心 组件解读\n\n#### Master节点：\n\n##### APIServer:\n\nKubernetes APIserver负责对外提供Kubernetes API服务，它运行在Kubernetes的管理节点-Master节点\n\n* APIServer的职能:\n\n    * 对外提供RESTful的管理接口\n    * 配置Kubernetes的资源对象\n    * 提供可定制的功能性插件\n\n* APIServer启动过程:\n\n  1.新建APIServer 定义一个APIServer所需的关键资源\n\n  2.接受用户命令行输入，为上述各参数赋值\n\n  3.解析并格式化用户传入的参数\n\n  4.初始化log配置\n\n  5.启动运行一个全新的APIServer\n\n* APIServer对etcd的封装：\n\n  Kubernetes使用etcd作为后台存储解决方案，而APIServer则基于etcd实现了一套RESTful API，用于操作存储在etcd中的Kubernetes对象实例\n\n* APIServer如何保证API操作的原子性:\n\n  Kubernetes的资源对象都设置了resourceVersion作为其元数据的一部分，APIServer以此保证资源对象操作的原子性\n\n##### Scheduler:\n\n根据特定的调度算法将pod调度到指定的工作节点上，这一过程称作绑定\n\n* Scheduler的数据采集模型\n\n  Scheduler定时向APIServer获取各种各样它需要的数据，为了减少轮询时APIServer带来的额外开销，对于感兴趣的资源设置了本地缓存机制\n\n* Scheduler调度算法\n\n  Kubernetes中的调度策略分为两个阶段：Predicates , Priorites\n\n    * Predicates :回答能不能\n    * Priorites：在Predicates基础上回答匹配度\n\n* controller manager\n\n  kubernetes controller manager 运行在集群的master节点上，管理着集群中的各种控制器\n\n#### 工作节点：\n\n##### cAdvisor:\n\n获取当前工作节点的宿主机信息\n\n##### kubelet :\n\nkubelet组件 是Kubenetes集群工作节点上最重要的组件进程，它负责管理和维护在这台主机上运行着的所有容器。本质上它的工作可以归纳为使得pod的运行状态（status）与它的期待值（spec）一致。\n\nKubelet如何同步工作节点状态：\n\n1.kubelet调用APIServer API向etcd获取包含当前工作节点状态信息的node 对象，查询的键值就是kubelet所在工作节点的主机名，\n\n2.调用cAdvisor客户端API获取当前工作节点的宿主机信息，更新前面步骤获取到的node对象\n\n3.kubelet再次调用APIServer API将上述更新持久化到etcd中\n\n##### kube-proxy :\n\nKubernetes基于service、endpoint等概念为用户提供了一种服务发现和反向代理服务，而kube-proxy正是这种服务的底层实现机制。\n\n服务发现实现：\n\nKube-proxy使用etcd的watch机制，监控集群中service和endpoint对象数据的动态变化，并且维护一个从service到endpoint的映射关系，从而保证了后端pod的IP变化不会对访问者造成影响。\n\nkube-proxy主要有两种工作模式: userspace 和 iptables\n\nuserspace模式：\n\niptables模式：\n\niptables模式下的proxier值负责在发现变更时更新iptables规则，而不再为每个service打开一个本地端口，所有流量转发到pod的工作将交由内核态的iptables完成。\n\n### 核心组件协作流程：\n\n#### 创建pod\n\n当客户端发起一个创建pod的请求后，kubectl向APIServer的/pods端点发送一个HTTP POST请求，请求的内容即客户端提供的pod资源配置文件\n\n\n\nAPIServer收到该REST API请求后会进行一系列的验证操作，包括用户认证，授权和资源配额控制等。验证通过后，APIServer调用etcd的存储接口在后台数据库中创建一个pod对象。\n\n\n\nScheduler使用APIServer 的API  定期从etcd获取或者监控系统中可用的工作节点列表和待调度pod , 并使用调度策略为pod选择一个运行的工作节点，这个过程叫绑定\n\n\n\n绑定完成后，scheduler会调用APIServer的API在etcd中创建bingding对象，描述在一个工作节点上绑定运行的所有pod信息。同时kubelet会监听APIServer上pod的更新，如果发现有pod更新信息，则会自动在podWorker的同步周期中更新对应的pod\n\n\n\n这正是Kubernetes实现中 \"一切皆资源\"的体现，即所有实体对象，消息都是作为etcd里保存起来的一种资源对待，其他所有组件间协作都通过基于APIServer的数据交换，组件间一种松耦合的状态。\n\n#### 创建service\n\n当客户端发起一个创建service的请求后，kubectl向APIServer的/service端点发送一个HTTP POST请求，请求的内容即客户端提供的service资源配置文件。\n\n\n\n同样，APIServer收到该REST API请求后会进行一系列的验证操作。验证通过后，APIServer调用etcd的存储接口在后台数据库中创建一个service对象\n\n\n\nkube-proxy会定期调用APIServer的API获取期望service对象列表，然后再遍历期望service对象列表。对每个service调用APIServer的API获取对应的pod集的信息，并从pod信息列表中提取pod IP和容器端口号封装成endpoint对象，然后调用APIServer的API在etcd中创建对象\n\n在```userspace kube-proxy模式``下：\n\n对于每个新建的service，kube-proxy会为其在本地随机分配一个随机端口号，并相应地创建一个ProxySocket，随后使用iptables工具在宿主机上建立一条从ServiceProxy到ProxySocket的了链路。同时，kube-proxy后台启动一个协程监听ProxySocket上的数据并根据endpoint实例的信息将来自客户端的请求转发给相应的service后端pod.\n\n\n\n在```iptables kube-proxy模式```下：\n\n对于每个新建的service，kube-proxy会为其创建对应的iptables。来自客户端的请求将由内核态iptables负责转发给service后端pod完成\n\n\n\n最后，kube-proxy会定期调用APIService的API获取期望service和endpoint列表并与本地的service 和endpoint实例同步。\n\n### Kubernetes 网络核心原理\n\n#### 单pod单IP模型\n\nKubernetes为每一个pod分配一个私有网络地址段的IP地址，通过该IP地址，pod能够跨网络与其他物理机，虚拟机或容器进行通信，pod内的容器全部共享这个pod的容器配置，彼此之间使用localhost通信。\n\n#### 单pod单IP实现原理\n\n在每一个pod中有一个网络容器，该容器先于pod内所有用户容器被创建，并且拥有该pod的网络namespace，pod的其他用户容器使用Docker的--net=container:<id>选项加入该网络的namespace，这样就实现了pod内所有容器对于网络栈的共享\n\n### Kubernetes 高级实践\n\n应用健康检查:\n\n* 进程级健康检查\n\n* 业务级健康检查:\n\n  活性探针：\n\n    * HTTP Get: kubelet 将调用容器内Web应用的web hook 如果返回的状态为200 和 399 之间则成功\n    * Container Exec: kubelet 将在用户容器内执行一次命令，返回码为0 则正常\n    * TCP Socket : 尝试建立socker,但目前尚未支持\n\n  如果readiness probe的健康检查结果是fail kubelet并不会杀死容器进程，而只是将该容器所属的pod 从endpoint列表删除\n\n### Kubernetes 未来动向\n\n坚持走更加开放的道路\n\n汲取Borg与Omega的优秀设计思想\n\n致力于树立行业标准","slug":"Kubernetes/Kubernetes的设计解读","published":1,"updated":"2024-01-12T13:57:35.753Z","_id":"clrhmaemu000dqzyweqwi7v2o","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"pod-设计解读\"><a href=\"#pod-设计解读\" class=\"headerlink\" title=\"pod 设计解读\"></a>pod 设计解读</h3><p>在kubernetes中，创建、调度、管理的最小单位是pod</p>\n<ul>\n<li>pod是IP等网络资源的分配的基本单位，这个IP及其对应的network namespace是由pod里面的容器共享的</li>\n<li>pod内的所有容器页共享volume。当一个volume被挂载在同属同一个pod的多个Docker容器的文件系统</li>\n<li>IPC namespace 即同一个pod内的应用容器能够使用System V IPC或者POSIX消息队列进行通信</li>\n<li>UTS namespace 即同一个pod内的应用容器共享主机名</li>\n</ul>\n<p>1.label 和label selector与pod协作</p>\n<p>2.pod的现状和未来</p>\n<ul>\n<li>资源共享和通信</li>\n<li>集中式管理，指pod内的所有容器资源</li>\n</ul>\n<p>3.pod内的容器网络与通信</p>\n<p>​    通过pause容器进行pod内的容器网络与通信</p>\n<ul>\n<li><p>replication controller设计解读</p>\n<p>replication controller在设计上依然体现出了”旁路控制”的思想，为每个pod “外挂”了一个控制器进程，从而避免了健康检查组件成为性能瓶颈</p>\n<p>replication controller只能与重启策略为Always的pod进行协作</p>\n<p>replication controller的经典场景:</p>\n<ul>\n<li>重调度</li>\n<li>弹性伸缩</li>\n<li>滚动更新</li>\n<li>多版本应用release追踪</li>\n</ul>\n</li>\n<li><p>service的设计解读</p>\n<p>service通过标签label将流量负载均衡到对应label标签的pod上</p>\n<ul>\n<li><p>service工作原理</p>\n<p>Kubernetes集群上的每个节点都运行着一个服务代理(service proxy),它是负责实现service的主要组件</p>\n<p>kube proxy两种工作模式：</p>\n<ul>\n<li><p>userspace模式</p>\n<p>对于每个service kube-proxy都会在宿主机监听一个端口与这个service对应起来，并在宿主机上建立起iptables规则，将service IP:service port的流量重定向到上述端口</p>\n</li>\n<li><p>iptables模式</p>\n<p>iptables模式下的kube-proxy将负责创建和维护iptables的路由规则，其余工作交由内核态的iptables完成</p>\n</li>\n</ul>\n</li>\n<li><p>service的自发现机制</p>\n<ul>\n<li>环境变量方式</li>\n<li>DNS方式(mysvc.myns)</li>\n</ul>\n</li>\n<li><p>service 外部可路由性设计</p>\n<ul>\n<li>NodePort</li>\n<li>LoadBalancer</li>\n<li>external ip</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>新一代版本控制器 replica set</p>\n<p>replica set 用于保证label selector 匹配的pod数量维持在期望状态</p>\n<p>replicat set 与 replication controller 的区别是：replication controller只支持等值匹配   replicat set支持基于子集的查询</p>\n</li>\n<li><p>Deployment</p>\n<p>Deployment多用于pod 和replica set 的更新，可以方便地跟踪观察其所属的relica set或者pod的数量以及状态变化</p>\n</li>\n<li><p>DaemonSet</p>\n</li>\n<li><p>ConfigMap</p>\n</li>\n<li><p>Job</p>\n</li>\n</ul>\n<h3 id=\"Kubernetes核心-组件解读\"><a href=\"#Kubernetes核心-组件解读\" class=\"headerlink\" title=\"Kubernetes核心 组件解读\"></a>Kubernetes核心 组件解读</h3><h4 id=\"Master节点：\"><a href=\"#Master节点：\" class=\"headerlink\" title=\"Master节点：\"></a>Master节点：</h4><h5 id=\"APIServer\"><a href=\"#APIServer\" class=\"headerlink\" title=\"APIServer:\"></a>APIServer:</h5><p>Kubernetes APIserver负责对外提供Kubernetes API服务，它运行在Kubernetes的管理节点-Master节点</p>\n<ul>\n<li><p>APIServer的职能:</p>\n<ul>\n<li>对外提供RESTful的管理接口</li>\n<li>配置Kubernetes的资源对象</li>\n<li>提供可定制的功能性插件</li>\n</ul>\n</li>\n<li><p>APIServer启动过程:</p>\n<p>1.新建APIServer 定义一个APIServer所需的关键资源</p>\n<p>2.接受用户命令行输入，为上述各参数赋值</p>\n<p>3.解析并格式化用户传入的参数</p>\n<p>4.初始化log配置</p>\n<p>5.启动运行一个全新的APIServer</p>\n</li>\n<li><p>APIServer对etcd的封装：</p>\n<p>Kubernetes使用etcd作为后台存储解决方案，而APIServer则基于etcd实现了一套RESTful API，用于操作存储在etcd中的Kubernetes对象实例</p>\n</li>\n<li><p>APIServer如何保证API操作的原子性:</p>\n<p>Kubernetes的资源对象都设置了resourceVersion作为其元数据的一部分，APIServer以此保证资源对象操作的原子性</p>\n</li>\n</ul>\n<h5 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler:\"></a>Scheduler:</h5><p>根据特定的调度算法将pod调度到指定的工作节点上，这一过程称作绑定</p>\n<ul>\n<li><p>Scheduler的数据采集模型</p>\n<p>Scheduler定时向APIServer获取各种各样它需要的数据，为了减少轮询时APIServer带来的额外开销，对于感兴趣的资源设置了本地缓存机制</p>\n</li>\n<li><p>Scheduler调度算法</p>\n<p>Kubernetes中的调度策略分为两个阶段：Predicates , Priorites</p>\n<ul>\n<li>Predicates :回答能不能</li>\n<li>Priorites：在Predicates基础上回答匹配度</li>\n</ul>\n</li>\n<li><p>controller manager</p>\n<p>kubernetes controller manager 运行在集群的master节点上，管理着集群中的各种控制器</p>\n</li>\n</ul>\n<h4 id=\"工作节点：\"><a href=\"#工作节点：\" class=\"headerlink\" title=\"工作节点：\"></a>工作节点：</h4><h5 id=\"cAdvisor\"><a href=\"#cAdvisor\" class=\"headerlink\" title=\"cAdvisor:\"></a>cAdvisor:</h5><p>获取当前工作节点的宿主机信息</p>\n<h5 id=\"kubelet\"><a href=\"#kubelet\" class=\"headerlink\" title=\"kubelet :\"></a>kubelet :</h5><p>kubelet组件 是Kubenetes集群工作节点上最重要的组件进程，它负责管理和维护在这台主机上运行着的所有容器。本质上它的工作可以归纳为使得pod的运行状态（status）与它的期待值（spec）一致。</p>\n<p>Kubelet如何同步工作节点状态：</p>\n<p>1.kubelet调用APIServer API向etcd获取包含当前工作节点状态信息的node 对象，查询的键值就是kubelet所在工作节点的主机名，</p>\n<p>2.调用cAdvisor客户端API获取当前工作节点的宿主机信息，更新前面步骤获取到的node对象</p>\n<p>3.kubelet再次调用APIServer API将上述更新持久化到etcd中</p>\n<h5 id=\"kube-proxy\"><a href=\"#kube-proxy\" class=\"headerlink\" title=\"kube-proxy :\"></a>kube-proxy :</h5><p>Kubernetes基于service、endpoint等概念为用户提供了一种服务发现和反向代理服务，而kube-proxy正是这种服务的底层实现机制。</p>\n<p>服务发现实现：</p>\n<p>Kube-proxy使用etcd的watch机制，监控集群中service和endpoint对象数据的动态变化，并且维护一个从service到endpoint的映射关系，从而保证了后端pod的IP变化不会对访问者造成影响。</p>\n<p>kube-proxy主要有两种工作模式: userspace 和 iptables</p>\n<p>userspace模式：</p>\n<p>iptables模式：</p>\n<p>iptables模式下的proxier值负责在发现变更时更新iptables规则，而不再为每个service打开一个本地端口，所有流量转发到pod的工作将交由内核态的iptables完成。</p>\n<h3 id=\"核心组件协作流程：\"><a href=\"#核心组件协作流程：\" class=\"headerlink\" title=\"核心组件协作流程：\"></a>核心组件协作流程：</h3><h4 id=\"创建pod\"><a href=\"#创建pod\" class=\"headerlink\" title=\"创建pod\"></a>创建pod</h4><p>当客户端发起一个创建pod的请求后，kubectl向APIServer的/pods端点发送一个HTTP POST请求，请求的内容即客户端提供的pod资源配置文件</p>\n<p>APIServer收到该REST API请求后会进行一系列的验证操作，包括用户认证，授权和资源配额控制等。验证通过后，APIServer调用etcd的存储接口在后台数据库中创建一个pod对象。</p>\n<p>Scheduler使用APIServer 的API  定期从etcd获取或者监控系统中可用的工作节点列表和待调度pod , 并使用调度策略为pod选择一个运行的工作节点，这个过程叫绑定</p>\n<p>绑定完成后，scheduler会调用APIServer的API在etcd中创建bingding对象，描述在一个工作节点上绑定运行的所有pod信息。同时kubelet会监听APIServer上pod的更新，如果发现有pod更新信息，则会自动在podWorker的同步周期中更新对应的pod</p>\n<p>这正是Kubernetes实现中 “一切皆资源”的体现，即所有实体对象，消息都是作为etcd里保存起来的一种资源对待，其他所有组件间协作都通过基于APIServer的数据交换，组件间一种松耦合的状态。</p>\n<h4 id=\"创建service\"><a href=\"#创建service\" class=\"headerlink\" title=\"创建service\"></a>创建service</h4><p>当客户端发起一个创建service的请求后，kubectl向APIServer的/service端点发送一个HTTP POST请求，请求的内容即客户端提供的service资源配置文件。</p>\n<p>同样，APIServer收到该REST API请求后会进行一系列的验证操作。验证通过后，APIServer调用etcd的存储接口在后台数据库中创建一个service对象</p>\n<p>kube-proxy会定期调用APIServer的API获取期望service对象列表，然后再遍历期望service对象列表。对每个service调用APIServer的API获取对应的pod集的信息，并从pod信息列表中提取pod IP和容器端口号封装成endpoint对象，然后调用APIServer的API在etcd中创建对象</p>\n<p>在```userspace kube-proxy模式``下：</p>\n<p>对于每个新建的service，kube-proxy会为其在本地随机分配一个随机端口号，并相应地创建一个ProxySocket，随后使用iptables工具在宿主机上建立一条从ServiceProxy到ProxySocket的了链路。同时，kube-proxy后台启动一个协程监听ProxySocket上的数据并根据endpoint实例的信息将来自客户端的请求转发给相应的service后端pod.</p>\n<p>在<code>iptables kube-proxy模式</code>下：</p>\n<p>对于每个新建的service，kube-proxy会为其创建对应的iptables。来自客户端的请求将由内核态iptables负责转发给service后端pod完成</p>\n<p>最后，kube-proxy会定期调用APIService的API获取期望service和endpoint列表并与本地的service 和endpoint实例同步。</p>\n<h3 id=\"Kubernetes-网络核心原理\"><a href=\"#Kubernetes-网络核心原理\" class=\"headerlink\" title=\"Kubernetes 网络核心原理\"></a>Kubernetes 网络核心原理</h3><h4 id=\"单pod单IP模型\"><a href=\"#单pod单IP模型\" class=\"headerlink\" title=\"单pod单IP模型\"></a>单pod单IP模型</h4><p>Kubernetes为每一个pod分配一个私有网络地址段的IP地址，通过该IP地址，pod能够跨网络与其他物理机，虚拟机或容器进行通信，pod内的容器全部共享这个pod的容器配置，彼此之间使用localhost通信。</p>\n<h4 id=\"单pod单IP实现原理\"><a href=\"#单pod单IP实现原理\" class=\"headerlink\" title=\"单pod单IP实现原理\"></a>单pod单IP实现原理</h4><p>在每一个pod中有一个网络容器，该容器先于pod内所有用户容器被创建，并且拥有该pod的网络namespace，pod的其他用户容器使用Docker的–net=container:<id>选项加入该网络的namespace，这样就实现了pod内所有容器对于网络栈的共享</id></p>\n<h3 id=\"Kubernetes-高级实践\"><a href=\"#Kubernetes-高级实践\" class=\"headerlink\" title=\"Kubernetes 高级实践\"></a>Kubernetes 高级实践</h3><p>应用健康检查:</p>\n<ul>\n<li><p>进程级健康检查</p>\n</li>\n<li><p>业务级健康检查:</p>\n<p>活性探针：</p>\n<ul>\n<li>HTTP Get: kubelet 将调用容器内Web应用的web hook 如果返回的状态为200 和 399 之间则成功</li>\n<li>Container Exec: kubelet 将在用户容器内执行一次命令，返回码为0 则正常</li>\n<li>TCP Socket : 尝试建立socker,但目前尚未支持</li>\n</ul>\n<p>如果readiness probe的健康检查结果是fail kubelet并不会杀死容器进程，而只是将该容器所属的pod 从endpoint列表删除</p>\n</li>\n</ul>\n<h3 id=\"Kubernetes-未来动向\"><a href=\"#Kubernetes-未来动向\" class=\"headerlink\" title=\"Kubernetes 未来动向\"></a>Kubernetes 未来动向</h3><p>坚持走更加开放的道路</p>\n<p>汲取Borg与Omega的优秀设计思想</p>\n<p>致力于树立行业标准</p>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h3 id=\"pod-设计解读\"><a href=\"#pod-设计解读\" class=\"headerlink\" title=\"pod 设计解读\"></a>pod 设计解读</h3><p>在kubernetes中，创建、调度、管理的最小单位是pod</p>\n<ul>\n<li>pod是IP等网络资源的分配的基本单位，这个IP及其对应的network namespace是由pod里面的容器共享的</li>\n<li>pod内的所有容器页共享volume。当一个volume被挂载在同属同一个pod的多个Docker容器的文件系统</li>\n<li>IPC namespace 即同一个pod内的应用容器能够使用System V IPC或者POSIX消息队列进行通信</li>\n<li>UTS namespace 即同一个pod内的应用容器共享主机名</li>\n</ul>\n<p>1.label 和label selector与pod协作</p>\n<p>2.pod的现状和未来</p>\n<ul>\n<li>资源共享和通信</li>\n<li>集中式管理，指pod内的所有容器资源</li>\n</ul>\n<p>3.pod内的容器网络与通信</p>\n<p>​    通过pause容器进行pod内的容器网络与通信</p>\n<ul>\n<li><p>replication controller设计解读</p>\n<p>replication controller在设计上依然体现出了”旁路控制”的思想，为每个pod “外挂”了一个控制器进程，从而避免了健康检查组件成为性能瓶颈</p>\n<p>replication controller只能与重启策略为Always的pod进行协作</p>\n<p>replication controller的经典场景:</p>\n<ul>\n<li>重调度</li>\n<li>弹性伸缩</li>\n<li>滚动更新</li>\n<li>多版本应用release追踪</li>\n</ul>\n</li>\n<li><p>service的设计解读</p>\n<p>service通过标签label将流量负载均衡到对应label标签的pod上</p>\n<ul>\n<li><p>service工作原理</p>\n<p>Kubernetes集群上的每个节点都运行着一个服务代理(service proxy),它是负责实现service的主要组件</p>\n<p>kube proxy两种工作模式：</p>\n<ul>\n<li><p>userspace模式</p>\n<p>对于每个service kube-proxy都会在宿主机监听一个端口与这个service对应起来，并在宿主机上建立起iptables规则，将service IP:service port的流量重定向到上述端口</p>\n</li>\n<li><p>iptables模式</p>\n<p>iptables模式下的kube-proxy将负责创建和维护iptables的路由规则，其余工作交由内核态的iptables完成</p>\n</li>\n</ul>\n</li>\n<li><p>service的自发现机制</p>\n<ul>\n<li>环境变量方式</li>\n<li>DNS方式(mysvc.myns)</li>\n</ul>\n</li>\n<li><p>service 外部可路由性设计</p>\n<ul>\n<li>NodePort</li>\n<li>LoadBalancer</li>\n<li>external ip</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>新一代版本控制器 replica set</p>\n<p>replica set 用于保证label selector 匹配的pod数量维持在期望状态</p>\n<p>replicat set 与 replication controller 的区别是：replication controller只支持等值匹配   replicat set支持基于子集的查询</p>\n</li>\n<li><p>Deployment</p>\n<p>Deployment多用于pod 和replica set 的更新，可以方便地跟踪观察其所属的relica set或者pod的数量以及状态变化</p>\n</li>\n<li><p>DaemonSet</p>\n</li>\n<li><p>ConfigMap</p>\n</li>\n<li><p>Job</p>\n</li>\n</ul>\n<h3 id=\"Kubernetes核心-组件解读\"><a href=\"#Kubernetes核心-组件解读\" class=\"headerlink\" title=\"Kubernetes核心 组件解读\"></a>Kubernetes核心 组件解读</h3><h4 id=\"Master节点：\"><a href=\"#Master节点：\" class=\"headerlink\" title=\"Master节点：\"></a>Master节点：</h4><h5 id=\"APIServer\"><a href=\"#APIServer\" class=\"headerlink\" title=\"APIServer:\"></a>APIServer:</h5><p>Kubernetes APIserver负责对外提供Kubernetes API服务，它运行在Kubernetes的管理节点-Master节点</p>\n<ul>\n<li><p>APIServer的职能:</p>\n<ul>\n<li>对外提供RESTful的管理接口</li>\n<li>配置Kubernetes的资源对象</li>\n<li>提供可定制的功能性插件</li>\n</ul>\n</li>\n<li><p>APIServer启动过程:</p>\n<p>1.新建APIServer 定义一个APIServer所需的关键资源</p>\n<p>2.接受用户命令行输入，为上述各参数赋值</p>\n<p>3.解析并格式化用户传入的参数</p>\n<p>4.初始化log配置</p>\n<p>5.启动运行一个全新的APIServer</p>\n</li>\n<li><p>APIServer对etcd的封装：</p>\n<p>Kubernetes使用etcd作为后台存储解决方案，而APIServer则基于etcd实现了一套RESTful API，用于操作存储在etcd中的Kubernetes对象实例</p>\n</li>\n<li><p>APIServer如何保证API操作的原子性:</p>\n<p>Kubernetes的资源对象都设置了resourceVersion作为其元数据的一部分，APIServer以此保证资源对象操作的原子性</p>\n</li>\n</ul>\n<h5 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler:\"></a>Scheduler:</h5><p>根据特定的调度算法将pod调度到指定的工作节点上，这一过程称作绑定</p>\n<ul>\n<li><p>Scheduler的数据采集模型</p>\n<p>Scheduler定时向APIServer获取各种各样它需要的数据，为了减少轮询时APIServer带来的额外开销，对于感兴趣的资源设置了本地缓存机制</p>\n</li>\n<li><p>Scheduler调度算法</p>\n<p>Kubernetes中的调度策略分为两个阶段：Predicates , Priorites</p>\n<ul>\n<li>Predicates :回答能不能</li>\n<li>Priorites：在Predicates基础上回答匹配度</li>\n</ul>\n</li>\n<li><p>controller manager</p>\n<p>kubernetes controller manager 运行在集群的master节点上，管理着集群中的各种控制器</p>\n</li>\n</ul>\n<h4 id=\"工作节点：\"><a href=\"#工作节点：\" class=\"headerlink\" title=\"工作节点：\"></a>工作节点：</h4><h5 id=\"cAdvisor\"><a href=\"#cAdvisor\" class=\"headerlink\" title=\"cAdvisor:\"></a>cAdvisor:</h5><p>获取当前工作节点的宿主机信息</p>\n<h5 id=\"kubelet\"><a href=\"#kubelet\" class=\"headerlink\" title=\"kubelet :\"></a>kubelet :</h5><p>kubelet组件 是Kubenetes集群工作节点上最重要的组件进程，它负责管理和维护在这台主机上运行着的所有容器。本质上它的工作可以归纳为使得pod的运行状态（status）与它的期待值（spec）一致。</p>\n<p>Kubelet如何同步工作节点状态：</p>\n<p>1.kubelet调用APIServer API向etcd获取包含当前工作节点状态信息的node 对象，查询的键值就是kubelet所在工作节点的主机名，</p>\n<p>2.调用cAdvisor客户端API获取当前工作节点的宿主机信息，更新前面步骤获取到的node对象</p>\n<p>3.kubelet再次调用APIServer API将上述更新持久化到etcd中</p>\n<h5 id=\"kube-proxy\"><a href=\"#kube-proxy\" class=\"headerlink\" title=\"kube-proxy :\"></a>kube-proxy :</h5><p>Kubernetes基于service、endpoint等概念为用户提供了一种服务发现和反向代理服务，而kube-proxy正是这种服务的底层实现机制。</p>\n<p>服务发现实现：</p>\n<p>Kube-proxy使用etcd的watch机制，监控集群中service和endpoint对象数据的动态变化，并且维护一个从service到endpoint的映射关系，从而保证了后端pod的IP变化不会对访问者造成影响。</p>\n<p>kube-proxy主要有两种工作模式: userspace 和 iptables</p>\n<p>userspace模式：</p>\n<p>iptables模式：</p>\n<p>iptables模式下的proxier值负责在发现变更时更新iptables规则，而不再为每个service打开一个本地端口，所有流量转发到pod的工作将交由内核态的iptables完成。</p>\n<h3 id=\"核心组件协作流程：\"><a href=\"#核心组件协作流程：\" class=\"headerlink\" title=\"核心组件协作流程：\"></a>核心组件协作流程：</h3><h4 id=\"创建pod\"><a href=\"#创建pod\" class=\"headerlink\" title=\"创建pod\"></a>创建pod</h4><p>当客户端发起一个创建pod的请求后，kubectl向APIServer的&#x2F;pods端点发送一个HTTP POST请求，请求的内容即客户端提供的pod资源配置文件</p>\n<p>APIServer收到该REST API请求后会进行一系列的验证操作，包括用户认证，授权和资源配额控制等。验证通过后，APIServer调用etcd的存储接口在后台数据库中创建一个pod对象。</p>\n<p>Scheduler使用APIServer 的API  定期从etcd获取或者监控系统中可用的工作节点列表和待调度pod , 并使用调度策略为pod选择一个运行的工作节点，这个过程叫绑定</p>\n<p>绑定完成后，scheduler会调用APIServer的API在etcd中创建bingding对象，描述在一个工作节点上绑定运行的所有pod信息。同时kubelet会监听APIServer上pod的更新，如果发现有pod更新信息，则会自动在podWorker的同步周期中更新对应的pod</p>\n<p>这正是Kubernetes实现中 “一切皆资源”的体现，即所有实体对象，消息都是作为etcd里保存起来的一种资源对待，其他所有组件间协作都通过基于APIServer的数据交换，组件间一种松耦合的状态。</p>\n<h4 id=\"创建service\"><a href=\"#创建service\" class=\"headerlink\" title=\"创建service\"></a>创建service</h4><p>当客户端发起一个创建service的请求后，kubectl向APIServer的&#x2F;service端点发送一个HTTP POST请求，请求的内容即客户端提供的service资源配置文件。</p>\n<p>同样，APIServer收到该REST API请求后会进行一系列的验证操作。验证通过后，APIServer调用etcd的存储接口在后台数据库中创建一个service对象</p>\n<p>kube-proxy会定期调用APIServer的API获取期望service对象列表，然后再遍历期望service对象列表。对每个service调用APIServer的API获取对应的pod集的信息，并从pod信息列表中提取pod IP和容器端口号封装成endpoint对象，然后调用APIServer的API在etcd中创建对象</p>\n<p>在&#96;&#96;&#96;userspace kube-proxy模式&#96;&#96;下：</p>\n<p>对于每个新建的service，kube-proxy会为其在本地随机分配一个随机端口号，并相应地创建一个ProxySocket，随后使用iptables工具在宿主机上建立一条从ServiceProxy到ProxySocket的了链路。同时，kube-proxy后台启动一个协程监听ProxySocket上的数据并根据endpoint实例的信息将来自客户端的请求转发给相应的service后端pod.</p>\n<p>在<code>iptables kube-proxy模式</code>下：</p>\n<p>对于每个新建的service，kube-proxy会为其创建对应的iptables。来自客户端的请求将由内核态iptables负责转发给service后端pod完成</p>\n<p>最后，kube-proxy会定期调用APIService的API获取期望service和endpoint列表并与本地的service 和endpoint实例同步。</p>\n<h3 id=\"Kubernetes-网络核心原理\"><a href=\"#Kubernetes-网络核心原理\" class=\"headerlink\" title=\"Kubernetes 网络核心原理\"></a>Kubernetes 网络核心原理</h3><h4 id=\"单pod单IP模型\"><a href=\"#单pod单IP模型\" class=\"headerlink\" title=\"单pod单IP模型\"></a>单pod单IP模型</h4><p>Kubernetes为每一个pod分配一个私有网络地址段的IP地址，通过该IP地址，pod能够跨网络与其他物理机，虚拟机或容器进行通信，pod内的容器全部共享这个pod的容器配置，彼此之间使用localhost通信。</p>\n<h4 id=\"单pod单IP实现原理\"><a href=\"#单pod单IP实现原理\" class=\"headerlink\" title=\"单pod单IP实现原理\"></a>单pod单IP实现原理</h4><p>在每一个pod中有一个网络容器，该容器先于pod内所有用户容器被创建，并且拥有该pod的网络namespace，pod的其他用户容器使用Docker的–net&#x3D;container:<id>选项加入该网络的namespace，这样就实现了pod内所有容器对于网络栈的共享</p>\n<h3 id=\"Kubernetes-高级实践\"><a href=\"#Kubernetes-高级实践\" class=\"headerlink\" title=\"Kubernetes 高级实践\"></a>Kubernetes 高级实践</h3><p>应用健康检查:</p>\n<ul>\n<li><p>进程级健康检查</p>\n</li>\n<li><p>业务级健康检查:</p>\n<p>活性探针：</p>\n<ul>\n<li>HTTP Get: kubelet 将调用容器内Web应用的web hook 如果返回的状态为200 和 399 之间则成功</li>\n<li>Container Exec: kubelet 将在用户容器内执行一次命令，返回码为0 则正常</li>\n<li>TCP Socket : 尝试建立socker,但目前尚未支持</li>\n</ul>\n<p>如果readiness probe的健康检查结果是fail kubelet并不会杀死容器进程，而只是将该容器所属的pod 从endpoint列表删除</p>\n</li>\n</ul>\n<h3 id=\"Kubernetes-未来动向\"><a href=\"#Kubernetes-未来动向\" class=\"headerlink\" title=\"Kubernetes 未来动向\"></a>Kubernetes 未来动向</h3><p>坚持走更加开放的道路</p>\n<p>汲取Borg与Omega的优秀设计思想</p>\n<p>致力于树立行业标准</p>\n"},{"title":"SpringCloudGateway云上的设计与改造","date":"2023-07-13T16:01:00.000Z","_content":"","source":"_posts/FuncDesign/SpringCloudGateway云上的设计与改造.md","raw":"---\ntitle: SpringCloudGateway云上的设计与改造\ndate: 2023-07-14 00:01:00\ntags:\n  - SpringCloudGateway\n  - 云原生网关\ncategories: 云原生网关\n---","slug":"FuncDesign/SpringCloudGateway云上的设计与改造","published":1,"updated":"2024-01-25T11:59:52.043Z","_id":"clrhmalos000gqzywb6zveo7g","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":""},{"title":"SpringCloudGateway功能原理以及产品化实践","date":"2022-06-10T16:01:00.000Z","_content":"\n## 前言\n近日，我司的项目总监让我们网关组的成员对企业级SpringCloudGateway网关相关内容进行整理，我正好借此机会沉淀一下这段时间以来对网关的开发实践以及思考。接下来我会按照以下内容进行介绍：\n- 介绍企业级微服务开发面临的痛点、需求、场景和应用\n- 介绍SpringCloud Gateway的核心原理\n- 介绍SpringCloud Gateway在网关高可用、动态路由、可扩展插件、接口调试、限流熔断、性能优化等方面的实践与优化\n- 介绍自己对企业级微服务网关的一些思考与未来的发展方向\n\n## 微服务开发面临的问题\n\n- 服务需要重复开发通用功能，随着微服务规模的不断扩大，这些校验冗余逻辑将越来越沉重，一旦校验规则有了变化，不得不去每个应用修改这些逻辑，增加了维护成本\n- 随着时间的推移，可能需要改变系统目前的拆分方案，但如果客户端直接与微服务交互，强耦合，那么这种重构就很难实施\n- 服务协议不统一，系统服务使用webService、gRPC以及其他RPC等非RESTFUL接口标准协议进行开发的应用，协议不统一，需要兼容\n- 业务不断发展需求快速迭代，服务接口愈多，如何保护、监控、维护数以万计的接口\n\n## 微服务网关的应用场景有哪些\n- 微服务网关\n- 业务系统集成\n- 企业能力开放\n- 接口生命周期管理\n- 架构治理\n\n## Spring Cloud Gateway的核心原理\nSpring Cloud Gateway是Spring官方基于Spring5.0、SpringBoot2.0和Project Reactor等技术开发的网关旨在为微服务框架提供一种简单而有效的 统一的API路由管理方式，统一访问接口。Spring Cloud Gateway作为Spring Cloud生态体系中的网关，目标是替代Netflix的Zuul，其不仅提供统一的路由方式，并且\n基于Filter链的方式提供了网关基本的功能，例如：安全、监控/埋点和限流等等。\n\nSpring Cloud Gateway网关是一个内外衔接的数据交换组件，对内API接口的方式纳管所有要对外透出的微服务，作为出口端点，对外提供API接口给上游的Web应用、Mobile应用、外部微服务。网关核心在于将请求流量由上游发起经过网关到下游的微服务，在流量出入的过程中，网关在路由策略，协议转换、过滤、API组合等方面构建\n网关的核心能力。\n\n![scg核心原理.png](..%2F..%2Fimg%2Fscg%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86.png)\n\n### 关键术语\n\n- 路由Route：即一套路由规则，是集URI、predicate、filter等属性的一个元数据类。\n- 断言Predicate：Java8函数断言，这里可以看做是满足什么条件的时候，route规则进行生效。允许开发者去定义匹配来自于Http Request中的任何信息，如请求头和参数。\n- 过滤器Filter：filter针对请求和响应进行增强、修改处理。filter可以认为是Spring Cloud Gateway最核心的模块，熔断、安全、逻辑执行、网络调用都是filter来完成的，其中又细分为gateway filter和global filter，区别在于是具体一个route规则生效还是所有route规则都生效。\n\n![scg核心原理2.png](..%2F..%2Fimg%2Fscg%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%862.png)\n\n## CSB2.0云原生网关如何保障服务高可用\n\n项目术语：\n- console: 网关配置控制台的云原生网关服务\n- broker: 实际请求转发的云原生网关服务\n- SLA:service-level agreement SLA的概念，对互联网公司来说就是服务可用性的一个保证。\n- SLB:Server Load Balancing 指服务器负载均衡\n\n网关承载着所有服务的入口流量,要求具备高可用的能力。而通常实现高可用的主要手段是数据的冗余备份和服务 的失效转移,而这两种手段在网关的具备体现为：\n### 集群的部署结构：\nCSB2.0云原生网关目前是基于Kubernetes容器编排平台进行部署，由云平台提供SLB作为流量到网关节点的负载均衡能力，网关根据服务器的性能进行集群的部署，这部分的SLA的能力由云平台负责保障。企业部署一个地方的网关节点集群，相当于单数据中心，也可根 据自己的需求部署多个网关节点集群，以达到多个数\n据中心的容灾能力，这样部署就已经能保障网关的正常可用。如图所示：\n![scg集群部署.png](..%2F..%2Fimg%2Fscg%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2.png)\n\n### 负载均衡的能力：\nCSB2.0云原生网关实现了一套控制台即可对不同实例下的网关节点进行配置下发，并且同一个实例内的所有网关节点都是生效的。通常一个网关节点部署在一个服务器上，节点通过监听中间件(Redis、Nacos等)中的配置信息以此来获取、更新broker中的配置。此处的负载均衡是指broker节点对于下游服务的不同节点进行\n请求转发，例如服务service1的请求会依次分发到服务下的节点node1、node2 和node3。如图所示：\n![scg-lb.png](..%2F..%2Fimg%2Fscg-lb.png)\n\n### 健康检查\n请求到达服务节点前，尽管已经做了两层的负载，即请求到达云容器平台的负载均衡器以及broker对下游服务节点的负载。但是不管是网关broker节点，还是下游的某个节点发生了故障,请求还是有可能继续打到该节点上，这时候服务的最终结果仍是不可用。解决的方案是把所有有问题的的节点，包括broker节点、下游服务节点移出SLB的范围即可。因此需要解决的问题是如何知道broker节点以及下游服务的node节点是否正常？解决方案是对broker节点以及服务下游node节点进行健康检查：\n- broker节点健康检查：CSB2.0云原生网关的部署依托于Kubernetes等容器编排平台，容器平台提供有多种对容器的健康检查方式，如容器探针、基于HTTP的探活检查\n- 下游服务健康检查：可对下游服务设置正确的返回结果(请求状态码、超时期限等),定时轮训将请求打到下游服务，若发现返回异常且满足从负载节点移除的条件，则将该节点移除。当下游服务节点恢复再加回负载列表。\n\n### 节点恢复\nCSB2.0云原生网关依托于Kubernetes云容器编排平台进行部署，节点的自恢复能力由云平台保证。\n\n### 熔断与降级\n下游服务可能会出现一些超出预期的错误，这种错误有可能影响到系统的正常运行，比如请求引发的阻塞，这种请求阻塞有可能占用系统宝贵的资源，如：内存、线程、数据库等，消耗的资源有可能会拖垮整个系统，因此网关\n需要判断服务不可用就切断对服务的访问,CSB2.0云原生网关底层采用阿里开源的sentinel框架作为流量控制、熔断降级、系统负载保护等多个纬度保障服务的稳定性。\n当网关请求在一段时间内失败次数达到一定条件，就会触发熔断。目前CSB2.0支持的熔断条件有：\n1、后端响应时间\n2、后端错误码\n3、触发熔断的请求阈值\n降级策略目前支持Mock的形式返回响应参数，包括响应码、响应头、响应体。\n当发生熔断后，判断请求是否恢复正常的条件，若连续请求成功次数达标，则恢复转发，服务自动转入监控期；否则，继续进入熔断期。如此反复。如下图：\n![熔断.png](..%2F..%2Fimg%2F%E7%86%94%E6%96%AD.png)\n\n### 接口重试\n虽然有很多机制保障接口的可访问，但是一个请求报错的原因有很多，偶然一次报错不一定是服务不可用，最简单的，第一次不行，应该再访问一次或几次，以确定结果。 请求重试可以说是网关对接口转发的基本要求，每个接口都应该可以设置重试次数。当请求失败后，网关应立即再次请求，直到拿到正常返回，或是达到重试阈值，再将结果返回给客户端。\n\n## CSB2.0云原生网关如何实现动态路由\n为了应对网关路由各种复杂业务场景，要求网关在不重启服务的情况下，实现对API路由规则的动态配置，实时生效。SpringCloud提供有两种原生动态路由的方式：\n- Spring Cloud DiscoveryClient原生支持：\n  Spring Cloud原生支持服务自动发现并且注册到路由之中，通过在application.properties中设置spring.cloud.gateway.discovery.locator.enabled=true, 同时确保DiscoveryClient的实体(Nacos，Netflix Eureka, Consul, 或 Zookeeper) 已经生效，即可完成服务的自动发现及注册。\n- 一种是基于Actuator API\n  SpringCloud Gateway提供有OpenAPI来建立路由信息，请求内容为JSON请求体，请求方法为POST 如路径：/gateway/routes/{id_route_to_create}\n\n以上路由扩展的自由度有限，第一种方式的服务都要依托与SpringCloud家族体系下，第二种无法满足高度定制化的需求。CSB2.0的做法是对SpringCloud Gateway做了底层修改，扩展了Spring Cloud Gateway底层路由加载机制，将Spring Cloud Gateway运行态时保存的路由关系，通过实现、继承加载自定义类的方式，对其进行动态路由修改，每当路由有变化时，再触发一次动态的修改。\n\n因此这种实现需要两种保障：\n1、监听机制\n2、实现自定义路由的核心类\nSpring Cloud Gateway 核心加载机制如图所示：\n\n![scg配置监听.png](..%2F..%2Fimg%2Fscg%E9%85%8D%E7%BD%AE%E7%9B%91%E5%90%AC.png)\n\n## CSB2.0云原生网关如何实现插件热插拔\n\nCSB2.0插件热插拔还在排期开发，但可参考 https://juejin.cn/post/6963453967497953311\n\n## CSB2.0云原生网关如何实现接口调试\nCSB2.0需要Console对Broker进行接口调试，但在专有云网络下存在【管控区】和【用户区】的区分，两者之间存在网络通信限制，具体表现为\n- 用户区访问管控区，可以通过 vip 打通\n- 管控区不允许访问用户区\n\n这里的“访问”在 TCP 层面可以理解为不允许主动建立连接，而 API 调试的需求从功能层面来看，的确是【管控区】访问【用户区】，在无法主动建立连接的情况下，需要设计网络反向访问方案。\n\n本方案提出一个设计，由【用户区】的 broker 主动建立 TCP 长连接到【管控区】的 console，借助于 TCP 双工通信的特性，console 可以通过持续维护 broker 的连接，从而完成与 broker 的通信。\n整体设计如图所示：\n![接口调试整体方案.png](..%2F..%2Fimg%2F%E6%8E%A5%E5%8F%A3%E8%B0%83%E8%AF%95%E6%95%B4%E4%BD%93%E6%96%B9%E6%A1%88.png)\n\n### VIP连接方案\n长连接实现方案使用 WebSocket实现 console 与 broker 的交互。但是在实际部署中，【用户区】的 broker 经过了一个 VIP 连接到【管控区】的 console，由于 VIP 随机负载均衡的特性的，可能会出现部分 console 没有持有长连接的问题，当这些 console 节点接受请求之后，将会无法处理。如图所示：\n\n![scg-vip问题.png](..%2F..%2Fimg%2Fscg-vip%E9%97%AE%E9%A2%98.png)\n\n为了解决上述问题，如下图引入心跳机制。broker 通过定时任务向 VIP 发送建连请求，console 在接受到请求之后，需要返回 console ip，broker 在接收到 console ip 的响应之后，\n需要比对 console ip 与本地的 console ip 缓存池，从而判断是否是一条新的连接\n- 从连接层面来看，broker 与 vip 建立了重复的连接，但实际上连接到了不同的 console 实例\n- 轮询机制保障了最终能够与所有 console 实例建立连接\n- 轮询机制兼容了 console 动态扩缩容的场景\n- 轮询机制兼容了连接断开的场景\n\n![接口调试最终设计.png](..%2F..%2Fimg%2F%E6%8E%A5%E5%8F%A3%E8%B0%83%E8%AF%95%E6%9C%80%E7%BB%88%E8%AE%BE%E8%AE%A1.png)\n\n## CSB2.0云原生网关如何实现多协议转换\n在SpringCloud-Gateway网关中扩展多种协议如：Grpc、WebService、Dubbo、HSF等协议，在此之前我们需要分析一下SpringCloud-Gateway filter机制。springcloud-gateway基于过滤器实现， 分为pre和post两种类型的过滤器，分别处理前置逻辑和后置逻辑。客户端将http请求到gateway，请求经过前置过滤器处理后转发到具体到业务服务中，收到业务服务的相应\n后，响应将通过后置过滤器处理后返回客户端，其中过滤器的处理顺序按照order排序（后置处理器倒序排序）;\n![scg-filter流程.png](..%2F..%2Fimg%2Fscg-filter%E6%B5%81%E7%A8%8B.png)\n\n对于http-http的请求代理来说，NettyRoutingFilter是作为filter chain的最后一个pre filter，它负责将请求转发到具体的业务服务中\n```java\npublic class NettyRoutingFilter implements GlobalFilter, Ordered {\n  \n    @Override\n    public int getOrder() {\n        return Ordered.LOWEST_PRECEDENCE;\n    }\n}\n```\nNettyWriteResponseFilter作为post filter chain的第一个filter，它负责将业务服务的响应返回给客户端\n```java\npublic class NettyWriteResponseFilter implements GlobalFilter, Ordered {\n\n  public static final int WRITE_RESPONSE_FILTER_ORDER = -1;\n\n  @Override\n  public int getOrder() {\n    return WRITE_RESPONSE_FILTER_ORDER;\n  }\n}\n```\n因此要实现http作为入口协议的多协议的泛化调用，我们需要在pre filter chain中添加一个filter代替NettyRoutingFilter，负责将http编码为其他协议的请求，同时在post filter chain中添加一个filter代替NettyWriteResponseFilter，负责将其他协议的响应转换为http响应。\n以dubbo的泛化调用为例，实现如下图所示：\n![scg泛化调用.png](..%2F..%2Fimg%2Fscg%E6%B3%9B%E5%8C%96%E8%B0%83%E7%94%A8.png)\n\n## 对企业级微服务网关的一些思考与未来的发展方向\n我们可以看到Spring Cloud Gateway可以很好地与其背后的Spring 社区和 SpringCloud 微服务体系有着很好的适配和集成，这与 Java 语言流行的原因如出一辙。如果一个企业主打的技术栈是Java 体系，那么基于SpringBoot/ SpringCloud 开发微服务，选型 SpringCloud Gateway 作为微服务网关，会有着得天独厚的优势。\n而在企业级微服务网关的探索上，我认为可以基于一下几点进行后续的演进：\n- 多协议入口网关建设：基于scg作为网关引擎更多使用场景为南北向的流量转发，但是在企业级网关建设中，往往需要支持多种协议的入口，如：dubbo、grpc以及私有协议等东西向流量的转发，因此需要在scg的基础上进行扩展，支持多种协议的入口。\n- 性能与稳定性建设: 优化Spring Cloud Gateway的性能，确保在高并发情况下的稳定性和低延迟。\n- 云原生支持: 加强与Kubernetes的集成，支持容器化和微服务自动化部署。\n- 云服务厂商整合: 提供对主要云服务厂商的无缝整合，如AWS, Azure, GCP等。","source":"_posts/FuncDesign/SpringCloudGateway功能原理以及产品实践.md","raw":"---\ntitle: SpringCloudGateway功能原理以及产品化实践\ndate: 2022-06-11 00:01:00\ntags:\n  - SpringCloudGateway\n  - SCG\n  - 云原生网关\ncategories: SpringCloudGateway\n---\n\n## 前言\n近日，我司的项目总监让我们网关组的成员对企业级SpringCloudGateway网关相关内容进行整理，我正好借此机会沉淀一下这段时间以来对网关的开发实践以及思考。接下来我会按照以下内容进行介绍：\n- 介绍企业级微服务开发面临的痛点、需求、场景和应用\n- 介绍SpringCloud Gateway的核心原理\n- 介绍SpringCloud Gateway在网关高可用、动态路由、可扩展插件、接口调试、限流熔断、性能优化等方面的实践与优化\n- 介绍自己对企业级微服务网关的一些思考与未来的发展方向\n\n## 微服务开发面临的问题\n\n- 服务需要重复开发通用功能，随着微服务规模的不断扩大，这些校验冗余逻辑将越来越沉重，一旦校验规则有了变化，不得不去每个应用修改这些逻辑，增加了维护成本\n- 随着时间的推移，可能需要改变系统目前的拆分方案，但如果客户端直接与微服务交互，强耦合，那么这种重构就很难实施\n- 服务协议不统一，系统服务使用webService、gRPC以及其他RPC等非RESTFUL接口标准协议进行开发的应用，协议不统一，需要兼容\n- 业务不断发展需求快速迭代，服务接口愈多，如何保护、监控、维护数以万计的接口\n\n## 微服务网关的应用场景有哪些\n- 微服务网关\n- 业务系统集成\n- 企业能力开放\n- 接口生命周期管理\n- 架构治理\n\n## Spring Cloud Gateway的核心原理\nSpring Cloud Gateway是Spring官方基于Spring5.0、SpringBoot2.0和Project Reactor等技术开发的网关旨在为微服务框架提供一种简单而有效的 统一的API路由管理方式，统一访问接口。Spring Cloud Gateway作为Spring Cloud生态体系中的网关，目标是替代Netflix的Zuul，其不仅提供统一的路由方式，并且\n基于Filter链的方式提供了网关基本的功能，例如：安全、监控/埋点和限流等等。\n\nSpring Cloud Gateway网关是一个内外衔接的数据交换组件，对内API接口的方式纳管所有要对外透出的微服务，作为出口端点，对外提供API接口给上游的Web应用、Mobile应用、外部微服务。网关核心在于将请求流量由上游发起经过网关到下游的微服务，在流量出入的过程中，网关在路由策略，协议转换、过滤、API组合等方面构建\n网关的核心能力。\n\n![scg核心原理.png](..%2F..%2Fimg%2Fscg%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86.png)\n\n### 关键术语\n\n- 路由Route：即一套路由规则，是集URI、predicate、filter等属性的一个元数据类。\n- 断言Predicate：Java8函数断言，这里可以看做是满足什么条件的时候，route规则进行生效。允许开发者去定义匹配来自于Http Request中的任何信息，如请求头和参数。\n- 过滤器Filter：filter针对请求和响应进行增强、修改处理。filter可以认为是Spring Cloud Gateway最核心的模块，熔断、安全、逻辑执行、网络调用都是filter来完成的，其中又细分为gateway filter和global filter，区别在于是具体一个route规则生效还是所有route规则都生效。\n\n![scg核心原理2.png](..%2F..%2Fimg%2Fscg%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%862.png)\n\n## CSB2.0云原生网关如何保障服务高可用\n\n项目术语：\n- console: 网关配置控制台的云原生网关服务\n- broker: 实际请求转发的云原生网关服务\n- SLA:service-level agreement SLA的概念，对互联网公司来说就是服务可用性的一个保证。\n- SLB:Server Load Balancing 指服务器负载均衡\n\n网关承载着所有服务的入口流量,要求具备高可用的能力。而通常实现高可用的主要手段是数据的冗余备份和服务 的失效转移,而这两种手段在网关的具备体现为：\n### 集群的部署结构：\nCSB2.0云原生网关目前是基于Kubernetes容器编排平台进行部署，由云平台提供SLB作为流量到网关节点的负载均衡能力，网关根据服务器的性能进行集群的部署，这部分的SLA的能力由云平台负责保障。企业部署一个地方的网关节点集群，相当于单数据中心，也可根 据自己的需求部署多个网关节点集群，以达到多个数\n据中心的容灾能力，这样部署就已经能保障网关的正常可用。如图所示：\n![scg集群部署.png](..%2F..%2Fimg%2Fscg%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2.png)\n\n### 负载均衡的能力：\nCSB2.0云原生网关实现了一套控制台即可对不同实例下的网关节点进行配置下发，并且同一个实例内的所有网关节点都是生效的。通常一个网关节点部署在一个服务器上，节点通过监听中间件(Redis、Nacos等)中的配置信息以此来获取、更新broker中的配置。此处的负载均衡是指broker节点对于下游服务的不同节点进行\n请求转发，例如服务service1的请求会依次分发到服务下的节点node1、node2 和node3。如图所示：\n![scg-lb.png](..%2F..%2Fimg%2Fscg-lb.png)\n\n### 健康检查\n请求到达服务节点前，尽管已经做了两层的负载，即请求到达云容器平台的负载均衡器以及broker对下游服务节点的负载。但是不管是网关broker节点，还是下游的某个节点发生了故障,请求还是有可能继续打到该节点上，这时候服务的最终结果仍是不可用。解决的方案是把所有有问题的的节点，包括broker节点、下游服务节点移出SLB的范围即可。因此需要解决的问题是如何知道broker节点以及下游服务的node节点是否正常？解决方案是对broker节点以及服务下游node节点进行健康检查：\n- broker节点健康检查：CSB2.0云原生网关的部署依托于Kubernetes等容器编排平台，容器平台提供有多种对容器的健康检查方式，如容器探针、基于HTTP的探活检查\n- 下游服务健康检查：可对下游服务设置正确的返回结果(请求状态码、超时期限等),定时轮训将请求打到下游服务，若发现返回异常且满足从负载节点移除的条件，则将该节点移除。当下游服务节点恢复再加回负载列表。\n\n### 节点恢复\nCSB2.0云原生网关依托于Kubernetes云容器编排平台进行部署，节点的自恢复能力由云平台保证。\n\n### 熔断与降级\n下游服务可能会出现一些超出预期的错误，这种错误有可能影响到系统的正常运行，比如请求引发的阻塞，这种请求阻塞有可能占用系统宝贵的资源，如：内存、线程、数据库等，消耗的资源有可能会拖垮整个系统，因此网关\n需要判断服务不可用就切断对服务的访问,CSB2.0云原生网关底层采用阿里开源的sentinel框架作为流量控制、熔断降级、系统负载保护等多个纬度保障服务的稳定性。\n当网关请求在一段时间内失败次数达到一定条件，就会触发熔断。目前CSB2.0支持的熔断条件有：\n1、后端响应时间\n2、后端错误码\n3、触发熔断的请求阈值\n降级策略目前支持Mock的形式返回响应参数，包括响应码、响应头、响应体。\n当发生熔断后，判断请求是否恢复正常的条件，若连续请求成功次数达标，则恢复转发，服务自动转入监控期；否则，继续进入熔断期。如此反复。如下图：\n![熔断.png](..%2F..%2Fimg%2F%E7%86%94%E6%96%AD.png)\n\n### 接口重试\n虽然有很多机制保障接口的可访问，但是一个请求报错的原因有很多，偶然一次报错不一定是服务不可用，最简单的，第一次不行，应该再访问一次或几次，以确定结果。 请求重试可以说是网关对接口转发的基本要求，每个接口都应该可以设置重试次数。当请求失败后，网关应立即再次请求，直到拿到正常返回，或是达到重试阈值，再将结果返回给客户端。\n\n## CSB2.0云原生网关如何实现动态路由\n为了应对网关路由各种复杂业务场景，要求网关在不重启服务的情况下，实现对API路由规则的动态配置，实时生效。SpringCloud提供有两种原生动态路由的方式：\n- Spring Cloud DiscoveryClient原生支持：\n  Spring Cloud原生支持服务自动发现并且注册到路由之中，通过在application.properties中设置spring.cloud.gateway.discovery.locator.enabled=true, 同时确保DiscoveryClient的实体(Nacos，Netflix Eureka, Consul, 或 Zookeeper) 已经生效，即可完成服务的自动发现及注册。\n- 一种是基于Actuator API\n  SpringCloud Gateway提供有OpenAPI来建立路由信息，请求内容为JSON请求体，请求方法为POST 如路径：/gateway/routes/{id_route_to_create}\n\n以上路由扩展的自由度有限，第一种方式的服务都要依托与SpringCloud家族体系下，第二种无法满足高度定制化的需求。CSB2.0的做法是对SpringCloud Gateway做了底层修改，扩展了Spring Cloud Gateway底层路由加载机制，将Spring Cloud Gateway运行态时保存的路由关系，通过实现、继承加载自定义类的方式，对其进行动态路由修改，每当路由有变化时，再触发一次动态的修改。\n\n因此这种实现需要两种保障：\n1、监听机制\n2、实现自定义路由的核心类\nSpring Cloud Gateway 核心加载机制如图所示：\n\n![scg配置监听.png](..%2F..%2Fimg%2Fscg%E9%85%8D%E7%BD%AE%E7%9B%91%E5%90%AC.png)\n\n## CSB2.0云原生网关如何实现插件热插拔\n\nCSB2.0插件热插拔还在排期开发，但可参考 https://juejin.cn/post/6963453967497953311\n\n## CSB2.0云原生网关如何实现接口调试\nCSB2.0需要Console对Broker进行接口调试，但在专有云网络下存在【管控区】和【用户区】的区分，两者之间存在网络通信限制，具体表现为\n- 用户区访问管控区，可以通过 vip 打通\n- 管控区不允许访问用户区\n\n这里的“访问”在 TCP 层面可以理解为不允许主动建立连接，而 API 调试的需求从功能层面来看，的确是【管控区】访问【用户区】，在无法主动建立连接的情况下，需要设计网络反向访问方案。\n\n本方案提出一个设计，由【用户区】的 broker 主动建立 TCP 长连接到【管控区】的 console，借助于 TCP 双工通信的特性，console 可以通过持续维护 broker 的连接，从而完成与 broker 的通信。\n整体设计如图所示：\n![接口调试整体方案.png](..%2F..%2Fimg%2F%E6%8E%A5%E5%8F%A3%E8%B0%83%E8%AF%95%E6%95%B4%E4%BD%93%E6%96%B9%E6%A1%88.png)\n\n### VIP连接方案\n长连接实现方案使用 WebSocket实现 console 与 broker 的交互。但是在实际部署中，【用户区】的 broker 经过了一个 VIP 连接到【管控区】的 console，由于 VIP 随机负载均衡的特性的，可能会出现部分 console 没有持有长连接的问题，当这些 console 节点接受请求之后，将会无法处理。如图所示：\n\n![scg-vip问题.png](..%2F..%2Fimg%2Fscg-vip%E9%97%AE%E9%A2%98.png)\n\n为了解决上述问题，如下图引入心跳机制。broker 通过定时任务向 VIP 发送建连请求，console 在接受到请求之后，需要返回 console ip，broker 在接收到 console ip 的响应之后，\n需要比对 console ip 与本地的 console ip 缓存池，从而判断是否是一条新的连接\n- 从连接层面来看，broker 与 vip 建立了重复的连接，但实际上连接到了不同的 console 实例\n- 轮询机制保障了最终能够与所有 console 实例建立连接\n- 轮询机制兼容了 console 动态扩缩容的场景\n- 轮询机制兼容了连接断开的场景\n\n![接口调试最终设计.png](..%2F..%2Fimg%2F%E6%8E%A5%E5%8F%A3%E8%B0%83%E8%AF%95%E6%9C%80%E7%BB%88%E8%AE%BE%E8%AE%A1.png)\n\n## CSB2.0云原生网关如何实现多协议转换\n在SpringCloud-Gateway网关中扩展多种协议如：Grpc、WebService、Dubbo、HSF等协议，在此之前我们需要分析一下SpringCloud-Gateway filter机制。springcloud-gateway基于过滤器实现， 分为pre和post两种类型的过滤器，分别处理前置逻辑和后置逻辑。客户端将http请求到gateway，请求经过前置过滤器处理后转发到具体到业务服务中，收到业务服务的相应\n后，响应将通过后置过滤器处理后返回客户端，其中过滤器的处理顺序按照order排序（后置处理器倒序排序）;\n![scg-filter流程.png](..%2F..%2Fimg%2Fscg-filter%E6%B5%81%E7%A8%8B.png)\n\n对于http-http的请求代理来说，NettyRoutingFilter是作为filter chain的最后一个pre filter，它负责将请求转发到具体的业务服务中\n```java\npublic class NettyRoutingFilter implements GlobalFilter, Ordered {\n  \n    @Override\n    public int getOrder() {\n        return Ordered.LOWEST_PRECEDENCE;\n    }\n}\n```\nNettyWriteResponseFilter作为post filter chain的第一个filter，它负责将业务服务的响应返回给客户端\n```java\npublic class NettyWriteResponseFilter implements GlobalFilter, Ordered {\n\n  public static final int WRITE_RESPONSE_FILTER_ORDER = -1;\n\n  @Override\n  public int getOrder() {\n    return WRITE_RESPONSE_FILTER_ORDER;\n  }\n}\n```\n因此要实现http作为入口协议的多协议的泛化调用，我们需要在pre filter chain中添加一个filter代替NettyRoutingFilter，负责将http编码为其他协议的请求，同时在post filter chain中添加一个filter代替NettyWriteResponseFilter，负责将其他协议的响应转换为http响应。\n以dubbo的泛化调用为例，实现如下图所示：\n![scg泛化调用.png](..%2F..%2Fimg%2Fscg%E6%B3%9B%E5%8C%96%E8%B0%83%E7%94%A8.png)\n\n## 对企业级微服务网关的一些思考与未来的发展方向\n我们可以看到Spring Cloud Gateway可以很好地与其背后的Spring 社区和 SpringCloud 微服务体系有着很好的适配和集成，这与 Java 语言流行的原因如出一辙。如果一个企业主打的技术栈是Java 体系，那么基于SpringBoot/ SpringCloud 开发微服务，选型 SpringCloud Gateway 作为微服务网关，会有着得天独厚的优势。\n而在企业级微服务网关的探索上，我认为可以基于一下几点进行后续的演进：\n- 多协议入口网关建设：基于scg作为网关引擎更多使用场景为南北向的流量转发，但是在企业级网关建设中，往往需要支持多种协议的入口，如：dubbo、grpc以及私有协议等东西向流量的转发，因此需要在scg的基础上进行扩展，支持多种协议的入口。\n- 性能与稳定性建设: 优化Spring Cloud Gateway的性能，确保在高并发情况下的稳定性和低延迟。\n- 云原生支持: 加强与Kubernetes的集成，支持容器化和微服务自动化部署。\n- 云服务厂商整合: 提供对主要云服务厂商的无缝整合，如AWS, Azure, GCP等。","slug":"FuncDesign/SpringCloudGateway功能原理以及产品实践","published":1,"updated":"2024-01-25T11:31:41.355Z","_id":"clrhmasvz000hqzyw0dgj8oa1","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>近日，我司的项目总监让我们网关组的成员对企业级SpringCloudGateway网关相关内容进行整理，我正好借此机会沉淀一下这段时间以来对网关的开发实践以及思考。接下来我会按照以下内容进行介绍：</p>\n<ul>\n<li>介绍企业级微服务开发面临的痛点、需求、场景和应用</li>\n<li>介绍SpringCloud Gateway的核心原理</li>\n<li>介绍SpringCloud Gateway在网关高可用、动态路由、可扩展插件、接口调试、限流熔断、性能优化等方面的实践与优化</li>\n<li>介绍自己对企业级微服务网关的一些思考与未来的发展方向</li>\n</ul>\n<h2 id=\"微服务开发面临的问题\"><a href=\"#微服务开发面临的问题\" class=\"headerlink\" title=\"微服务开发面临的问题\"></a>微服务开发面临的问题</h2><ul>\n<li>服务需要重复开发通用功能，随着微服务规模的不断扩大，这些校验冗余逻辑将越来越沉重，一旦校验规则有了变化，不得不去每个应用修改这些逻辑，增加了维护成本</li>\n<li>随着时间的推移，可能需要改变系统目前的拆分方案，但如果客户端直接与微服务交互，强耦合，那么这种重构就很难实施</li>\n<li>服务协议不统一，系统服务使用webService、gRPC以及其他RPC等非RESTFUL接口标准协议进行开发的应用，协议不统一，需要兼容</li>\n<li>业务不断发展需求快速迭代，服务接口愈多，如何保护、监控、维护数以万计的接口</li>\n</ul>\n<h2 id=\"微服务网关的应用场景有哪些\"><a href=\"#微服务网关的应用场景有哪些\" class=\"headerlink\" title=\"微服务网关的应用场景有哪些\"></a>微服务网关的应用场景有哪些</h2><ul>\n<li>微服务网关</li>\n<li>业务系统集成</li>\n<li>企业能力开放</li>\n<li>接口生命周期管理</li>\n<li>架构治理</li>\n</ul>\n<h2 id=\"Spring-Cloud-Gateway的核心原理\"><a href=\"#Spring-Cloud-Gateway的核心原理\" class=\"headerlink\" title=\"Spring Cloud Gateway的核心原理\"></a>Spring Cloud Gateway的核心原理</h2><p>Spring Cloud Gateway是Spring官方基于Spring5.0、SpringBoot2.0和Project Reactor等技术开发的网关旨在为微服务框架提供一种简单而有效的 统一的API路由管理方式，统一访问接口。Spring Cloud Gateway作为Spring Cloud生态体系中的网关，目标是替代Netflix的Zuul，其不仅提供统一的路由方式，并且<br>基于Filter链的方式提供了网关基本的功能，例如：安全、监控/埋点和限流等等。</p>\n<p>Spring Cloud Gateway网关是一个内外衔接的数据交换组件，对内API接口的方式纳管所有要对外透出的微服务，作为出口端点，对外提供API接口给上游的Web应用、Mobile应用、外部微服务。网关核心在于将请求流量由上游发起经过网关到下游的微服务，在流量出入的过程中，网关在路由策略，协议转换、过滤、API组合等方面构建<br>网关的核心能力。</p>\n<p><img src=\"/../../img/scg%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86.png\" alt=\"scg核心原理.png\"></p>\n<h3 id=\"关键术语\"><a href=\"#关键术语\" class=\"headerlink\" title=\"关键术语\"></a>关键术语</h3><ul>\n<li>路由Route：即一套路由规则，是集URI、predicate、filter等属性的一个元数据类。</li>\n<li>断言Predicate：Java8函数断言，这里可以看做是满足什么条件的时候，route规则进行生效。允许开发者去定义匹配来自于Http Request中的任何信息，如请求头和参数。</li>\n<li>过滤器Filter：filter针对请求和响应进行增强、修改处理。filter可以认为是Spring Cloud Gateway最核心的模块，熔断、安全、逻辑执行、网络调用都是filter来完成的，其中又细分为gateway filter和global filter，区别在于是具体一个route规则生效还是所有route规则都生效。</li>\n</ul>\n<p><img src=\"/../../img/scg%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%862.png\" alt=\"scg核心原理2.png\"></p>\n<h2 id=\"CSB2-0云原生网关如何保障服务高可用\"><a href=\"#CSB2-0云原生网关如何保障服务高可用\" class=\"headerlink\" title=\"CSB2.0云原生网关如何保障服务高可用\"></a>CSB2.0云原生网关如何保障服务高可用</h2><p>项目术语：</p>\n<ul>\n<li>console: 网关配置控制台的云原生网关服务</li>\n<li>broker: 实际请求转发的云原生网关服务</li>\n<li>SLA:service-level agreement SLA的概念，对互联网公司来说就是服务可用性的一个保证。</li>\n<li>SLB:Server Load Balancing 指服务器负载均衡</li>\n</ul>\n<p>网关承载着所有服务的入口流量,要求具备高可用的能力。而通常实现高可用的主要手段是数据的冗余备份和服务 的失效转移,而这两种手段在网关的具备体现为：</p>\n<h3 id=\"集群的部署结构：\"><a href=\"#集群的部署结构：\" class=\"headerlink\" title=\"集群的部署结构：\"></a>集群的部署结构：</h3><p>CSB2.0云原生网关目前是基于Kubernetes容器编排平台进行部署，由云平台提供SLB作为流量到网关节点的负载均衡能力，网关根据服务器的性能进行集群的部署，这部分的SLA的能力由云平台负责保障。企业部署一个地方的网关节点集群，相当于单数据中心，也可根 据自己的需求部署多个网关节点集群，以达到多个数<br>据中心的容灾能力，这样部署就已经能保障网关的正常可用。如图所示：<br><img src=\"/../../img/scg%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2.png\" alt=\"scg集群部署.png\"></p>\n<h3 id=\"负载均衡的能力：\"><a href=\"#负载均衡的能力：\" class=\"headerlink\" title=\"负载均衡的能力：\"></a>负载均衡的能力：</h3><p>CSB2.0云原生网关实现了一套控制台即可对不同实例下的网关节点进行配置下发，并且同一个实例内的所有网关节点都是生效的。通常一个网关节点部署在一个服务器上，节点通过监听中间件(Redis、Nacos等)中的配置信息以此来获取、更新broker中的配置。此处的负载均衡是指broker节点对于下游服务的不同节点进行<br>请求转发，例如服务service1的请求会依次分发到服务下的节点node1、node2 和node3。如图所示：<br><img src=\"/../../img/scg-lb.png\" alt=\"scg-lb.png\"></p>\n<h3 id=\"健康检查\"><a href=\"#健康检查\" class=\"headerlink\" title=\"健康检查\"></a>健康检查</h3><p>请求到达服务节点前，尽管已经做了两层的负载，即请求到达云容器平台的负载均衡器以及broker对下游服务节点的负载。但是不管是网关broker节点，还是下游的某个节点发生了故障,请求还是有可能继续打到该节点上，这时候服务的最终结果仍是不可用。解决的方案是把所有有问题的的节点，包括broker节点、下游服务节点移出SLB的范围即可。因此需要解决的问题是如何知道broker节点以及下游服务的node节点是否正常？解决方案是对broker节点以及服务下游node节点进行健康检查：</p>\n<ul>\n<li>broker节点健康检查：CSB2.0云原生网关的部署依托于Kubernetes等容器编排平台，容器平台提供有多种对容器的健康检查方式，如容器探针、基于HTTP的探活检查</li>\n<li>下游服务健康检查：可对下游服务设置正确的返回结果(请求状态码、超时期限等),定时轮训将请求打到下游服务，若发现返回异常且满足从负载节点移除的条件，则将该节点移除。当下游服务节点恢复再加回负载列表。</li>\n</ul>\n<h3 id=\"节点恢复\"><a href=\"#节点恢复\" class=\"headerlink\" title=\"节点恢复\"></a>节点恢复</h3><p>CSB2.0云原生网关依托于Kubernetes云容器编排平台进行部署，节点的自恢复能力由云平台保证。</p>\n<h3 id=\"熔断与降级\"><a href=\"#熔断与降级\" class=\"headerlink\" title=\"熔断与降级\"></a>熔断与降级</h3><p>下游服务可能会出现一些超出预期的错误，这种错误有可能影响到系统的正常运行，比如请求引发的阻塞，这种请求阻塞有可能占用系统宝贵的资源，如：内存、线程、数据库等，消耗的资源有可能会拖垮整个系统，因此网关<br>需要判断服务不可用就切断对服务的访问,CSB2.0云原生网关底层采用阿里开源的sentinel框架作为流量控制、熔断降级、系统负载保护等多个纬度保障服务的稳定性。<br>当网关请求在一段时间内失败次数达到一定条件，就会触发熔断。目前CSB2.0支持的熔断条件有：<br>1、后端响应时间<br>2、后端错误码<br>3、触发熔断的请求阈值<br>降级策略目前支持Mock的形式返回响应参数，包括响应码、响应头、响应体。<br>当发生熔断后，判断请求是否恢复正常的条件，若连续请求成功次数达标，则恢复转发，服务自动转入监控期；否则，继续进入熔断期。如此反复。如下图：<br><img src=\"/../../img/%E7%86%94%E6%96%AD.png\" alt=\"熔断.png\"></p>\n<h3 id=\"接口重试\"><a href=\"#接口重试\" class=\"headerlink\" title=\"接口重试\"></a>接口重试</h3><p>虽然有很多机制保障接口的可访问，但是一个请求报错的原因有很多，偶然一次报错不一定是服务不可用，最简单的，第一次不行，应该再访问一次或几次，以确定结果。 请求重试可以说是网关对接口转发的基本要求，每个接口都应该可以设置重试次数。当请求失败后，网关应立即再次请求，直到拿到正常返回，或是达到重试阈值，再将结果返回给客户端。</p>\n<h2 id=\"CSB2-0云原生网关如何实现动态路由\"><a href=\"#CSB2-0云原生网关如何实现动态路由\" class=\"headerlink\" title=\"CSB2.0云原生网关如何实现动态路由\"></a>CSB2.0云原生网关如何实现动态路由</h2><p>为了应对网关路由各种复杂业务场景，要求网关在不重启服务的情况下，实现对API路由规则的动态配置，实时生效。SpringCloud提供有两种原生动态路由的方式：</p>\n<ul>\n<li>Spring Cloud DiscoveryClient原生支持：<br>Spring Cloud原生支持服务自动发现并且注册到路由之中，通过在application.properties中设置spring.cloud.gateway.discovery.locator.enabled=true, 同时确保DiscoveryClient的实体(Nacos，Netflix Eureka, Consul, 或 Zookeeper) 已经生效，即可完成服务的自动发现及注册。</li>\n<li>一种是基于Actuator API<br>SpringCloud Gateway提供有OpenAPI来建立路由信息，请求内容为JSON请求体，请求方法为POST 如路径：/gateway/routes/{id_route_to_create}</li>\n</ul>\n<p>以上路由扩展的自由度有限，第一种方式的服务都要依托与SpringCloud家族体系下，第二种无法满足高度定制化的需求。CSB2.0的做法是对SpringCloud Gateway做了底层修改，扩展了Spring Cloud Gateway底层路由加载机制，将Spring Cloud Gateway运行态时保存的路由关系，通过实现、继承加载自定义类的方式，对其进行动态路由修改，每当路由有变化时，再触发一次动态的修改。</p>\n<p>因此这种实现需要两种保障：<br>1、监听机制<br>2、实现自定义路由的核心类<br>Spring Cloud Gateway 核心加载机制如图所示：</p>\n<p><img src=\"/../../img/scg%E9%85%8D%E7%BD%AE%E7%9B%91%E5%90%AC.png\" alt=\"scg配置监听.png\"></p>\n<h2 id=\"CSB2-0云原生网关如何实现插件热插拔\"><a href=\"#CSB2-0云原生网关如何实现插件热插拔\" class=\"headerlink\" title=\"CSB2.0云原生网关如何实现插件热插拔\"></a>CSB2.0云原生网关如何实现插件热插拔</h2><p>CSB2.0插件热插拔还在排期开发，但可参考 <a href=\"https://juejin.cn/post/6963453967497953311\">https://juejin.cn/post/6963453967497953311</a></p>\n<h2 id=\"CSB2-0云原生网关如何实现接口调试\"><a href=\"#CSB2-0云原生网关如何实现接口调试\" class=\"headerlink\" title=\"CSB2.0云原生网关如何实现接口调试\"></a>CSB2.0云原生网关如何实现接口调试</h2><p>CSB2.0需要Console对Broker进行接口调试，但在专有云网络下存在【管控区】和【用户区】的区分，两者之间存在网络通信限制，具体表现为</p>\n<ul>\n<li>用户区访问管控区，可以通过 vip 打通</li>\n<li>管控区不允许访问用户区</li>\n</ul>\n<p>这里的“访问”在 TCP 层面可以理解为不允许主动建立连接，而 API 调试的需求从功能层面来看，的确是【管控区】访问【用户区】，在无法主动建立连接的情况下，需要设计网络反向访问方案。</p>\n<p>本方案提出一个设计，由【用户区】的 broker 主动建立 TCP 长连接到【管控区】的 console，借助于 TCP 双工通信的特性，console 可以通过持续维护 broker 的连接，从而完成与 broker 的通信。<br>整体设计如图所示：<br><img src=\"/../../img/%E6%8E%A5%E5%8F%A3%E8%B0%83%E8%AF%95%E6%95%B4%E4%BD%93%E6%96%B9%E6%A1%88.png\" alt=\"接口调试整体方案.png\"></p>\n<h3 id=\"VIP连接方案\"><a href=\"#VIP连接方案\" class=\"headerlink\" title=\"VIP连接方案\"></a>VIP连接方案</h3><p>长连接实现方案使用 WebSocket实现 console 与 broker 的交互。但是在实际部署中，【用户区】的 broker 经过了一个 VIP 连接到【管控区】的 console，由于 VIP 随机负载均衡的特性的，可能会出现部分 console 没有持有长连接的问题，当这些 console 节点接受请求之后，将会无法处理。如图所示：</p>\n<p><img src=\"/../../img/scg-vip%E9%97%AE%E9%A2%98.png\" alt=\"scg-vip问题.png\"></p>\n<p>为了解决上述问题，如下图引入心跳机制。broker 通过定时任务向 VIP 发送建连请求，console 在接受到请求之后，需要返回 console ip，broker 在接收到 console ip 的响应之后，<br>需要比对 console ip 与本地的 console ip 缓存池，从而判断是否是一条新的连接</p>\n<ul>\n<li>从连接层面来看，broker 与 vip 建立了重复的连接，但实际上连接到了不同的 console 实例</li>\n<li>轮询机制保障了最终能够与所有 console 实例建立连接</li>\n<li>轮询机制兼容了 console 动态扩缩容的场景</li>\n<li>轮询机制兼容了连接断开的场景</li>\n</ul>\n<p><img src=\"/../../img/%E6%8E%A5%E5%8F%A3%E8%B0%83%E8%AF%95%E6%9C%80%E7%BB%88%E8%AE%BE%E8%AE%A1.png\" alt=\"接口调试最终设计.png\"></p>\n<h2 id=\"CSB2-0云原生网关如何实现多协议转换\"><a href=\"#CSB2-0云原生网关如何实现多协议转换\" class=\"headerlink\" title=\"CSB2.0云原生网关如何实现多协议转换\"></a>CSB2.0云原生网关如何实现多协议转换</h2><p>在SpringCloud-Gateway网关中扩展多种协议如：Grpc、WebService、Dubbo、HSF等协议，在此之前我们需要分析一下SpringCloud-Gateway filter机制。springcloud-gateway基于过滤器实现， 分为pre和post两种类型的过滤器，分别处理前置逻辑和后置逻辑。客户端将http请求到gateway，请求经过前置过滤器处理后转发到具体到业务服务中，收到业务服务的相应<br>后，响应将通过后置过滤器处理后返回客户端，其中过滤器的处理顺序按照order排序（后置处理器倒序排序）;<br><img src=\"/../../img/scg-filter%E6%B5%81%E7%A8%8B.png\" alt=\"scg-filter流程.png\"></p>\n<p>对于http-http的请求代理来说，NettyRoutingFilter是作为filter chain的最后一个pre filter，它负责将请求转发到具体的业务服务中</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NettyRoutingFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">GlobalFilter</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Ordered</span> <span class=\"token punctuation\">{</span>\n  \n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Ordered</span><span class=\"token punctuation\">.</span>LOWEST_PRECEDENCE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>NettyWriteResponseFilter作为post filter chain的第一个filter，它负责将业务服务的响应返回给客户端</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NettyWriteResponseFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">GlobalFilter</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Ordered</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> WRITE_RESPONSE_FILTER_ORDER <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> WRITE_RESPONSE_FILTER_ORDER<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>因此要实现http作为入口协议的多协议的泛化调用，我们需要在pre filter chain中添加一个filter代替NettyRoutingFilter，负责将http编码为其他协议的请求，同时在post filter chain中添加一个filter代替NettyWriteResponseFilter，负责将其他协议的响应转换为http响应。<br>以dubbo的泛化调用为例，实现如下图所示：<br><img src=\"/../../img/scg%E6%B3%9B%E5%8C%96%E8%B0%83%E7%94%A8.png\" alt=\"scg泛化调用.png\"></p>\n<h2 id=\"对企业级微服务网关的一些思考与未来的发展方向\"><a href=\"#对企业级微服务网关的一些思考与未来的发展方向\" class=\"headerlink\" title=\"对企业级微服务网关的一些思考与未来的发展方向\"></a>对企业级微服务网关的一些思考与未来的发展方向</h2><p>我们可以看到Spring Cloud Gateway可以很好地与其背后的Spring 社区和 SpringCloud 微服务体系有着很好的适配和集成，这与 Java 语言流行的原因如出一辙。如果一个企业主打的技术栈是Java 体系，那么基于SpringBoot/ SpringCloud 开发微服务，选型 SpringCloud Gateway 作为微服务网关，会有着得天独厚的优势。<br>而在企业级微服务网关的探索上，我认为可以基于一下几点进行后续的演进：</p>\n<ul>\n<li>多协议入口网关建设：基于scg作为网关引擎更多使用场景为南北向的流量转发，但是在企业级网关建设中，往往需要支持多种协议的入口，如：dubbo、grpc以及私有协议等东西向流量的转发，因此需要在scg的基础上进行扩展，支持多种协议的入口。</li>\n<li>性能与稳定性建设: 优化Spring Cloud Gateway的性能，确保在高并发情况下的稳定性和低延迟。</li>\n<li>云原生支持: 加强与Kubernetes的集成，支持容器化和微服务自动化部署。</li>\n<li>云服务厂商整合: 提供对主要云服务厂商的无缝整合，如AWS, Azure, GCP等。</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>近日，我司的项目总监让我们网关组的成员对企业级SpringCloudGateway网关相关内容进行整理，我正好借此机会沉淀一下这段时间以来对网关的开发实践以及思考。接下来我会按照以下内容进行介绍：</p>\n<ul>\n<li>介绍企业级微服务开发面临的痛点、需求、场景和应用</li>\n<li>介绍SpringCloud Gateway的核心原理</li>\n<li>介绍SpringCloud Gateway在网关高可用、动态路由、可扩展插件、接口调试、限流熔断、性能优化等方面的实践与优化</li>\n<li>介绍自己对企业级微服务网关的一些思考与未来的发展方向</li>\n</ul>\n<h2 id=\"微服务开发面临的问题\"><a href=\"#微服务开发面临的问题\" class=\"headerlink\" title=\"微服务开发面临的问题\"></a>微服务开发面临的问题</h2><ul>\n<li>服务需要重复开发通用功能，随着微服务规模的不断扩大，这些校验冗余逻辑将越来越沉重，一旦校验规则有了变化，不得不去每个应用修改这些逻辑，增加了维护成本</li>\n<li>随着时间的推移，可能需要改变系统目前的拆分方案，但如果客户端直接与微服务交互，强耦合，那么这种重构就很难实施</li>\n<li>服务协议不统一，系统服务使用webService、gRPC以及其他RPC等非RESTFUL接口标准协议进行开发的应用，协议不统一，需要兼容</li>\n<li>业务不断发展需求快速迭代，服务接口愈多，如何保护、监控、维护数以万计的接口</li>\n</ul>\n<h2 id=\"微服务网关的应用场景有哪些\"><a href=\"#微服务网关的应用场景有哪些\" class=\"headerlink\" title=\"微服务网关的应用场景有哪些\"></a>微服务网关的应用场景有哪些</h2><ul>\n<li>微服务网关</li>\n<li>业务系统集成</li>\n<li>企业能力开放</li>\n<li>接口生命周期管理</li>\n<li>架构治理</li>\n</ul>\n<h2 id=\"Spring-Cloud-Gateway的核心原理\"><a href=\"#Spring-Cloud-Gateway的核心原理\" class=\"headerlink\" title=\"Spring Cloud Gateway的核心原理\"></a>Spring Cloud Gateway的核心原理</h2><p>Spring Cloud Gateway是Spring官方基于Spring5.0、SpringBoot2.0和Project Reactor等技术开发的网关旨在为微服务框架提供一种简单而有效的 统一的API路由管理方式，统一访问接口。Spring Cloud Gateway作为Spring Cloud生态体系中的网关，目标是替代Netflix的Zuul，其不仅提供统一的路由方式，并且<br>基于Filter链的方式提供了网关基本的功能，例如：安全、监控&#x2F;埋点和限流等等。</p>\n<p>Spring Cloud Gateway网关是一个内外衔接的数据交换组件，对内API接口的方式纳管所有要对外透出的微服务，作为出口端点，对外提供API接口给上游的Web应用、Mobile应用、外部微服务。网关核心在于将请求流量由上游发起经过网关到下游的微服务，在流量出入的过程中，网关在路由策略，协议转换、过滤、API组合等方面构建<br>网关的核心能力。</p>\n<p><img src=\"/../../img/scg%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86.png\" alt=\"scg核心原理.png\"></p>\n<h3 id=\"关键术语\"><a href=\"#关键术语\" class=\"headerlink\" title=\"关键术语\"></a>关键术语</h3><ul>\n<li>路由Route：即一套路由规则，是集URI、predicate、filter等属性的一个元数据类。</li>\n<li>断言Predicate：Java8函数断言，这里可以看做是满足什么条件的时候，route规则进行生效。允许开发者去定义匹配来自于Http Request中的任何信息，如请求头和参数。</li>\n<li>过滤器Filter：filter针对请求和响应进行增强、修改处理。filter可以认为是Spring Cloud Gateway最核心的模块，熔断、安全、逻辑执行、网络调用都是filter来完成的，其中又细分为gateway filter和global filter，区别在于是具体一个route规则生效还是所有route规则都生效。</li>\n</ul>\n<p><img src=\"/../../img/scg%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%862.png\" alt=\"scg核心原理2.png\"></p>\n<h2 id=\"CSB2-0云原生网关如何保障服务高可用\"><a href=\"#CSB2-0云原生网关如何保障服务高可用\" class=\"headerlink\" title=\"CSB2.0云原生网关如何保障服务高可用\"></a>CSB2.0云原生网关如何保障服务高可用</h2><p>项目术语：</p>\n<ul>\n<li>console: 网关配置控制台的云原生网关服务</li>\n<li>broker: 实际请求转发的云原生网关服务</li>\n<li>SLA:service-level agreement SLA的概念，对互联网公司来说就是服务可用性的一个保证。</li>\n<li>SLB:Server Load Balancing 指服务器负载均衡</li>\n</ul>\n<p>网关承载着所有服务的入口流量,要求具备高可用的能力。而通常实现高可用的主要手段是数据的冗余备份和服务 的失效转移,而这两种手段在网关的具备体现为：</p>\n<h3 id=\"集群的部署结构：\"><a href=\"#集群的部署结构：\" class=\"headerlink\" title=\"集群的部署结构：\"></a>集群的部署结构：</h3><p>CSB2.0云原生网关目前是基于Kubernetes容器编排平台进行部署，由云平台提供SLB作为流量到网关节点的负载均衡能力，网关根据服务器的性能进行集群的部署，这部分的SLA的能力由云平台负责保障。企业部署一个地方的网关节点集群，相当于单数据中心，也可根 据自己的需求部署多个网关节点集群，以达到多个数<br>据中心的容灾能力，这样部署就已经能保障网关的正常可用。如图所示：<br><img src=\"/../../img/scg%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2.png\" alt=\"scg集群部署.png\"></p>\n<h3 id=\"负载均衡的能力：\"><a href=\"#负载均衡的能力：\" class=\"headerlink\" title=\"负载均衡的能力：\"></a>负载均衡的能力：</h3><p>CSB2.0云原生网关实现了一套控制台即可对不同实例下的网关节点进行配置下发，并且同一个实例内的所有网关节点都是生效的。通常一个网关节点部署在一个服务器上，节点通过监听中间件(Redis、Nacos等)中的配置信息以此来获取、更新broker中的配置。此处的负载均衡是指broker节点对于下游服务的不同节点进行<br>请求转发，例如服务service1的请求会依次分发到服务下的节点node1、node2 和node3。如图所示：<br><img src=\"/../../img/scg-lb.png\" alt=\"scg-lb.png\"></p>\n<h3 id=\"健康检查\"><a href=\"#健康检查\" class=\"headerlink\" title=\"健康检查\"></a>健康检查</h3><p>请求到达服务节点前，尽管已经做了两层的负载，即请求到达云容器平台的负载均衡器以及broker对下游服务节点的负载。但是不管是网关broker节点，还是下游的某个节点发生了故障,请求还是有可能继续打到该节点上，这时候服务的最终结果仍是不可用。解决的方案是把所有有问题的的节点，包括broker节点、下游服务节点移出SLB的范围即可。因此需要解决的问题是如何知道broker节点以及下游服务的node节点是否正常？解决方案是对broker节点以及服务下游node节点进行健康检查：</p>\n<ul>\n<li>broker节点健康检查：CSB2.0云原生网关的部署依托于Kubernetes等容器编排平台，容器平台提供有多种对容器的健康检查方式，如容器探针、基于HTTP的探活检查</li>\n<li>下游服务健康检查：可对下游服务设置正确的返回结果(请求状态码、超时期限等),定时轮训将请求打到下游服务，若发现返回异常且满足从负载节点移除的条件，则将该节点移除。当下游服务节点恢复再加回负载列表。</li>\n</ul>\n<h3 id=\"节点恢复\"><a href=\"#节点恢复\" class=\"headerlink\" title=\"节点恢复\"></a>节点恢复</h3><p>CSB2.0云原生网关依托于Kubernetes云容器编排平台进行部署，节点的自恢复能力由云平台保证。</p>\n<h3 id=\"熔断与降级\"><a href=\"#熔断与降级\" class=\"headerlink\" title=\"熔断与降级\"></a>熔断与降级</h3><p>下游服务可能会出现一些超出预期的错误，这种错误有可能影响到系统的正常运行，比如请求引发的阻塞，这种请求阻塞有可能占用系统宝贵的资源，如：内存、线程、数据库等，消耗的资源有可能会拖垮整个系统，因此网关<br>需要判断服务不可用就切断对服务的访问,CSB2.0云原生网关底层采用阿里开源的sentinel框架作为流量控制、熔断降级、系统负载保护等多个纬度保障服务的稳定性。<br>当网关请求在一段时间内失败次数达到一定条件，就会触发熔断。目前CSB2.0支持的熔断条件有：<br>1、后端响应时间<br>2、后端错误码<br>3、触发熔断的请求阈值<br>降级策略目前支持Mock的形式返回响应参数，包括响应码、响应头、响应体。<br>当发生熔断后，判断请求是否恢复正常的条件，若连续请求成功次数达标，则恢复转发，服务自动转入监控期；否则，继续进入熔断期。如此反复。如下图：<br><img src=\"/../../img/%E7%86%94%E6%96%AD.png\" alt=\"熔断.png\"></p>\n<h3 id=\"接口重试\"><a href=\"#接口重试\" class=\"headerlink\" title=\"接口重试\"></a>接口重试</h3><p>虽然有很多机制保障接口的可访问，但是一个请求报错的原因有很多，偶然一次报错不一定是服务不可用，最简单的，第一次不行，应该再访问一次或几次，以确定结果。 请求重试可以说是网关对接口转发的基本要求，每个接口都应该可以设置重试次数。当请求失败后，网关应立即再次请求，直到拿到正常返回，或是达到重试阈值，再将结果返回给客户端。</p>\n<h2 id=\"CSB2-0云原生网关如何实现动态路由\"><a href=\"#CSB2-0云原生网关如何实现动态路由\" class=\"headerlink\" title=\"CSB2.0云原生网关如何实现动态路由\"></a>CSB2.0云原生网关如何实现动态路由</h2><p>为了应对网关路由各种复杂业务场景，要求网关在不重启服务的情况下，实现对API路由规则的动态配置，实时生效。SpringCloud提供有两种原生动态路由的方式：</p>\n<ul>\n<li>Spring Cloud DiscoveryClient原生支持：<br>Spring Cloud原生支持服务自动发现并且注册到路由之中，通过在application.properties中设置spring.cloud.gateway.discovery.locator.enabled&#x3D;true, 同时确保DiscoveryClient的实体(Nacos，Netflix Eureka, Consul, 或 Zookeeper) 已经生效，即可完成服务的自动发现及注册。</li>\n<li>一种是基于Actuator API<br>SpringCloud Gateway提供有OpenAPI来建立路由信息，请求内容为JSON请求体，请求方法为POST 如路径：&#x2F;gateway&#x2F;routes&#x2F;{id_route_to_create}</li>\n</ul>\n<p>以上路由扩展的自由度有限，第一种方式的服务都要依托与SpringCloud家族体系下，第二种无法满足高度定制化的需求。CSB2.0的做法是对SpringCloud Gateway做了底层修改，扩展了Spring Cloud Gateway底层路由加载机制，将Spring Cloud Gateway运行态时保存的路由关系，通过实现、继承加载自定义类的方式，对其进行动态路由修改，每当路由有变化时，再触发一次动态的修改。</p>\n<p>因此这种实现需要两种保障：<br>1、监听机制<br>2、实现自定义路由的核心类<br>Spring Cloud Gateway 核心加载机制如图所示：</p>\n<p><img src=\"/../../img/scg%E9%85%8D%E7%BD%AE%E7%9B%91%E5%90%AC.png\" alt=\"scg配置监听.png\"></p>\n<h2 id=\"CSB2-0云原生网关如何实现插件热插拔\"><a href=\"#CSB2-0云原生网关如何实现插件热插拔\" class=\"headerlink\" title=\"CSB2.0云原生网关如何实现插件热插拔\"></a>CSB2.0云原生网关如何实现插件热插拔</h2><p>CSB2.0插件热插拔还在排期开发，但可参考 <a href=\"https://juejin.cn/post/6963453967497953311\">https://juejin.cn/post/6963453967497953311</a></p>\n<h2 id=\"CSB2-0云原生网关如何实现接口调试\"><a href=\"#CSB2-0云原生网关如何实现接口调试\" class=\"headerlink\" title=\"CSB2.0云原生网关如何实现接口调试\"></a>CSB2.0云原生网关如何实现接口调试</h2><p>CSB2.0需要Console对Broker进行接口调试，但在专有云网络下存在【管控区】和【用户区】的区分，两者之间存在网络通信限制，具体表现为</p>\n<ul>\n<li>用户区访问管控区，可以通过 vip 打通</li>\n<li>管控区不允许访问用户区</li>\n</ul>\n<p>这里的“访问”在 TCP 层面可以理解为不允许主动建立连接，而 API 调试的需求从功能层面来看，的确是【管控区】访问【用户区】，在无法主动建立连接的情况下，需要设计网络反向访问方案。</p>\n<p>本方案提出一个设计，由【用户区】的 broker 主动建立 TCP 长连接到【管控区】的 console，借助于 TCP 双工通信的特性，console 可以通过持续维护 broker 的连接，从而完成与 broker 的通信。<br>整体设计如图所示：<br><img src=\"/../../img/%E6%8E%A5%E5%8F%A3%E8%B0%83%E8%AF%95%E6%95%B4%E4%BD%93%E6%96%B9%E6%A1%88.png\" alt=\"接口调试整体方案.png\"></p>\n<h3 id=\"VIP连接方案\"><a href=\"#VIP连接方案\" class=\"headerlink\" title=\"VIP连接方案\"></a>VIP连接方案</h3><p>长连接实现方案使用 WebSocket实现 console 与 broker 的交互。但是在实际部署中，【用户区】的 broker 经过了一个 VIP 连接到【管控区】的 console，由于 VIP 随机负载均衡的特性的，可能会出现部分 console 没有持有长连接的问题，当这些 console 节点接受请求之后，将会无法处理。如图所示：</p>\n<p><img src=\"/../../img/scg-vip%E9%97%AE%E9%A2%98.png\" alt=\"scg-vip问题.png\"></p>\n<p>为了解决上述问题，如下图引入心跳机制。broker 通过定时任务向 VIP 发送建连请求，console 在接受到请求之后，需要返回 console ip，broker 在接收到 console ip 的响应之后，<br>需要比对 console ip 与本地的 console ip 缓存池，从而判断是否是一条新的连接</p>\n<ul>\n<li>从连接层面来看，broker 与 vip 建立了重复的连接，但实际上连接到了不同的 console 实例</li>\n<li>轮询机制保障了最终能够与所有 console 实例建立连接</li>\n<li>轮询机制兼容了 console 动态扩缩容的场景</li>\n<li>轮询机制兼容了连接断开的场景</li>\n</ul>\n<p><img src=\"/../../img/%E6%8E%A5%E5%8F%A3%E8%B0%83%E8%AF%95%E6%9C%80%E7%BB%88%E8%AE%BE%E8%AE%A1.png\" alt=\"接口调试最终设计.png\"></p>\n<h2 id=\"CSB2-0云原生网关如何实现多协议转换\"><a href=\"#CSB2-0云原生网关如何实现多协议转换\" class=\"headerlink\" title=\"CSB2.0云原生网关如何实现多协议转换\"></a>CSB2.0云原生网关如何实现多协议转换</h2><p>在SpringCloud-Gateway网关中扩展多种协议如：Grpc、WebService、Dubbo、HSF等协议，在此之前我们需要分析一下SpringCloud-Gateway filter机制。springcloud-gateway基于过滤器实现， 分为pre和post两种类型的过滤器，分别处理前置逻辑和后置逻辑。客户端将http请求到gateway，请求经过前置过滤器处理后转发到具体到业务服务中，收到业务服务的相应<br>后，响应将通过后置过滤器处理后返回客户端，其中过滤器的处理顺序按照order排序（后置处理器倒序排序）;<br><img src=\"/../../img/scg-filter%E6%B5%81%E7%A8%8B.png\" alt=\"scg-filter流程.png\"></p>\n<p>对于http-http的请求代理来说，NettyRoutingFilter是作为filter chain的最后一个pre filter，它负责将请求转发到具体的业务服务中</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NettyRoutingFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">GlobalFilter</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Ordered</span> <span class=\"token punctuation\">&#123;</span>\n  \n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Ordered</span><span class=\"token punctuation\">.</span>LOWEST_PRECEDENCE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>NettyWriteResponseFilter作为post filter chain的第一个filter，它负责将业务服务的响应返回给客户端</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NettyWriteResponseFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">GlobalFilter</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Ordered</span> <span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> WRITE_RESPONSE_FILTER_ORDER <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> WRITE_RESPONSE_FILTER_ORDER<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>因此要实现http作为入口协议的多协议的泛化调用，我们需要在pre filter chain中添加一个filter代替NettyRoutingFilter，负责将http编码为其他协议的请求，同时在post filter chain中添加一个filter代替NettyWriteResponseFilter，负责将其他协议的响应转换为http响应。<br>以dubbo的泛化调用为例，实现如下图所示：<br><img src=\"/../../img/scg%E6%B3%9B%E5%8C%96%E8%B0%83%E7%94%A8.png\" alt=\"scg泛化调用.png\"></p>\n<h2 id=\"对企业级微服务网关的一些思考与未来的发展方向\"><a href=\"#对企业级微服务网关的一些思考与未来的发展方向\" class=\"headerlink\" title=\"对企业级微服务网关的一些思考与未来的发展方向\"></a>对企业级微服务网关的一些思考与未来的发展方向</h2><p>我们可以看到Spring Cloud Gateway可以很好地与其背后的Spring 社区和 SpringCloud 微服务体系有着很好的适配和集成，这与 Java 语言流行的原因如出一辙。如果一个企业主打的技术栈是Java 体系，那么基于SpringBoot&#x2F; SpringCloud 开发微服务，选型 SpringCloud Gateway 作为微服务网关，会有着得天独厚的优势。<br>而在企业级微服务网关的探索上，我认为可以基于一下几点进行后续的演进：</p>\n<ul>\n<li>多协议入口网关建设：基于scg作为网关引擎更多使用场景为南北向的流量转发，但是在企业级网关建设中，往往需要支持多种协议的入口，如：dubbo、grpc以及私有协议等东西向流量的转发，因此需要在scg的基础上进行扩展，支持多种协议的入口。</li>\n<li>性能与稳定性建设: 优化Spring Cloud Gateway的性能，确保在高并发情况下的稳定性和低延迟。</li>\n<li>云原生支持: 加强与Kubernetes的集成，支持容器化和微服务自动化部署。</li>\n<li>云服务厂商整合: 提供对主要云服务厂商的无缝整合，如AWS, Azure, GCP等。</li>\n</ul>\n"},{"title":"全能力网关建设","date":"2023-08-24T16:01:00.000Z","_content":"","source":"_posts/FuncDesign/全能力网关建设.md","raw":"---\ntitle: 全能力网关建设\ndate: 2023-08-25 00:01:00\ntags:\n  - Envoy\n  - Hango\n  - 云原生网关\ncategories: 云原生网关\n---","slug":"FuncDesign/全能力网关建设","published":1,"updated":"2024-01-25T11:59:52.000Z","_id":"clrhmavyn000mqzyw8hhp9ahd","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":""},{"title":"基于Jmeter的Operator改造","date":"2023-07-13T16:01:00.000Z","_content":"","source":"_posts/FuncDesign/基于Jmeter的Operator改造.md","raw":"---\ntitle: 基于Jmeter的Operator改造\ndate: 2023-07-14 00:01:00\ntags:\n  - Jmeter\n  - Operator\n  - Kubernetes\ncategories: Kubernetes\n---","slug":"FuncDesign/基于Jmeter的Operator改造","published":1,"updated":"2024-01-25T11:59:52.038Z","_id":"clrhmaz1d000nqzyw3w5s60y7","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":""},{"title":"开源项目Hango网关项目设计与实践","date":"2023-07-13T16:01:00.000Z","_content":"\n## 前言\nHango 是由网易公司开源的一个基于Envoy构建的高性能、可扩展功能丰富的云原生API网关，本文将从Hango的诞生背景、架构设计、功能特性、大规模落地等方面进行介绍。\n\n## 诞生背景\nEnvoy起初在网易轻舟是作为服务网格Istio的数据面使用，承担了东西向、南北向全部数据流量的代理、治理与观测职责。随着服务网格在网易内部大规模落地，我们对 Envoy 的功能、性能、扩展性、可观测性等多方面有了全面的研究与实践，也深刻感受到 Envoy 优质的内在品质，及其在云原生时代巨大的发展潜力。\n于是我们开始尝试基于 Envoy 建设网易的新一代 API 网关，目标是替换网易内部较多业务采用 Java 异步化网关、 Kong 网关，并能够满足业务逐步进入云原生时代的南北向流量治理需求。从结果上看，选型 Envoy 不仅让我们顺利实现了网易 API 网关全面升级，还推动了网易云原生、微服务技术栈整体的统一与向前发展。\n\n## 架构设计\nHango 基于云原生理念构建，数据面基于Envoy进行扩展，增强插件链，提供 Rider 模块用于自定义插件扩展；控制面组件包括 Slime，Istio，API Plane以及Portal模块。其架构图如下所示：\n\n![hango设计架构.png](..%2F..%2Fimg%2Fhango%E8%AE%BE%E8%AE%A1%E6%9E%B6%E6%9E%84.png)\n\n组件说明：\n- Envoy: Hango网关的数据面流量入口，通过XDS模式获取Istiod配置\n- Istiod: Hango网关对接Envoy的适配层，监听指定CRD并通过XDS向Envoy下发配置\n- Slime: 提供指定Slime CRD，以支持Hango支持插件、限流、服务发现等特性\n- Hango Portal: Hango对接前端界面的Web层模块，存储Hango业务数据\n- Hango Api-plane: 对接Hango Portal，管理Hango CR声明周期\n- Hango UI: Hango前端界面，提供Hango配置、观测、调试等功能\n\nHango UI将Envoy的功能进行了可视化的配置，与Hango Portal进行交互，Hango Portal将业务信息存于DB，并调用Hango Api-plane生成服务路由相应的CR，Istiod在Watch到API-plane生成的CR会通过XDS协议下发给数据面Envoy，Envoy将配置信息应用到数据面。\n对于插件的能力的扩展，我们使用自定义的CRD(EnvoyPlugin)来承载插件信息，Slime模块监听Slime CRD，将Slime CRD转换为EnvoyFilter的插件配置对数据面envoy进行扩展。\n\n下面是Hango的数据流向：\n\n\n## 功能特性\n\n### 虚拟网关\n\n#### 虚拟网关\n在L7层通用网关中，一组Envoy网关集群可以表现出不同的形态，如API网关、L7负载均衡、ingress。网关集群在部署时已确定的一组网关实例，称之为网关，不同表现形态称之为虚拟网关。 依托于网关，可通过不同场景进行配置。网关数据层采用Envoy作为底层代理，通过不同的Listener配置开放Envoy不同的监听端口，对应不同形态的虚拟网关。在L7层通用网关中，一组Envoy网关集群可以表现出不同的形态，如API网关、L7负载均衡、ingress。网关集群在部署时已确定的一组网关实例，称之为网关，不同表现形态称之为虚拟网关。 依托于网关，可通过不同场景进行配置。网关数据层采用Envoy作为底层代理，通过不同的Listener配置开放Envoy不同的监听端口，对应不同形态的虚拟网关。\n\n以下为虚拟网关的功能架构图：\n![虚拟网关功能架构图.png](..%2F..%2Fimg%2F%E8%99%9A%E6%8B%9F%E7%BD%91%E5%85%B3%E5%8A%9F%E8%83%BD%E6%9E%B6%E6%9E%84%E5%9B%BE.png)\n\n一组Envoy网关实例部署在Kubernetes集群中，用户通过配置服务在网关生成Listener(虚拟网关)，Listener(虚拟网关)监听对应的服务，当有请求访问该监听端口时，进行流量转发。\n\n#### Kubernetes Gateway\nGateway API作为Kubernetes入口网关的最新成果，得到行业的广泛支持。它代表了Ingress功能的一个父集，定义了一系列以Gateway资源为中心的资源集合。与Ingress类似，Kubernetes 中没有内置Gateway API默认实现，需要依赖基础设施商提供Gateway Class。 \n\n官方文档见：https://gateway-api.sigs.k8s.io\n\n作为Ingress资源的升级，Gateway API提供了一系列治理能力更强、表达性更优、可扩展性更高的资源集合，其中GatewayClass、Gateway和HTTPRoute已经进入Beta阶段，其他CRD还处于实验阶段。 此处只需要关注Gateway和xRoute资源，详细的API定义可参考Gateway API\n\n以下图片为Gateway API的相关组件：\n![Gateway API相关组件.png](..%2F..%2Fimg%2FGateway%20API%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6.png)\n\n- GatewayClass：GatewayClass是由基础架构提供商定义的集群范围的资源，该资源用于指定对应的Gateway Controller。目前已实现的Gateway Controller的产品包括Envoy Gateway（beta）、Istio（beta）、Kong（beta）等，详情可参考Gateway Controller\n\n- Gateway： 核心网关资源，主要规范了以下三部分内容：\n\n    - Listeners：网关监听器列表，每个监听器都代表了一组主机名、端口、协议配置。\n\n    - GatewayClassName：用于指定生效的GatewayClass。\n\n    - Address：定义网关代理的请求地址。\n\n- xRoute： 代表需要不同特性协议的路由资源，每种协议路由都有特定的语义，这种模式具有较好的扩展性，例如可以定义DubboRoute、gRPCRoute等。每种资源都定义了基本的匹配、过滤和路由规则，这些规则只有被绑定到相应的Gateway资源上才可以生效。目前只有HTTPRoute进入Beta阶段。\n\n以下为Kubernetes Gateway在hango的功能实现架构图，Gateway API在控制台被创建之后会被开源的Istio控制面将Gateway API对象转换为Istio API对象，最终下发至Envoy数据面。 hango在此基础之上对HttpRoute做了插件上的增强，提供了更多丰富的插件能力。\n\n![Kubernetes Gateway技术架构图.png](..%2F..%2Fimg%2FKubernetes%20Gateway%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E5%9B%BE.png)\n\n#### Kubernetes Ingress\nIngress是K8s生态中定义流量入口的一种资源，但其只是个规则，仅创建Ingress资源本身是没有任何效果的，想让其生效，就需要有一个Ingress Controller去监听K8s中的ingress资源， 并对这些资源进行规则解析，转换为其数据面中的代理规则，并由数据面来进行流量转发。当前K8s默认的Ingress Controller实现是Nginx，本次方案描述如何将通用网关纳管Ingress的流量。\n\nIngress资源是对集群中服务的外部访问进行管理的 API 对象，可以将集群内部服务通过HTTP或HTTPS暴露出去，流量路由规则由Ingress资源定义。\n![Ingress.png](..%2F..%2Fimg%2FIngress.png)\n\n目前只支持Ingress v1版本流量纳管，v1版本的Ingress资源定义如下：\n```yaml\n##ingress v1\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n   annotations:\n      kubectl.kubernetes.io/last-applied-configuration: |\n         {\"apiVersion\":\"networking.k8s.io/v1\",\"kind\":\"Ingress\",\"metadata\":{\"annotations\":{\"kubernetes.io/ingress.class\":\"istio\"},\"name\":\"test\",\"namespace\":\"hango-system\"},\"spec\":{\"ingressClassName\":\"istio\",\"rules\":[{\"http\":{\"paths\":[{\"backend\":{\"service\":{\"name\":\"istio-e2e-app\",\"port\":{\"number\":80}}},\"path\":\"/get\",\"pathType\":\"Prefix\"}]}}]}}\n      kubernetes.io/ingress.class: hango\n      skiff.netease.com/project: hango\n   creationTimestamp: \"2023-07-14T07:33:17Z\"\n   generation: 7\n   name: test\n   namespace: hango-system\n   resourceVersion: \"9320368\"\n   labels:\n     istio.io/rev: gw-1.12\n   uid: 1ba7e839-da43-4c00-afeb-85d173911003\nspec:\n   rules:\n     - http:\n        paths:\n          - backend:\n              service:\n              name: istio-e2e-app\n              port:\n              number: 80\n            path: /get\n            pathType: Prefix\nstatus:\n  loadBalancer:\n    ingress:\n      - ip: xxx.xxx.xxx.xxx\n```\nIngress v1版本的资源定义中，主要包含以下几个重要注解：\n- istio.io/rev：指定网关版本，目前只支持gw-1.12\n- kubernetes.io/ingress.class：指定ingress的class，目前固定为hango\n- skiff.netease.com/project：指定项目ID，目前固定为hango\n- spec.rules：指定ingress的路由规则，目前只支持http协议\n- status.loadBalancer.ingress：指定ingress的访问地址\n### 服务发现\n目前Istio1.8之后只保留了对接Kubernetes注册中心的逻辑，但是在实际生产实践中，我们发现大量用户只是将Kubernetes作为部署和管理的平台，服务信息依旧注册在第三方服务注册中心，如Nacos和Zookeeper，因此我们必须解决对接第三方注册中心的问题，以满足用户的需求。\n我们采用的方案是网易开源的slime组件作为服务发现的适配层，slime组件支持对接多种第三方注册中心，如Nacos、Zookeeper、Eureka、Consul等，同时支持对接Kubernetes注册中心，将服务发现的逻辑统一抽象为slime CRD，通过slime CRD将服务发现的逻辑下发至Envoy数据面。\n\nslime组件的相关介绍见：[Slime化解服务网格多注册中心兼容之痛](https://slime-io.github.io/blog/Slime%E5%8C%96%E8%A7%A3%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC%E5%A4%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%85%BC%E5%AE%B9%E4%B9%8B%E7%97%9B/)\n\n### 可观测\n基于Envoy良好的观测性，Hango网关在网易集团内部进行规模落地过程中，结合服务网格场景，提供丰富的观测能力，整体架构如下\n\n- 日志\n\nEnvoy中事件的详细记录，Hango网关基于Envoy进行数据面扩展，提供了灵活易配置的AccessLog，支持自定义格式，自定义顾虑规则以及输出。\n\n基于filebeat以及elastic的能力，构建一体化日志审计平台。\n\n- 监控\n\n基于Envoy cluster mertic等信息，利用Promethues构建网关/服务等多维度指标体系。同时，针对网关容器化部署模式，基于Kubernetes 容器对应的 metrics构建容器维度的指标监控，涵盖CPU/内存/带宽等多维度监控。\n\n- 链路追踪\n\n基于Envoy开箱即用的多种tracing接入，拓展力强，目前已完成线上SkyWalking等tracing的接入。\n\n\n## 写在最后\n\nHango作为一名开源领域的新生儿，我们会秉承拥抱云原生的理念，继续跟进Istio/Envoy的演进，发挥更大的领域价值。下一阶段，我们会在多语言扩展，LB融合等多场景进行发力，也期待更多关注云原生、API网关的同学能够加入Hango开源社区建设。\n\n诚挚的欢迎大家关注Hango Gateway","source":"_posts/FuncDesign/开源项目Hango网关项目设计与实践.md","raw":"---\ntitle: 开源项目Hango网关项目设计与实践\ndate: 2023-07-14 00:01:00\ntags:\n  - Envoy\n  - 网易\n  - 云原生网关\ncategories: 云原生网关\n---\n\n## 前言\nHango 是由网易公司开源的一个基于Envoy构建的高性能、可扩展功能丰富的云原生API网关，本文将从Hango的诞生背景、架构设计、功能特性、大规模落地等方面进行介绍。\n\n## 诞生背景\nEnvoy起初在网易轻舟是作为服务网格Istio的数据面使用，承担了东西向、南北向全部数据流量的代理、治理与观测职责。随着服务网格在网易内部大规模落地，我们对 Envoy 的功能、性能、扩展性、可观测性等多方面有了全面的研究与实践，也深刻感受到 Envoy 优质的内在品质，及其在云原生时代巨大的发展潜力。\n于是我们开始尝试基于 Envoy 建设网易的新一代 API 网关，目标是替换网易内部较多业务采用 Java 异步化网关、 Kong 网关，并能够满足业务逐步进入云原生时代的南北向流量治理需求。从结果上看，选型 Envoy 不仅让我们顺利实现了网易 API 网关全面升级，还推动了网易云原生、微服务技术栈整体的统一与向前发展。\n\n## 架构设计\nHango 基于云原生理念构建，数据面基于Envoy进行扩展，增强插件链，提供 Rider 模块用于自定义插件扩展；控制面组件包括 Slime，Istio，API Plane以及Portal模块。其架构图如下所示：\n\n![hango设计架构.png](..%2F..%2Fimg%2Fhango%E8%AE%BE%E8%AE%A1%E6%9E%B6%E6%9E%84.png)\n\n组件说明：\n- Envoy: Hango网关的数据面流量入口，通过XDS模式获取Istiod配置\n- Istiod: Hango网关对接Envoy的适配层，监听指定CRD并通过XDS向Envoy下发配置\n- Slime: 提供指定Slime CRD，以支持Hango支持插件、限流、服务发现等特性\n- Hango Portal: Hango对接前端界面的Web层模块，存储Hango业务数据\n- Hango Api-plane: 对接Hango Portal，管理Hango CR声明周期\n- Hango UI: Hango前端界面，提供Hango配置、观测、调试等功能\n\nHango UI将Envoy的功能进行了可视化的配置，与Hango Portal进行交互，Hango Portal将业务信息存于DB，并调用Hango Api-plane生成服务路由相应的CR，Istiod在Watch到API-plane生成的CR会通过XDS协议下发给数据面Envoy，Envoy将配置信息应用到数据面。\n对于插件的能力的扩展，我们使用自定义的CRD(EnvoyPlugin)来承载插件信息，Slime模块监听Slime CRD，将Slime CRD转换为EnvoyFilter的插件配置对数据面envoy进行扩展。\n\n下面是Hango的数据流向：\n\n\n## 功能特性\n\n### 虚拟网关\n\n#### 虚拟网关\n在L7层通用网关中，一组Envoy网关集群可以表现出不同的形态，如API网关、L7负载均衡、ingress。网关集群在部署时已确定的一组网关实例，称之为网关，不同表现形态称之为虚拟网关。 依托于网关，可通过不同场景进行配置。网关数据层采用Envoy作为底层代理，通过不同的Listener配置开放Envoy不同的监听端口，对应不同形态的虚拟网关。在L7层通用网关中，一组Envoy网关集群可以表现出不同的形态，如API网关、L7负载均衡、ingress。网关集群在部署时已确定的一组网关实例，称之为网关，不同表现形态称之为虚拟网关。 依托于网关，可通过不同场景进行配置。网关数据层采用Envoy作为底层代理，通过不同的Listener配置开放Envoy不同的监听端口，对应不同形态的虚拟网关。\n\n以下为虚拟网关的功能架构图：\n![虚拟网关功能架构图.png](..%2F..%2Fimg%2F%E8%99%9A%E6%8B%9F%E7%BD%91%E5%85%B3%E5%8A%9F%E8%83%BD%E6%9E%B6%E6%9E%84%E5%9B%BE.png)\n\n一组Envoy网关实例部署在Kubernetes集群中，用户通过配置服务在网关生成Listener(虚拟网关)，Listener(虚拟网关)监听对应的服务，当有请求访问该监听端口时，进行流量转发。\n\n#### Kubernetes Gateway\nGateway API作为Kubernetes入口网关的最新成果，得到行业的广泛支持。它代表了Ingress功能的一个父集，定义了一系列以Gateway资源为中心的资源集合。与Ingress类似，Kubernetes 中没有内置Gateway API默认实现，需要依赖基础设施商提供Gateway Class。 \n\n官方文档见：https://gateway-api.sigs.k8s.io\n\n作为Ingress资源的升级，Gateway API提供了一系列治理能力更强、表达性更优、可扩展性更高的资源集合，其中GatewayClass、Gateway和HTTPRoute已经进入Beta阶段，其他CRD还处于实验阶段。 此处只需要关注Gateway和xRoute资源，详细的API定义可参考Gateway API\n\n以下图片为Gateway API的相关组件：\n![Gateway API相关组件.png](..%2F..%2Fimg%2FGateway%20API%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6.png)\n\n- GatewayClass：GatewayClass是由基础架构提供商定义的集群范围的资源，该资源用于指定对应的Gateway Controller。目前已实现的Gateway Controller的产品包括Envoy Gateway（beta）、Istio（beta）、Kong（beta）等，详情可参考Gateway Controller\n\n- Gateway： 核心网关资源，主要规范了以下三部分内容：\n\n    - Listeners：网关监听器列表，每个监听器都代表了一组主机名、端口、协议配置。\n\n    - GatewayClassName：用于指定生效的GatewayClass。\n\n    - Address：定义网关代理的请求地址。\n\n- xRoute： 代表需要不同特性协议的路由资源，每种协议路由都有特定的语义，这种模式具有较好的扩展性，例如可以定义DubboRoute、gRPCRoute等。每种资源都定义了基本的匹配、过滤和路由规则，这些规则只有被绑定到相应的Gateway资源上才可以生效。目前只有HTTPRoute进入Beta阶段。\n\n以下为Kubernetes Gateway在hango的功能实现架构图，Gateway API在控制台被创建之后会被开源的Istio控制面将Gateway API对象转换为Istio API对象，最终下发至Envoy数据面。 hango在此基础之上对HttpRoute做了插件上的增强，提供了更多丰富的插件能力。\n\n![Kubernetes Gateway技术架构图.png](..%2F..%2Fimg%2FKubernetes%20Gateway%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E5%9B%BE.png)\n\n#### Kubernetes Ingress\nIngress是K8s生态中定义流量入口的一种资源，但其只是个规则，仅创建Ingress资源本身是没有任何效果的，想让其生效，就需要有一个Ingress Controller去监听K8s中的ingress资源， 并对这些资源进行规则解析，转换为其数据面中的代理规则，并由数据面来进行流量转发。当前K8s默认的Ingress Controller实现是Nginx，本次方案描述如何将通用网关纳管Ingress的流量。\n\nIngress资源是对集群中服务的外部访问进行管理的 API 对象，可以将集群内部服务通过HTTP或HTTPS暴露出去，流量路由规则由Ingress资源定义。\n![Ingress.png](..%2F..%2Fimg%2FIngress.png)\n\n目前只支持Ingress v1版本流量纳管，v1版本的Ingress资源定义如下：\n```yaml\n##ingress v1\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n   annotations:\n      kubectl.kubernetes.io/last-applied-configuration: |\n         {\"apiVersion\":\"networking.k8s.io/v1\",\"kind\":\"Ingress\",\"metadata\":{\"annotations\":{\"kubernetes.io/ingress.class\":\"istio\"},\"name\":\"test\",\"namespace\":\"hango-system\"},\"spec\":{\"ingressClassName\":\"istio\",\"rules\":[{\"http\":{\"paths\":[{\"backend\":{\"service\":{\"name\":\"istio-e2e-app\",\"port\":{\"number\":80}}},\"path\":\"/get\",\"pathType\":\"Prefix\"}]}}]}}\n      kubernetes.io/ingress.class: hango\n      skiff.netease.com/project: hango\n   creationTimestamp: \"2023-07-14T07:33:17Z\"\n   generation: 7\n   name: test\n   namespace: hango-system\n   resourceVersion: \"9320368\"\n   labels:\n     istio.io/rev: gw-1.12\n   uid: 1ba7e839-da43-4c00-afeb-85d173911003\nspec:\n   rules:\n     - http:\n        paths:\n          - backend:\n              service:\n              name: istio-e2e-app\n              port:\n              number: 80\n            path: /get\n            pathType: Prefix\nstatus:\n  loadBalancer:\n    ingress:\n      - ip: xxx.xxx.xxx.xxx\n```\nIngress v1版本的资源定义中，主要包含以下几个重要注解：\n- istio.io/rev：指定网关版本，目前只支持gw-1.12\n- kubernetes.io/ingress.class：指定ingress的class，目前固定为hango\n- skiff.netease.com/project：指定项目ID，目前固定为hango\n- spec.rules：指定ingress的路由规则，目前只支持http协议\n- status.loadBalancer.ingress：指定ingress的访问地址\n### 服务发现\n目前Istio1.8之后只保留了对接Kubernetes注册中心的逻辑，但是在实际生产实践中，我们发现大量用户只是将Kubernetes作为部署和管理的平台，服务信息依旧注册在第三方服务注册中心，如Nacos和Zookeeper，因此我们必须解决对接第三方注册中心的问题，以满足用户的需求。\n我们采用的方案是网易开源的slime组件作为服务发现的适配层，slime组件支持对接多种第三方注册中心，如Nacos、Zookeeper、Eureka、Consul等，同时支持对接Kubernetes注册中心，将服务发现的逻辑统一抽象为slime CRD，通过slime CRD将服务发现的逻辑下发至Envoy数据面。\n\nslime组件的相关介绍见：[Slime化解服务网格多注册中心兼容之痛](https://slime-io.github.io/blog/Slime%E5%8C%96%E8%A7%A3%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC%E5%A4%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%85%BC%E5%AE%B9%E4%B9%8B%E7%97%9B/)\n\n### 可观测\n基于Envoy良好的观测性，Hango网关在网易集团内部进行规模落地过程中，结合服务网格场景，提供丰富的观测能力，整体架构如下\n\n- 日志\n\nEnvoy中事件的详细记录，Hango网关基于Envoy进行数据面扩展，提供了灵活易配置的AccessLog，支持自定义格式，自定义顾虑规则以及输出。\n\n基于filebeat以及elastic的能力，构建一体化日志审计平台。\n\n- 监控\n\n基于Envoy cluster mertic等信息，利用Promethues构建网关/服务等多维度指标体系。同时，针对网关容器化部署模式，基于Kubernetes 容器对应的 metrics构建容器维度的指标监控，涵盖CPU/内存/带宽等多维度监控。\n\n- 链路追踪\n\n基于Envoy开箱即用的多种tracing接入，拓展力强，目前已完成线上SkyWalking等tracing的接入。\n\n\n## 写在最后\n\nHango作为一名开源领域的新生儿，我们会秉承拥抱云原生的理念，继续跟进Istio/Envoy的演进，发挥更大的领域价值。下一阶段，我们会在多语言扩展，LB融合等多场景进行发力，也期待更多关注云原生、API网关的同学能够加入Hango开源社区建设。\n\n诚挚的欢迎大家关注Hango Gateway","slug":"FuncDesign/开源项目Hango网关项目设计与实践","published":1,"updated":"2024-01-22T08:02:15.055Z","_id":"clrhmb272000oqzyweuyxgwkt","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Hango 是由网易公司开源的一个基于Envoy构建的高性能、可扩展功能丰富的云原生API网关，本文将从Hango的诞生背景、架构设计、功能特性、大规模落地等方面进行介绍。</p>\n<h2 id=\"诞生背景\"><a href=\"#诞生背景\" class=\"headerlink\" title=\"诞生背景\"></a>诞生背景</h2><p>Envoy起初在网易轻舟是作为服务网格Istio的数据面使用，承担了东西向、南北向全部数据流量的代理、治理与观测职责。随着服务网格在网易内部大规模落地，我们对 Envoy 的功能、性能、扩展性、可观测性等多方面有了全面的研究与实践，也深刻感受到 Envoy 优质的内在品质，及其在云原生时代巨大的发展潜力。<br>于是我们开始尝试基于 Envoy 建设网易的新一代 API 网关，目标是替换网易内部较多业务采用 Java 异步化网关、 Kong 网关，并能够满足业务逐步进入云原生时代的南北向流量治理需求。从结果上看，选型 Envoy 不仅让我们顺利实现了网易 API 网关全面升级，还推动了网易云原生、微服务技术栈整体的统一与向前发展。</p>\n<h2 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h2><p>Hango 基于云原生理念构建，数据面基于Envoy进行扩展，增强插件链，提供 Rider 模块用于自定义插件扩展；控制面组件包括 Slime，Istio，API Plane以及Portal模块。其架构图如下所示：</p>\n<p><img src=\"/../../img/hango%E8%AE%BE%E8%AE%A1%E6%9E%B6%E6%9E%84.png\" alt=\"hango设计架构.png\"></p>\n<p>组件说明：</p>\n<ul>\n<li>Envoy: Hango网关的数据面流量入口，通过XDS模式获取Istiod配置</li>\n<li>Istiod: Hango网关对接Envoy的适配层，监听指定CRD并通过XDS向Envoy下发配置</li>\n<li>Slime: 提供指定Slime CRD，以支持Hango支持插件、限流、服务发现等特性</li>\n<li>Hango Portal: Hango对接前端界面的Web层模块，存储Hango业务数据</li>\n<li>Hango Api-plane: 对接Hango Portal，管理Hango CR声明周期</li>\n<li>Hango UI: Hango前端界面，提供Hango配置、观测、调试等功能</li>\n</ul>\n<p>Hango UI将Envoy的功能进行了可视化的配置，与Hango Portal进行交互，Hango Portal将业务信息存于DB，并调用Hango Api-plane生成服务路由相应的CR，Istiod在Watch到API-plane生成的CR会通过XDS协议下发给数据面Envoy，Envoy将配置信息应用到数据面。<br>对于插件的能力的扩展，我们使用自定义的CRD(EnvoyPlugin)来承载插件信息，Slime模块监听Slime CRD，将Slime CRD转换为EnvoyFilter的插件配置对数据面envoy进行扩展。</p>\n<p>下面是Hango的数据流向：</p>\n<h2 id=\"功能特性\"><a href=\"#功能特性\" class=\"headerlink\" title=\"功能特性\"></a>功能特性</h2><h3 id=\"虚拟网关\"><a href=\"#虚拟网关\" class=\"headerlink\" title=\"虚拟网关\"></a>虚拟网关</h3><h4 id=\"虚拟网关-1\"><a href=\"#虚拟网关-1\" class=\"headerlink\" title=\"虚拟网关\"></a>虚拟网关</h4><p>在L7层通用网关中，一组Envoy网关集群可以表现出不同的形态，如API网关、L7负载均衡、ingress。网关集群在部署时已确定的一组网关实例，称之为网关，不同表现形态称之为虚拟网关。 依托于网关，可通过不同场景进行配置。网关数据层采用Envoy作为底层代理，通过不同的Listener配置开放Envoy不同的监听端口，对应不同形态的虚拟网关。在L7层通用网关中，一组Envoy网关集群可以表现出不同的形态，如API网关、L7负载均衡、ingress。网关集群在部署时已确定的一组网关实例，称之为网关，不同表现形态称之为虚拟网关。 依托于网关，可通过不同场景进行配置。网关数据层采用Envoy作为底层代理，通过不同的Listener配置开放Envoy不同的监听端口，对应不同形态的虚拟网关。</p>\n<p>以下为虚拟网关的功能架构图：<br><img src=\"/../../img/%E8%99%9A%E6%8B%9F%E7%BD%91%E5%85%B3%E5%8A%9F%E8%83%BD%E6%9E%B6%E6%9E%84%E5%9B%BE.png\" alt=\"虚拟网关功能架构图.png\"></p>\n<p>一组Envoy网关实例部署在Kubernetes集群中，用户通过配置服务在网关生成Listener(虚拟网关)，Listener(虚拟网关)监听对应的服务，当有请求访问该监听端口时，进行流量转发。</p>\n<h4 id=\"Kubernetes-Gateway\"><a href=\"#Kubernetes-Gateway\" class=\"headerlink\" title=\"Kubernetes Gateway\"></a>Kubernetes Gateway</h4><p>Gateway API作为Kubernetes入口网关的最新成果，得到行业的广泛支持。它代表了Ingress功能的一个父集，定义了一系列以Gateway资源为中心的资源集合。与Ingress类似，Kubernetes 中没有内置Gateway API默认实现，需要依赖基础设施商提供Gateway Class。 </p>\n<p>官方文档见：<a href=\"https://gateway-api.sigs.k8s.io/\">https://gateway-api.sigs.k8s.io</a></p>\n<p>作为Ingress资源的升级，Gateway API提供了一系列治理能力更强、表达性更优、可扩展性更高的资源集合，其中GatewayClass、Gateway和HTTPRoute已经进入Beta阶段，其他CRD还处于实验阶段。 此处只需要关注Gateway和xRoute资源，详细的API定义可参考Gateway API</p>\n<p>以下图片为Gateway API的相关组件：<br><img src=\"/../../img/Gateway%20API%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6.png\" alt=\"Gateway API相关组件.png\"></p>\n<ul>\n<li><p>GatewayClass：GatewayClass是由基础架构提供商定义的集群范围的资源，该资源用于指定对应的Gateway Controller。目前已实现的Gateway Controller的产品包括Envoy Gateway（beta）、Istio（beta）、Kong（beta）等，详情可参考Gateway Controller</p>\n</li>\n<li><p>Gateway： 核心网关资源，主要规范了以下三部分内容：</p>\n<ul>\n<li><p>Listeners：网关监听器列表，每个监听器都代表了一组主机名、端口、协议配置。</p>\n</li>\n<li><p>GatewayClassName：用于指定生效的GatewayClass。</p>\n</li>\n<li><p>Address：定义网关代理的请求地址。</p>\n</li>\n</ul>\n</li>\n<li><p>xRoute： 代表需要不同特性协议的路由资源，每种协议路由都有特定的语义，这种模式具有较好的扩展性，例如可以定义DubboRoute、gRPCRoute等。每种资源都定义了基本的匹配、过滤和路由规则，这些规则只有被绑定到相应的Gateway资源上才可以生效。目前只有HTTPRoute进入Beta阶段。</p>\n</li>\n</ul>\n<p>以下为Kubernetes Gateway在hango的功能实现架构图，Gateway API在控制台被创建之后会被开源的Istio控制面将Gateway API对象转换为Istio API对象，最终下发至Envoy数据面。 hango在此基础之上对HttpRoute做了插件上的增强，提供了更多丰富的插件能力。</p>\n<p><img src=\"/../../img/Kubernetes%20Gateway%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E5%9B%BE.png\" alt=\"Kubernetes Gateway技术架构图.png\"></p>\n<h4 id=\"Kubernetes-Ingress\"><a href=\"#Kubernetes-Ingress\" class=\"headerlink\" title=\"Kubernetes Ingress\"></a>Kubernetes Ingress</h4><p>Ingress是K8s生态中定义流量入口的一种资源，但其只是个规则，仅创建Ingress资源本身是没有任何效果的，想让其生效，就需要有一个Ingress Controller去监听K8s中的ingress资源， 并对这些资源进行规则解析，转换为其数据面中的代理规则，并由数据面来进行流量转发。当前K8s默认的Ingress Controller实现是Nginx，本次方案描述如何将通用网关纳管Ingress的流量。</p>\n<p>Ingress资源是对集群中服务的外部访问进行管理的 API 对象，可以将集群内部服务通过HTTP或HTTPS暴露出去，流量路由规则由Ingress资源定义。<br><img src=\"/../../img/Ingress.png\" alt=\"Ingress.png\"></p>\n<p>目前只支持Ingress v1版本流量纳管，v1版本的Ingress资源定义如下：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\">##ingress v1</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> networking.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Ingress\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n   <span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">kubectl.kubernetes.io/last-applied-configuration</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n         {\"apiVersion\":\"networking.k8s.io/v1\",\"kind\":\"Ingress\",\"metadata\":{\"annotations\":{\"kubernetes.io/ingress.class\":\"istio\"},\"name\":\"test\",\"namespace\":\"hango-system\"},\"spec\":{\"ingressClassName\":\"istio\",\"rules\":[{\"http\":{\"paths\":[{\"backend\":{\"service\":{\"name\":\"istio-e2e-app\",\"port\":{\"number\":80}}},\"path\":\"/get\",\"pathType\":\"Prefix\"}]}}]}}</span>\n      <span class=\"token key atrule\">kubernetes.io/ingress.class</span><span class=\"token punctuation\">:</span> hango\n      <span class=\"token key atrule\">skiff.netease.com/project</span><span class=\"token punctuation\">:</span> hango\n   <span class=\"token key atrule\">creationTimestamp</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2023-07-14T07:33:17Z\"</span>\n   <span class=\"token key atrule\">generation</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7</span>\n   <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test\n   <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> hango<span class=\"token punctuation\">-</span>system\n   <span class=\"token key atrule\">resourceVersion</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"9320368\"</span>\n   <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n     <span class=\"token key atrule\">istio.io/rev</span><span class=\"token punctuation\">:</span> gw<span class=\"token punctuation\">-</span><span class=\"token number\">1.12</span>\n   <span class=\"token key atrule\">uid</span><span class=\"token punctuation\">:</span> 1ba7e839<span class=\"token punctuation\">-</span>da43<span class=\"token punctuation\">-</span>4c00<span class=\"token punctuation\">-</span>afeb<span class=\"token punctuation\">-</span>85d173911003\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n   <span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">backend</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> istio<span class=\"token punctuation\">-</span>e2e<span class=\"token punctuation\">-</span>app\n              <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">number</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n            <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /get\n            <span class=\"token key atrule\">pathType</span><span class=\"token punctuation\">:</span> Prefix\n<span class=\"token key atrule\">status</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">loadBalancer</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">ingress</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">ip</span><span class=\"token punctuation\">:</span> xxx.xxx.xxx.xxx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Ingress v1版本的资源定义中，主要包含以下几个重要注解：</p>\n<ul>\n<li>istio.io/rev：指定网关版本，目前只支持gw-1.12</li>\n<li>kubernetes.io/ingress.class：指定ingress的class，目前固定为hango</li>\n<li>skiff.netease.com/project：指定项目ID，目前固定为hango</li>\n<li>spec.rules：指定ingress的路由规则，目前只支持http协议</li>\n<li>status.loadBalancer.ingress：指定ingress的访问地址<h3 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h3>目前Istio1.8之后只保留了对接Kubernetes注册中心的逻辑，但是在实际生产实践中，我们发现大量用户只是将Kubernetes作为部署和管理的平台，服务信息依旧注册在第三方服务注册中心，如Nacos和Zookeeper，因此我们必须解决对接第三方注册中心的问题，以满足用户的需求。<br>我们采用的方案是网易开源的slime组件作为服务发现的适配层，slime组件支持对接多种第三方注册中心，如Nacos、Zookeeper、Eureka、Consul等，同时支持对接Kubernetes注册中心，将服务发现的逻辑统一抽象为slime CRD，通过slime CRD将服务发现的逻辑下发至Envoy数据面。</li>\n</ul>\n<p>slime组件的相关介绍见：<a href=\"https://slime-io.github.io/blog/Slime%E5%8C%96%E8%A7%A3%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC%E5%A4%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%85%BC%E5%AE%B9%E4%B9%8B%E7%97%9B/\">Slime化解服务网格多注册中心兼容之痛</a></p>\n<h3 id=\"可观测\"><a href=\"#可观测\" class=\"headerlink\" title=\"可观测\"></a>可观测</h3><p>基于Envoy良好的观测性，Hango网关在网易集团内部进行规模落地过程中，结合服务网格场景，提供丰富的观测能力，整体架构如下</p>\n<ul>\n<li>日志</li>\n</ul>\n<p>Envoy中事件的详细记录，Hango网关基于Envoy进行数据面扩展，提供了灵活易配置的AccessLog，支持自定义格式，自定义顾虑规则以及输出。</p>\n<p>基于filebeat以及elastic的能力，构建一体化日志审计平台。</p>\n<ul>\n<li>监控</li>\n</ul>\n<p>基于Envoy cluster mertic等信息，利用Promethues构建网关/服务等多维度指标体系。同时，针对网关容器化部署模式，基于Kubernetes 容器对应的 metrics构建容器维度的指标监控，涵盖CPU/内存/带宽等多维度监控。</p>\n<ul>\n<li>链路追踪</li>\n</ul>\n<p>基于Envoy开箱即用的多种tracing接入，拓展力强，目前已完成线上SkyWalking等tracing的接入。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>Hango作为一名开源领域的新生儿，我们会秉承拥抱云原生的理念，继续跟进Istio/Envoy的演进，发挥更大的领域价值。下一阶段，我们会在多语言扩展，LB融合等多场景进行发力，也期待更多关注云原生、API网关的同学能够加入Hango开源社区建设。</p>\n<p>诚挚的欢迎大家关注Hango Gateway</p>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Hango 是由网易公司开源的一个基于Envoy构建的高性能、可扩展功能丰富的云原生API网关，本文将从Hango的诞生背景、架构设计、功能特性、大规模落地等方面进行介绍。</p>\n<h2 id=\"诞生背景\"><a href=\"#诞生背景\" class=\"headerlink\" title=\"诞生背景\"></a>诞生背景</h2><p>Envoy起初在网易轻舟是作为服务网格Istio的数据面使用，承担了东西向、南北向全部数据流量的代理、治理与观测职责。随着服务网格在网易内部大规模落地，我们对 Envoy 的功能、性能、扩展性、可观测性等多方面有了全面的研究与实践，也深刻感受到 Envoy 优质的内在品质，及其在云原生时代巨大的发展潜力。<br>于是我们开始尝试基于 Envoy 建设网易的新一代 API 网关，目标是替换网易内部较多业务采用 Java 异步化网关、 Kong 网关，并能够满足业务逐步进入云原生时代的南北向流量治理需求。从结果上看，选型 Envoy 不仅让我们顺利实现了网易 API 网关全面升级，还推动了网易云原生、微服务技术栈整体的统一与向前发展。</p>\n<h2 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h2><p>Hango 基于云原生理念构建，数据面基于Envoy进行扩展，增强插件链，提供 Rider 模块用于自定义插件扩展；控制面组件包括 Slime，Istio，API Plane以及Portal模块。其架构图如下所示：</p>\n<p><img src=\"/../../img/hango%E8%AE%BE%E8%AE%A1%E6%9E%B6%E6%9E%84.png\" alt=\"hango设计架构.png\"></p>\n<p>组件说明：</p>\n<ul>\n<li>Envoy: Hango网关的数据面流量入口，通过XDS模式获取Istiod配置</li>\n<li>Istiod: Hango网关对接Envoy的适配层，监听指定CRD并通过XDS向Envoy下发配置</li>\n<li>Slime: 提供指定Slime CRD，以支持Hango支持插件、限流、服务发现等特性</li>\n<li>Hango Portal: Hango对接前端界面的Web层模块，存储Hango业务数据</li>\n<li>Hango Api-plane: 对接Hango Portal，管理Hango CR声明周期</li>\n<li>Hango UI: Hango前端界面，提供Hango配置、观测、调试等功能</li>\n</ul>\n<p>Hango UI将Envoy的功能进行了可视化的配置，与Hango Portal进行交互，Hango Portal将业务信息存于DB，并调用Hango Api-plane生成服务路由相应的CR，Istiod在Watch到API-plane生成的CR会通过XDS协议下发给数据面Envoy，Envoy将配置信息应用到数据面。<br>对于插件的能力的扩展，我们使用自定义的CRD(EnvoyPlugin)来承载插件信息，Slime模块监听Slime CRD，将Slime CRD转换为EnvoyFilter的插件配置对数据面envoy进行扩展。</p>\n<p>下面是Hango的数据流向：</p>\n<h2 id=\"功能特性\"><a href=\"#功能特性\" class=\"headerlink\" title=\"功能特性\"></a>功能特性</h2><h3 id=\"虚拟网关\"><a href=\"#虚拟网关\" class=\"headerlink\" title=\"虚拟网关\"></a>虚拟网关</h3><h4 id=\"虚拟网关-1\"><a href=\"#虚拟网关-1\" class=\"headerlink\" title=\"虚拟网关\"></a>虚拟网关</h4><p>在L7层通用网关中，一组Envoy网关集群可以表现出不同的形态，如API网关、L7负载均衡、ingress。网关集群在部署时已确定的一组网关实例，称之为网关，不同表现形态称之为虚拟网关。 依托于网关，可通过不同场景进行配置。网关数据层采用Envoy作为底层代理，通过不同的Listener配置开放Envoy不同的监听端口，对应不同形态的虚拟网关。在L7层通用网关中，一组Envoy网关集群可以表现出不同的形态，如API网关、L7负载均衡、ingress。网关集群在部署时已确定的一组网关实例，称之为网关，不同表现形态称之为虚拟网关。 依托于网关，可通过不同场景进行配置。网关数据层采用Envoy作为底层代理，通过不同的Listener配置开放Envoy不同的监听端口，对应不同形态的虚拟网关。</p>\n<p>以下为虚拟网关的功能架构图：<br><img src=\"/../../img/%E8%99%9A%E6%8B%9F%E7%BD%91%E5%85%B3%E5%8A%9F%E8%83%BD%E6%9E%B6%E6%9E%84%E5%9B%BE.png\" alt=\"虚拟网关功能架构图.png\"></p>\n<p>一组Envoy网关实例部署在Kubernetes集群中，用户通过配置服务在网关生成Listener(虚拟网关)，Listener(虚拟网关)监听对应的服务，当有请求访问该监听端口时，进行流量转发。</p>\n<h4 id=\"Kubernetes-Gateway\"><a href=\"#Kubernetes-Gateway\" class=\"headerlink\" title=\"Kubernetes Gateway\"></a>Kubernetes Gateway</h4><p>Gateway API作为Kubernetes入口网关的最新成果，得到行业的广泛支持。它代表了Ingress功能的一个父集，定义了一系列以Gateway资源为中心的资源集合。与Ingress类似，Kubernetes 中没有内置Gateway API默认实现，需要依赖基础设施商提供Gateway Class。 </p>\n<p>官方文档见：<a href=\"https://gateway-api.sigs.k8s.io/\">https://gateway-api.sigs.k8s.io</a></p>\n<p>作为Ingress资源的升级，Gateway API提供了一系列治理能力更强、表达性更优、可扩展性更高的资源集合，其中GatewayClass、Gateway和HTTPRoute已经进入Beta阶段，其他CRD还处于实验阶段。 此处只需要关注Gateway和xRoute资源，详细的API定义可参考Gateway API</p>\n<p>以下图片为Gateway API的相关组件：<br><img src=\"/../../img/Gateway%20API%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6.png\" alt=\"Gateway API相关组件.png\"></p>\n<ul>\n<li><p>GatewayClass：GatewayClass是由基础架构提供商定义的集群范围的资源，该资源用于指定对应的Gateway Controller。目前已实现的Gateway Controller的产品包括Envoy Gateway（beta）、Istio（beta）、Kong（beta）等，详情可参考Gateway Controller</p>\n</li>\n<li><p>Gateway： 核心网关资源，主要规范了以下三部分内容：</p>\n<ul>\n<li><p>Listeners：网关监听器列表，每个监听器都代表了一组主机名、端口、协议配置。</p>\n</li>\n<li><p>GatewayClassName：用于指定生效的GatewayClass。</p>\n</li>\n<li><p>Address：定义网关代理的请求地址。</p>\n</li>\n</ul>\n</li>\n<li><p>xRoute： 代表需要不同特性协议的路由资源，每种协议路由都有特定的语义，这种模式具有较好的扩展性，例如可以定义DubboRoute、gRPCRoute等。每种资源都定义了基本的匹配、过滤和路由规则，这些规则只有被绑定到相应的Gateway资源上才可以生效。目前只有HTTPRoute进入Beta阶段。</p>\n</li>\n</ul>\n<p>以下为Kubernetes Gateway在hango的功能实现架构图，Gateway API在控制台被创建之后会被开源的Istio控制面将Gateway API对象转换为Istio API对象，最终下发至Envoy数据面。 hango在此基础之上对HttpRoute做了插件上的增强，提供了更多丰富的插件能力。</p>\n<p><img src=\"/../../img/Kubernetes%20Gateway%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E5%9B%BE.png\" alt=\"Kubernetes Gateway技术架构图.png\"></p>\n<h4 id=\"Kubernetes-Ingress\"><a href=\"#Kubernetes-Ingress\" class=\"headerlink\" title=\"Kubernetes Ingress\"></a>Kubernetes Ingress</h4><p>Ingress是K8s生态中定义流量入口的一种资源，但其只是个规则，仅创建Ingress资源本身是没有任何效果的，想让其生效，就需要有一个Ingress Controller去监听K8s中的ingress资源， 并对这些资源进行规则解析，转换为其数据面中的代理规则，并由数据面来进行流量转发。当前K8s默认的Ingress Controller实现是Nginx，本次方案描述如何将通用网关纳管Ingress的流量。</p>\n<p>Ingress资源是对集群中服务的外部访问进行管理的 API 对象，可以将集群内部服务通过HTTP或HTTPS暴露出去，流量路由规则由Ingress资源定义。<br><img src=\"/../../img/Ingress.png\" alt=\"Ingress.png\"></p>\n<p>目前只支持Ingress v1版本流量纳管，v1版本的Ingress资源定义如下：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\">##ingress v1</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> networking.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Ingress\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n   <span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">kubectl.kubernetes.io/last-applied-configuration</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n         &#123;\"apiVersion\":\"networking.k8s.io/v1\",\"kind\":\"Ingress\",\"metadata\":&#123;\"annotations\":&#123;\"kubernetes.io/ingress.class\":\"istio\"&#125;,\"name\":\"test\",\"namespace\":\"hango-system\"&#125;,\"spec\":&#123;\"ingressClassName\":\"istio\",\"rules\":[&#123;\"http\":&#123;\"paths\":[&#123;\"backend\":&#123;\"service\":&#123;\"name\":\"istio-e2e-app\",\"port\":&#123;\"number\":80&#125;&#125;&#125;,\"path\":\"/get\",\"pathType\":\"Prefix\"&#125;]&#125;&#125;]&#125;&#125;</span>\n      <span class=\"token key atrule\">kubernetes.io/ingress.class</span><span class=\"token punctuation\">:</span> hango\n      <span class=\"token key atrule\">skiff.netease.com/project</span><span class=\"token punctuation\">:</span> hango\n   <span class=\"token key atrule\">creationTimestamp</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2023-07-14T07:33:17Z\"</span>\n   <span class=\"token key atrule\">generation</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7</span>\n   <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test\n   <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> hango<span class=\"token punctuation\">-</span>system\n   <span class=\"token key atrule\">resourceVersion</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"9320368\"</span>\n   <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n     <span class=\"token key atrule\">istio.io/rev</span><span class=\"token punctuation\">:</span> gw<span class=\"token punctuation\">-</span><span class=\"token number\">1.12</span>\n   <span class=\"token key atrule\">uid</span><span class=\"token punctuation\">:</span> 1ba7e839<span class=\"token punctuation\">-</span>da43<span class=\"token punctuation\">-</span>4c00<span class=\"token punctuation\">-</span>afeb<span class=\"token punctuation\">-</span>85d173911003\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n   <span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">backend</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> istio<span class=\"token punctuation\">-</span>e2e<span class=\"token punctuation\">-</span>app\n              <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">number</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n            <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /get\n            <span class=\"token key atrule\">pathType</span><span class=\"token punctuation\">:</span> Prefix\n<span class=\"token key atrule\">status</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">loadBalancer</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">ingress</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">ip</span><span class=\"token punctuation\">:</span> xxx.xxx.xxx.xxx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Ingress v1版本的资源定义中，主要包含以下几个重要注解：</p>\n<ul>\n<li>istio.io&#x2F;rev：指定网关版本，目前只支持gw-1.12</li>\n<li>kubernetes.io&#x2F;ingress.class：指定ingress的class，目前固定为hango</li>\n<li>skiff.netease.com&#x2F;project：指定项目ID，目前固定为hango</li>\n<li>spec.rules：指定ingress的路由规则，目前只支持http协议</li>\n<li>status.loadBalancer.ingress：指定ingress的访问地址<h3 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h3>目前Istio1.8之后只保留了对接Kubernetes注册中心的逻辑，但是在实际生产实践中，我们发现大量用户只是将Kubernetes作为部署和管理的平台，服务信息依旧注册在第三方服务注册中心，如Nacos和Zookeeper，因此我们必须解决对接第三方注册中心的问题，以满足用户的需求。<br>我们采用的方案是网易开源的slime组件作为服务发现的适配层，slime组件支持对接多种第三方注册中心，如Nacos、Zookeeper、Eureka、Consul等，同时支持对接Kubernetes注册中心，将服务发现的逻辑统一抽象为slime CRD，通过slime CRD将服务发现的逻辑下发至Envoy数据面。</li>\n</ul>\n<p>slime组件的相关介绍见：<a href=\"https://slime-io.github.io/blog/Slime%E5%8C%96%E8%A7%A3%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC%E5%A4%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%85%BC%E5%AE%B9%E4%B9%8B%E7%97%9B/\">Slime化解服务网格多注册中心兼容之痛</a></p>\n<h3 id=\"可观测\"><a href=\"#可观测\" class=\"headerlink\" title=\"可观测\"></a>可观测</h3><p>基于Envoy良好的观测性，Hango网关在网易集团内部进行规模落地过程中，结合服务网格场景，提供丰富的观测能力，整体架构如下</p>\n<ul>\n<li>日志</li>\n</ul>\n<p>Envoy中事件的详细记录，Hango网关基于Envoy进行数据面扩展，提供了灵活易配置的AccessLog，支持自定义格式，自定义顾虑规则以及输出。</p>\n<p>基于filebeat以及elastic的能力，构建一体化日志审计平台。</p>\n<ul>\n<li>监控</li>\n</ul>\n<p>基于Envoy cluster mertic等信息，利用Promethues构建网关&#x2F;服务等多维度指标体系。同时，针对网关容器化部署模式，基于Kubernetes 容器对应的 metrics构建容器维度的指标监控，涵盖CPU&#x2F;内存&#x2F;带宽等多维度监控。</p>\n<ul>\n<li>链路追踪</li>\n</ul>\n<p>基于Envoy开箱即用的多种tracing接入，拓展力强，目前已完成线上SkyWalking等tracing的接入。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>Hango作为一名开源领域的新生儿，我们会秉承拥抱云原生的理念，继续跟进Istio&#x2F;Envoy的演进，发挥更大的领域价值。下一阶段，我们会在多语言扩展，LB融合等多场景进行发力，也期待更多关注云原生、API网关的同学能够加入Hango开源社区建设。</p>\n<p>诚挚的欢迎大家关注Hango Gateway</p>\n"},{"title":"探索分布式事务解决方案以及实现原理","date":"2023-01-13T16:01:00.000Z","_content":"\n## 背景\n如今分布式系统和微服务架构的盛行，一个普通的操作可能在服务端就得由多个服务和数据库实例协同完成的。特别是在互联网金融等一致性要求较高的场景下，多个独立操作之间的一致性问题显得格外棘手。随着业务的快速发展、业务复杂度越来越高，几乎每个公司的系统都会从单体走向分布式，特别是转向微服务架构，随之而来就必然遇到分布式事务这个难题，而分布式事务管理服务正是为了解决这样的问题而诞生。\n本篇文章也将分享常见的几个分布式事务的解决方案，也是过去一段时间我在分布式事务学习的一些沉淀。\n\n## 什么是分布式事务\n说到事务大家了解，所有的事务都必须要满足ACID的原则，也就是原子性，一致性，隔离性，持久性。\n![事务acid.png](..%2F..%2Fimg%2F%E4%BA%8B%E5%8A%A1acid.png)\n\n在以前的单体架构中，往往只有一个服务，这个服务只访问一个数据库，业务比较简单。基于数据库本身的特性就已经能实现ACID了。但是现在我们要研究的微服务，微服务的业务往往比较复杂，一个业务就会跨越多个服务，每个服务都会有自己的数据库或者数据源，这时候如果还靠业务自己的数据库是难以实现整个业务的ACID的。\n![分布式事务的问题.png](..%2Fimg%2F%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%97%AE%E9%A2%98.png)\n\n在分布式系统下，一个业务跨越多个服务或数据源，每个服务都有一个本地事务，要保证所有本地事务最终状态一致，这样的事务就是分布式事务。\n\n## 分布式事务理论基础\n解决分布式事务的理论基础主要是两个理论，一个是CAP定理，一个是Base理论\n- CAP定理：\n\n2000年，加州大学的计算机科学家 Eric Brewer提出，分布式系统有三个指标，Consistency（一致性），Availability（可用性），Partition     tolerance（分区容错性）。但我们都知道在分布式系统中，分区是没有办法避免的，而在发生网络分区的时候，强一致性和可用性只能二选一，这就是CAP定理。\n\n![cap.png](..%2Fimg%2Fcap.png)\n\n- Base理论\n\n而在实际的场景下，一致性和可用性都非常地重要，两者都不想放弃，而BASE理论则是可以解决这个问题。\n\nBASE理论是对CAP的一种解决思路，包含三个思想：\n\n- Basically Available（基本可用）：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。\n- Soft State（软状态）：在一定时间内，允许出现中间状态，比如临时的不一致状态。\n- Eventually Consistent（最终一致性）：虽然无法保证强一致性，但在软状态结束后，最终达到一致性\n\n其实BASE理论就是对CAP理论中的C和A的矛盾所做的调和和选择，在CAP理论中我们讲想要达到一致性，那么就要牺牲可用性，但是在BASE里我们说，如果想要达成强一致性，是要牺牲可用性，但不是完全不可用，而是允许损失部分可用性，即保证核心可用。\n就比如说在ES集群中，有一个节点发生了故障，我们会将其从集群中剔除，这时候当前节点不可用，但是没关系，一旦它的网络恢复了，我们会重讲将它加入集群之中，重新给它分片，使其重新可用。反过来，如果我们想要达到完整的可用性，在CAP中需要牺牲一致性，但是在BASE理论中，只是临时的不一致，在软状态结束后，我们会使其最终达到一致性。\n\n而在我们分布式事务中，往往包含多个子事务，各个子事务各自执行和提交，结果有些成功，有些失败，这时候大家的状态不一致，但是我们希望事务中的各个子事务状态能够一致，要么大家都成功，要么大家都失败。因此我们可以借鉴CAP定理和BASE理论解决分布式最大的问题是各个子事务的一致性问题。\n\n第一种 解决方案就是基于AP的模式，各个子事务分别执行和提交，允许出现结果不一致，然后采取弥补措施恢复数据即可，实现最终一致。\n\n第二种是基于CP模式，各个子事务执行后互相等待，同时提交，同时回滚，达成强一致。但事务执行过程中，处于弱可用状态。\n\n## 分布式事务模型\n但是不论基于AP还是CP模式，这里都有一个共同点，那就是各个本地事务都需要互相通信，来辨别彼此的通信，但是各个子事务之间怎么进行通信呢？所以它就是需要有一个协调者来帮助分布式事务中的各个子事务进行通信，感知彼次的状态。\n![分布式事务模型.png](..%2Fimg%2F%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%A8%A1%E5%9E%8B.png)\n\n这里的子事务系统称作分支事务，有关联的各个分支事务组合在一起称为全局事务\n\n\n在分布式事务管理系统中由三个重要的角色组成：\n- TC（Transaction Coordinator）-事务协调者：维护全局和分支事务的状态，协调全局事务提交或回滚\n- TM（Transaction Manager）-事务管理器：定义全局事务的范围，开始全局事务，提交或回滚全局事务\n- RM（Resource Manager）-资源管理器：管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚\n\n![tctmrm.png](..%2Fimg%2Ftctmrm.png)\n\n一个典型的事务过程包括：\n\n- TM 向 TC 申请开启（Begin）一个全局事务，全局事务创建成功并生成一个全局唯一的 XID。\n- XID 在微服务调用链路的上下文中传播。\n- RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖。\n- TM 向 TC 发起针对 XID 的全局提交（Commit）或回滚（Rollback）决议。\n- TC 调度 XID 下管辖的全部分支事务完成提交（Commit）或回滚（Rollback）请求。\n\n当然这只是GTXS中的事务模型，并不是最终的解决方案。在实际的分布式事务管理系统中会根据业务是要做强一致还是最终一致延伸出了好几种解决方案。比如有XA模式，AT模式，TCC模式，SAGA模式。\n\n## 分布式事务常见解决方案\n\n### XA模式\nXA规范是X/Open 组织定义的分布式事务处理的标准，那么这个标准叫DTP标准，可以认为是分布式事务领域最早的一个标准。所以几乎所有主流的数据库都对XA规范提供了支持。比如MYSQL ，ORACLE都实现了这种标准，换言之这些数据库内部都已经实现了分布式事务，而采用的模式则是XA模式。这种分布式事务把XA模式定义成了两个阶段。\n\n第一阶段叫做准备阶段，事务协调者在准备阶段会向资源管理者RM发起准备的请求，在以下图片中RM是由事务参与者的SDK组成的，但是在这里RM是由数据库本身实现的，所以在此事务协调者会通知各个微服务的数据库执行自己的sql，但是执行完不要提交，而是把执行执行的结果告诉事务调节者进行就绪，事务协调者会根据各个事务的执行情况判断下一阶段的事情。\n\n如果都成功了则通知各个分支事务的数据库进行提交，否则让他们进行事务的回滚。所以我们看到这种XA模式就是基于数据库本身的特性来实现的分布式事务，因为一阶段并不提交，在二阶段才进行提交或回滚，它们是能够满足事务的ACID的特性的，它是一种强一致性的事务。\n\n![XA模式.png](..%2Fimg%2FXA%E6%A8%A1%E5%BC%8F.png)\n\n#### XA模式的优势与不足\n* 优点\n\n前面我们提到各个分支事务在一阶段的时候只是执行事务而不提交，那么这个事务一直处于运行中的一个状态，那么我们知道事务本身就具备ACID的特性，到了二阶段时候，所有的事务都执行完了再一起提交，所以每个分支事务都具备ACID的能力，而每个事务之间都互相等待，所以整个全局事务都具备ACID的特性。所以这种XA模式具备强一致性的，这是它的第一个优势。那么第二个优势就是说数据库本身就已经实现了分布式事务的能力，我们只是在其基础上做了封装，实现起来也比较简单，在使用的时候是没有代码入侵的，这是它第二个优势\n\n* 缺点\n\n由于分支事务在执行完业务sql的时候并不会进行事务的提交，而是等待TC的过程中会占用数据库锁，如果其他分支事务耗时较长，整个过程中所有的分支事务都处于等待的状态，其他事务都没办法进行资源的访问，造成了资源的浪费，所以它的性能是非常差的，可用性就降低了。第二个缺点，XA模式是依赖于数据库的实现，如果数据库不支持XA的规范，就比如说Redis这种非关系型的数据库，XA模式就没办法实现，这是它的第二个缺点。\n\n### AT模式\nAT模式同样是分阶段提交的事务模型，不过弥补了XA模型中资源锁定周期过长的缺陷。整体来说它还是这个模型，一开始都是一样的，TM开启全局事务并完成全局事务的注册，然后去调用我们的每个分支，每个RM都到TC进行分支事务的注册，并且执行本地业务SQL，但是此处AT执行完SQl之后会立即提交分支事务，而不是等待其他事务的提交，所以它的性能会优于XA模式。但是为了能够进行分支事务的回滚，RM会拦截SQL的执行并且给数据形成快照undo log，这时一阶段就可以放心大胆地提交，然后将状态报告给TC。第二阶段TM在执行完分支事务的调用之后会通知TC进行全局事务的提交。TC会根据分支事务的状态来判断提交或回滚。此处的提交并不是数据库事务的提交，而是通知各个分支事务RM将undo log 进行删除，并且是异步删除，进一步提高性能。如果存在失败的分支事务，则会通知后各个分支事务进行数据的回滚，一旦回滚成功，也需要将undo log进行删除。这就是二阶段的变化。以上就是AT模式的玩法。\n\n![fmt模式.png](..%2Fimg%2Ffmt%E6%A8%A1%E5%BC%8F.png)\n\n#### AT模式的优势与不足\n* 优点\n\n  AT是基于XA 2PC的模式实现的，针对于木桶效应，通过业务数据提交时自动拦截所有 SQL，将 SQL 对数据修改前、修改后的结果分别保存快照，生成行锁，通过本地事务一起提交到操作的数据源中，相当于自动记录了重做和回滚日志。这样每一个数据源都可以单独提交，然后立刻释放锁和资源。\n\n* 缺点\n\n  提高了吞吐量的同时，破坏了隔离性，会出现脏写的情况（在回滚前数据发生了改变，导致无法逆向SQL来补偿数据）\n### TCC模式\nTCC模式和AT模式相似，每个阶段都是独立事务，不同的是TCC通过人工编码来实现数据恢复，需要实现三个方法：\nTry：资源的检测和预留\nConfirm：完成资源操作业务，要求Try成功 Confirm一定要能成功\nCancel：预留资源释放，可以理解Try的反向操作\n\n![TCC模式.png](..%2Fimg%2FTCC%E6%A8%A1%E5%BC%8F.png)\n\n### SAGA模式\n\nSAGA模式是GTXS提供的长事务解决方案，也分为两个阶段。它在一阶段的时候直接提交本地事务，而在二阶段的过程中如果成功则什么都不做，如果失败则通过编写补偿业务来回滚。聊到这大家可能觉得这和TCC模式也很像，但其实不一样。因为TCC在一阶段并不是提交事务，而是做资源的预留而已，这里一阶段直接提交事务。\n而第二阶段也不一样，TCC在第二阶段是对预留资源的扣除或者回滚，而SAGA在第二阶段如果成功则什么事情都不做，如果失败则通过编写补偿方法来回滚事务。\n但也因为SAGA模式在第二阶段直接操作的资源本身，所有它也失去了TCC模式中资源的隔离效果，所以SAGA模式中最大的缺点就是没有隔离性，事务与事务之间是可能存在脏写的，所以它是有隔离的安全问题。它的执行流程有下面这张图。它会在第一阶段按照顺序逐个执行分支事务，而一旦在这个事务流程有事务的执行出现了问题，则会反向地去执行补偿逻辑，从而保证整个事务地状态一致性。\n它还有一个特点是，它这里地每个分支事务是可以基于事件驱动的，而这种事件有一个好处就是它的吞吐能力会比较强，它不会阻塞和等待，你们可以理解它是一种状态机的机制来实现。但也因此每个分支事务的执行事件不确定，所以它的时效性可能比较差。\n这种模型一般比较适用于事务跨度比较大的情况的场景来使用，但是一般SAGA的使用场景是比较少的，一般都是TCC或者FMT模式。\n\n![SAGA模式.png](..%2Fimg%2FSAGA%E6%A8%A1%E5%BC%8F.png)\n\n#### SAGA模式的优势与不足\n* 优点\n\n事务参与者可以基于事件驱动实现异步调用，吞吐高\n\n一阶段直接提交事务，无锁，性能好\n\n不用编写TCC中的三个阶段，实现简单\n\n* 缺点：\n\n软状态持续时间不确定，时效性差\n\n没有锁，没有事务隔离，会有脏写\n\n### 四种模式对比\n\n![四种模式对比.png](..%2Fimg%2F%E5%9B%9B%E7%A7%8D%E6%A8%A1%E5%BC%8F%E5%AF%B9%E6%AF%94.png)","source":"_posts/FuncDesign/探索分布式事务解决方案以及实现原理.md","raw":"---\ntitle: 探索分布式事务解决方案以及实现原理\ndate: 2023-01-14 00:01:00\ntags:\n  - 分布式事务\ncategories: 分布式事务\n---\n\n## 背景\n如今分布式系统和微服务架构的盛行，一个普通的操作可能在服务端就得由多个服务和数据库实例协同完成的。特别是在互联网金融等一致性要求较高的场景下，多个独立操作之间的一致性问题显得格外棘手。随着业务的快速发展、业务复杂度越来越高，几乎每个公司的系统都会从单体走向分布式，特别是转向微服务架构，随之而来就必然遇到分布式事务这个难题，而分布式事务管理服务正是为了解决这样的问题而诞生。\n本篇文章也将分享常见的几个分布式事务的解决方案，也是过去一段时间我在分布式事务学习的一些沉淀。\n\n## 什么是分布式事务\n说到事务大家了解，所有的事务都必须要满足ACID的原则，也就是原子性，一致性，隔离性，持久性。\n![事务acid.png](..%2F..%2Fimg%2F%E4%BA%8B%E5%8A%A1acid.png)\n\n在以前的单体架构中，往往只有一个服务，这个服务只访问一个数据库，业务比较简单。基于数据库本身的特性就已经能实现ACID了。但是现在我们要研究的微服务，微服务的业务往往比较复杂，一个业务就会跨越多个服务，每个服务都会有自己的数据库或者数据源，这时候如果还靠业务自己的数据库是难以实现整个业务的ACID的。\n![分布式事务的问题.png](..%2Fimg%2F%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%97%AE%E9%A2%98.png)\n\n在分布式系统下，一个业务跨越多个服务或数据源，每个服务都有一个本地事务，要保证所有本地事务最终状态一致，这样的事务就是分布式事务。\n\n## 分布式事务理论基础\n解决分布式事务的理论基础主要是两个理论，一个是CAP定理，一个是Base理论\n- CAP定理：\n\n2000年，加州大学的计算机科学家 Eric Brewer提出，分布式系统有三个指标，Consistency（一致性），Availability（可用性），Partition     tolerance（分区容错性）。但我们都知道在分布式系统中，分区是没有办法避免的，而在发生网络分区的时候，强一致性和可用性只能二选一，这就是CAP定理。\n\n![cap.png](..%2Fimg%2Fcap.png)\n\n- Base理论\n\n而在实际的场景下，一致性和可用性都非常地重要，两者都不想放弃，而BASE理论则是可以解决这个问题。\n\nBASE理论是对CAP的一种解决思路，包含三个思想：\n\n- Basically Available（基本可用）：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。\n- Soft State（软状态）：在一定时间内，允许出现中间状态，比如临时的不一致状态。\n- Eventually Consistent（最终一致性）：虽然无法保证强一致性，但在软状态结束后，最终达到一致性\n\n其实BASE理论就是对CAP理论中的C和A的矛盾所做的调和和选择，在CAP理论中我们讲想要达到一致性，那么就要牺牲可用性，但是在BASE里我们说，如果想要达成强一致性，是要牺牲可用性，但不是完全不可用，而是允许损失部分可用性，即保证核心可用。\n就比如说在ES集群中，有一个节点发生了故障，我们会将其从集群中剔除，这时候当前节点不可用，但是没关系，一旦它的网络恢复了，我们会重讲将它加入集群之中，重新给它分片，使其重新可用。反过来，如果我们想要达到完整的可用性，在CAP中需要牺牲一致性，但是在BASE理论中，只是临时的不一致，在软状态结束后，我们会使其最终达到一致性。\n\n而在我们分布式事务中，往往包含多个子事务，各个子事务各自执行和提交，结果有些成功，有些失败，这时候大家的状态不一致，但是我们希望事务中的各个子事务状态能够一致，要么大家都成功，要么大家都失败。因此我们可以借鉴CAP定理和BASE理论解决分布式最大的问题是各个子事务的一致性问题。\n\n第一种 解决方案就是基于AP的模式，各个子事务分别执行和提交，允许出现结果不一致，然后采取弥补措施恢复数据即可，实现最终一致。\n\n第二种是基于CP模式，各个子事务执行后互相等待，同时提交，同时回滚，达成强一致。但事务执行过程中，处于弱可用状态。\n\n## 分布式事务模型\n但是不论基于AP还是CP模式，这里都有一个共同点，那就是各个本地事务都需要互相通信，来辨别彼此的通信，但是各个子事务之间怎么进行通信呢？所以它就是需要有一个协调者来帮助分布式事务中的各个子事务进行通信，感知彼次的状态。\n![分布式事务模型.png](..%2Fimg%2F%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%A8%A1%E5%9E%8B.png)\n\n这里的子事务系统称作分支事务，有关联的各个分支事务组合在一起称为全局事务\n\n\n在分布式事务管理系统中由三个重要的角色组成：\n- TC（Transaction Coordinator）-事务协调者：维护全局和分支事务的状态，协调全局事务提交或回滚\n- TM（Transaction Manager）-事务管理器：定义全局事务的范围，开始全局事务，提交或回滚全局事务\n- RM（Resource Manager）-资源管理器：管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚\n\n![tctmrm.png](..%2Fimg%2Ftctmrm.png)\n\n一个典型的事务过程包括：\n\n- TM 向 TC 申请开启（Begin）一个全局事务，全局事务创建成功并生成一个全局唯一的 XID。\n- XID 在微服务调用链路的上下文中传播。\n- RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖。\n- TM 向 TC 发起针对 XID 的全局提交（Commit）或回滚（Rollback）决议。\n- TC 调度 XID 下管辖的全部分支事务完成提交（Commit）或回滚（Rollback）请求。\n\n当然这只是GTXS中的事务模型，并不是最终的解决方案。在实际的分布式事务管理系统中会根据业务是要做强一致还是最终一致延伸出了好几种解决方案。比如有XA模式，AT模式，TCC模式，SAGA模式。\n\n## 分布式事务常见解决方案\n\n### XA模式\nXA规范是X/Open 组织定义的分布式事务处理的标准，那么这个标准叫DTP标准，可以认为是分布式事务领域最早的一个标准。所以几乎所有主流的数据库都对XA规范提供了支持。比如MYSQL ，ORACLE都实现了这种标准，换言之这些数据库内部都已经实现了分布式事务，而采用的模式则是XA模式。这种分布式事务把XA模式定义成了两个阶段。\n\n第一阶段叫做准备阶段，事务协调者在准备阶段会向资源管理者RM发起准备的请求，在以下图片中RM是由事务参与者的SDK组成的，但是在这里RM是由数据库本身实现的，所以在此事务协调者会通知各个微服务的数据库执行自己的sql，但是执行完不要提交，而是把执行执行的结果告诉事务调节者进行就绪，事务协调者会根据各个事务的执行情况判断下一阶段的事情。\n\n如果都成功了则通知各个分支事务的数据库进行提交，否则让他们进行事务的回滚。所以我们看到这种XA模式就是基于数据库本身的特性来实现的分布式事务，因为一阶段并不提交，在二阶段才进行提交或回滚，它们是能够满足事务的ACID的特性的，它是一种强一致性的事务。\n\n![XA模式.png](..%2Fimg%2FXA%E6%A8%A1%E5%BC%8F.png)\n\n#### XA模式的优势与不足\n* 优点\n\n前面我们提到各个分支事务在一阶段的时候只是执行事务而不提交，那么这个事务一直处于运行中的一个状态，那么我们知道事务本身就具备ACID的特性，到了二阶段时候，所有的事务都执行完了再一起提交，所以每个分支事务都具备ACID的能力，而每个事务之间都互相等待，所以整个全局事务都具备ACID的特性。所以这种XA模式具备强一致性的，这是它的第一个优势。那么第二个优势就是说数据库本身就已经实现了分布式事务的能力，我们只是在其基础上做了封装，实现起来也比较简单，在使用的时候是没有代码入侵的，这是它第二个优势\n\n* 缺点\n\n由于分支事务在执行完业务sql的时候并不会进行事务的提交，而是等待TC的过程中会占用数据库锁，如果其他分支事务耗时较长，整个过程中所有的分支事务都处于等待的状态，其他事务都没办法进行资源的访问，造成了资源的浪费，所以它的性能是非常差的，可用性就降低了。第二个缺点，XA模式是依赖于数据库的实现，如果数据库不支持XA的规范，就比如说Redis这种非关系型的数据库，XA模式就没办法实现，这是它的第二个缺点。\n\n### AT模式\nAT模式同样是分阶段提交的事务模型，不过弥补了XA模型中资源锁定周期过长的缺陷。整体来说它还是这个模型，一开始都是一样的，TM开启全局事务并完成全局事务的注册，然后去调用我们的每个分支，每个RM都到TC进行分支事务的注册，并且执行本地业务SQL，但是此处AT执行完SQl之后会立即提交分支事务，而不是等待其他事务的提交，所以它的性能会优于XA模式。但是为了能够进行分支事务的回滚，RM会拦截SQL的执行并且给数据形成快照undo log，这时一阶段就可以放心大胆地提交，然后将状态报告给TC。第二阶段TM在执行完分支事务的调用之后会通知TC进行全局事务的提交。TC会根据分支事务的状态来判断提交或回滚。此处的提交并不是数据库事务的提交，而是通知各个分支事务RM将undo log 进行删除，并且是异步删除，进一步提高性能。如果存在失败的分支事务，则会通知后各个分支事务进行数据的回滚，一旦回滚成功，也需要将undo log进行删除。这就是二阶段的变化。以上就是AT模式的玩法。\n\n![fmt模式.png](..%2Fimg%2Ffmt%E6%A8%A1%E5%BC%8F.png)\n\n#### AT模式的优势与不足\n* 优点\n\n  AT是基于XA 2PC的模式实现的，针对于木桶效应，通过业务数据提交时自动拦截所有 SQL，将 SQL 对数据修改前、修改后的结果分别保存快照，生成行锁，通过本地事务一起提交到操作的数据源中，相当于自动记录了重做和回滚日志。这样每一个数据源都可以单独提交，然后立刻释放锁和资源。\n\n* 缺点\n\n  提高了吞吐量的同时，破坏了隔离性，会出现脏写的情况（在回滚前数据发生了改变，导致无法逆向SQL来补偿数据）\n### TCC模式\nTCC模式和AT模式相似，每个阶段都是独立事务，不同的是TCC通过人工编码来实现数据恢复，需要实现三个方法：\nTry：资源的检测和预留\nConfirm：完成资源操作业务，要求Try成功 Confirm一定要能成功\nCancel：预留资源释放，可以理解Try的反向操作\n\n![TCC模式.png](..%2Fimg%2FTCC%E6%A8%A1%E5%BC%8F.png)\n\n### SAGA模式\n\nSAGA模式是GTXS提供的长事务解决方案，也分为两个阶段。它在一阶段的时候直接提交本地事务，而在二阶段的过程中如果成功则什么都不做，如果失败则通过编写补偿业务来回滚。聊到这大家可能觉得这和TCC模式也很像，但其实不一样。因为TCC在一阶段并不是提交事务，而是做资源的预留而已，这里一阶段直接提交事务。\n而第二阶段也不一样，TCC在第二阶段是对预留资源的扣除或者回滚，而SAGA在第二阶段如果成功则什么事情都不做，如果失败则通过编写补偿方法来回滚事务。\n但也因为SAGA模式在第二阶段直接操作的资源本身，所有它也失去了TCC模式中资源的隔离效果，所以SAGA模式中最大的缺点就是没有隔离性，事务与事务之间是可能存在脏写的，所以它是有隔离的安全问题。它的执行流程有下面这张图。它会在第一阶段按照顺序逐个执行分支事务，而一旦在这个事务流程有事务的执行出现了问题，则会反向地去执行补偿逻辑，从而保证整个事务地状态一致性。\n它还有一个特点是，它这里地每个分支事务是可以基于事件驱动的，而这种事件有一个好处就是它的吞吐能力会比较强，它不会阻塞和等待，你们可以理解它是一种状态机的机制来实现。但也因此每个分支事务的执行事件不确定，所以它的时效性可能比较差。\n这种模型一般比较适用于事务跨度比较大的情况的场景来使用，但是一般SAGA的使用场景是比较少的，一般都是TCC或者FMT模式。\n\n![SAGA模式.png](..%2Fimg%2FSAGA%E6%A8%A1%E5%BC%8F.png)\n\n#### SAGA模式的优势与不足\n* 优点\n\n事务参与者可以基于事件驱动实现异步调用，吞吐高\n\n一阶段直接提交事务，无锁，性能好\n\n不用编写TCC中的三个阶段，实现简单\n\n* 缺点：\n\n软状态持续时间不确定，时效性差\n\n没有锁，没有事务隔离，会有脏写\n\n### 四种模式对比\n\n![四种模式对比.png](..%2Fimg%2F%E5%9B%9B%E7%A7%8D%E6%A8%A1%E5%BC%8F%E5%AF%B9%E6%AF%94.png)","slug":"FuncDesign/探索分布式事务解决方案以及实现原理","published":1,"updated":"2024-01-18T08:30:47.684Z","_id":"clrhmb5ls000pqzyw0opb2ow4","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>如今分布式系统和微服务架构的盛行，一个普通的操作可能在服务端就得由多个服务和数据库实例协同完成的。特别是在互联网金融等一致性要求较高的场景下，多个独立操作之间的一致性问题显得格外棘手。随着业务的快速发展、业务复杂度越来越高，几乎每个公司的系统都会从单体走向分布式，特别是转向微服务架构，随之而来就必然遇到分布式事务这个难题，而分布式事务管理服务正是为了解决这样的问题而诞生。<br>本篇文章也将分享常见的几个分布式事务的解决方案，也是过去一段时间我在分布式事务学习的一些沉淀。</p>\n<h2 id=\"什么是分布式事务\"><a href=\"#什么是分布式事务\" class=\"headerlink\" title=\"什么是分布式事务\"></a>什么是分布式事务</h2><p>说到事务大家了解，所有的事务都必须要满足ACID的原则，也就是原子性，一致性，隔离性，持久性。<br><img src=\"/../../img/%E4%BA%8B%E5%8A%A1acid.png\" alt=\"事务acid.png\"></p>\n<p>在以前的单体架构中，往往只有一个服务，这个服务只访问一个数据库，业务比较简单。基于数据库本身的特性就已经能实现ACID了。但是现在我们要研究的微服务，微服务的业务往往比较复杂，一个业务就会跨越多个服务，每个服务都会有自己的数据库或者数据源，这时候如果还靠业务自己的数据库是难以实现整个业务的ACID的。<br><img src=\"/../img/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%97%AE%E9%A2%98.png\" alt=\"分布式事务的问题.png\"></p>\n<p>在分布式系统下，一个业务跨越多个服务或数据源，每个服务都有一个本地事务，要保证所有本地事务最终状态一致，这样的事务就是分布式事务。</p>\n<h2 id=\"分布式事务理论基础\"><a href=\"#分布式事务理论基础\" class=\"headerlink\" title=\"分布式事务理论基础\"></a>分布式事务理论基础</h2><p>解决分布式事务的理论基础主要是两个理论，一个是CAP定理，一个是Base理论</p>\n<ul>\n<li>CAP定理：</li>\n</ul>\n<p>2000年，加州大学的计算机科学家 Eric Brewer提出，分布式系统有三个指标，Consistency（一致性），Availability（可用性），Partition     tolerance（分区容错性）。但我们都知道在分布式系统中，分区是没有办法避免的，而在发生网络分区的时候，强一致性和可用性只能二选一，这就是CAP定理。</p>\n<p><img src=\"/../img/cap.png\" alt=\"cap.png\"></p>\n<ul>\n<li>Base理论</li>\n</ul>\n<p>而在实际的场景下，一致性和可用性都非常地重要，两者都不想放弃，而BASE理论则是可以解决这个问题。</p>\n<p>BASE理论是对CAP的一种解决思路，包含三个思想：</p>\n<ul>\n<li>Basically Available（基本可用）：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</li>\n<li>Soft State（软状态）：在一定时间内，允许出现中间状态，比如临时的不一致状态。</li>\n<li>Eventually Consistent（最终一致性）：虽然无法保证强一致性，但在软状态结束后，最终达到一致性</li>\n</ul>\n<p>其实BASE理论就是对CAP理论中的C和A的矛盾所做的调和和选择，在CAP理论中我们讲想要达到一致性，那么就要牺牲可用性，但是在BASE里我们说，如果想要达成强一致性，是要牺牲可用性，但不是完全不可用，而是允许损失部分可用性，即保证核心可用。<br>就比如说在ES集群中，有一个节点发生了故障，我们会将其从集群中剔除，这时候当前节点不可用，但是没关系，一旦它的网络恢复了，我们会重讲将它加入集群之中，重新给它分片，使其重新可用。反过来，如果我们想要达到完整的可用性，在CAP中需要牺牲一致性，但是在BASE理论中，只是临时的不一致，在软状态结束后，我们会使其最终达到一致性。</p>\n<p>而在我们分布式事务中，往往包含多个子事务，各个子事务各自执行和提交，结果有些成功，有些失败，这时候大家的状态不一致，但是我们希望事务中的各个子事务状态能够一致，要么大家都成功，要么大家都失败。因此我们可以借鉴CAP定理和BASE理论解决分布式最大的问题是各个子事务的一致性问题。</p>\n<p>第一种 解决方案就是基于AP的模式，各个子事务分别执行和提交，允许出现结果不一致，然后采取弥补措施恢复数据即可，实现最终一致。</p>\n<p>第二种是基于CP模式，各个子事务执行后互相等待，同时提交，同时回滚，达成强一致。但事务执行过程中，处于弱可用状态。</p>\n<h2 id=\"分布式事务模型\"><a href=\"#分布式事务模型\" class=\"headerlink\" title=\"分布式事务模型\"></a>分布式事务模型</h2><p>但是不论基于AP还是CP模式，这里都有一个共同点，那就是各个本地事务都需要互相通信，来辨别彼此的通信，但是各个子事务之间怎么进行通信呢？所以它就是需要有一个协调者来帮助分布式事务中的各个子事务进行通信，感知彼次的状态。<br><img src=\"/../img/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%A8%A1%E5%9E%8B.png\" alt=\"分布式事务模型.png\"></p>\n<p>这里的子事务系统称作分支事务，有关联的各个分支事务组合在一起称为全局事务</p>\n<p>在分布式事务管理系统中由三个重要的角色组成：</p>\n<ul>\n<li>TC（Transaction Coordinator）-事务协调者：维护全局和分支事务的状态，协调全局事务提交或回滚</li>\n<li>TM（Transaction Manager）-事务管理器：定义全局事务的范围，开始全局事务，提交或回滚全局事务</li>\n<li>RM（Resource Manager）-资源管理器：管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚</li>\n</ul>\n<p><img src=\"/../img/tctmrm.png\" alt=\"tctmrm.png\"></p>\n<p>一个典型的事务过程包括：</p>\n<ul>\n<li>TM 向 TC 申请开启（Begin）一个全局事务，全局事务创建成功并生成一个全局唯一的 XID。</li>\n<li>XID 在微服务调用链路的上下文中传播。</li>\n<li>RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖。</li>\n<li>TM 向 TC 发起针对 XID 的全局提交（Commit）或回滚（Rollback）决议。</li>\n<li>TC 调度 XID 下管辖的全部分支事务完成提交（Commit）或回滚（Rollback）请求。</li>\n</ul>\n<p>当然这只是GTXS中的事务模型，并不是最终的解决方案。在实际的分布式事务管理系统中会根据业务是要做强一致还是最终一致延伸出了好几种解决方案。比如有XA模式，AT模式，TCC模式，SAGA模式。</p>\n<h2 id=\"分布式事务常见解决方案\"><a href=\"#分布式事务常见解决方案\" class=\"headerlink\" title=\"分布式事务常见解决方案\"></a>分布式事务常见解决方案</h2><h3 id=\"XA模式\"><a href=\"#XA模式\" class=\"headerlink\" title=\"XA模式\"></a>XA模式</h3><p>XA规范是X/Open 组织定义的分布式事务处理的标准，那么这个标准叫DTP标准，可以认为是分布式事务领域最早的一个标准。所以几乎所有主流的数据库都对XA规范提供了支持。比如MYSQL ，ORACLE都实现了这种标准，换言之这些数据库内部都已经实现了分布式事务，而采用的模式则是XA模式。这种分布式事务把XA模式定义成了两个阶段。</p>\n<p>第一阶段叫做准备阶段，事务协调者在准备阶段会向资源管理者RM发起准备的请求，在以下图片中RM是由事务参与者的SDK组成的，但是在这里RM是由数据库本身实现的，所以在此事务协调者会通知各个微服务的数据库执行自己的sql，但是执行完不要提交，而是把执行执行的结果告诉事务调节者进行就绪，事务协调者会根据各个事务的执行情况判断下一阶段的事情。</p>\n<p>如果都成功了则通知各个分支事务的数据库进行提交，否则让他们进行事务的回滚。所以我们看到这种XA模式就是基于数据库本身的特性来实现的分布式事务，因为一阶段并不提交，在二阶段才进行提交或回滚，它们是能够满足事务的ACID的特性的，它是一种强一致性的事务。</p>\n<p><img src=\"/../img/XA%E6%A8%A1%E5%BC%8F.png\" alt=\"XA模式.png\"></p>\n<h4 id=\"XA模式的优势与不足\"><a href=\"#XA模式的优势与不足\" class=\"headerlink\" title=\"XA模式的优势与不足\"></a>XA模式的优势与不足</h4><ul>\n<li>优点</li>\n</ul>\n<p>前面我们提到各个分支事务在一阶段的时候只是执行事务而不提交，那么这个事务一直处于运行中的一个状态，那么我们知道事务本身就具备ACID的特性，到了二阶段时候，所有的事务都执行完了再一起提交，所以每个分支事务都具备ACID的能力，而每个事务之间都互相等待，所以整个全局事务都具备ACID的特性。所以这种XA模式具备强一致性的，这是它的第一个优势。那么第二个优势就是说数据库本身就已经实现了分布式事务的能力，我们只是在其基础上做了封装，实现起来也比较简单，在使用的时候是没有代码入侵的，这是它第二个优势</p>\n<ul>\n<li>缺点</li>\n</ul>\n<p>由于分支事务在执行完业务sql的时候并不会进行事务的提交，而是等待TC的过程中会占用数据库锁，如果其他分支事务耗时较长，整个过程中所有的分支事务都处于等待的状态，其他事务都没办法进行资源的访问，造成了资源的浪费，所以它的性能是非常差的，可用性就降低了。第二个缺点，XA模式是依赖于数据库的实现，如果数据库不支持XA的规范，就比如说Redis这种非关系型的数据库，XA模式就没办法实现，这是它的第二个缺点。</p>\n<h3 id=\"AT模式\"><a href=\"#AT模式\" class=\"headerlink\" title=\"AT模式\"></a>AT模式</h3><p>AT模式同样是分阶段提交的事务模型，不过弥补了XA模型中资源锁定周期过长的缺陷。整体来说它还是这个模型，一开始都是一样的，TM开启全局事务并完成全局事务的注册，然后去调用我们的每个分支，每个RM都到TC进行分支事务的注册，并且执行本地业务SQL，但是此处AT执行完SQl之后会立即提交分支事务，而不是等待其他事务的提交，所以它的性能会优于XA模式。但是为了能够进行分支事务的回滚，RM会拦截SQL的执行并且给数据形成快照undo log，这时一阶段就可以放心大胆地提交，然后将状态报告给TC。第二阶段TM在执行完分支事务的调用之后会通知TC进行全局事务的提交。TC会根据分支事务的状态来判断提交或回滚。此处的提交并不是数据库事务的提交，而是通知各个分支事务RM将undo log 进行删除，并且是异步删除，进一步提高性能。如果存在失败的分支事务，则会通知后各个分支事务进行数据的回滚，一旦回滚成功，也需要将undo log进行删除。这就是二阶段的变化。以上就是AT模式的玩法。</p>\n<p><img src=\"/../img/fmt%E6%A8%A1%E5%BC%8F.png\" alt=\"fmt模式.png\"></p>\n<h4 id=\"AT模式的优势与不足\"><a href=\"#AT模式的优势与不足\" class=\"headerlink\" title=\"AT模式的优势与不足\"></a>AT模式的优势与不足</h4><ul>\n<li><p>优点</p>\n<p>AT是基于XA 2PC的模式实现的，针对于木桶效应，通过业务数据提交时自动拦截所有 SQL，将 SQL 对数据修改前、修改后的结果分别保存快照，生成行锁，通过本地事务一起提交到操作的数据源中，相当于自动记录了重做和回滚日志。这样每一个数据源都可以单独提交，然后立刻释放锁和资源。</p>\n</li>\n<li><p>缺点</p>\n<p>提高了吞吐量的同时，破坏了隔离性，会出现脏写的情况（在回滚前数据发生了改变，导致无法逆向SQL来补偿数据）</p>\n</li>\n</ul>\n<h3 id=\"TCC模式\"><a href=\"#TCC模式\" class=\"headerlink\" title=\"TCC模式\"></a>TCC模式</h3><p>TCC模式和AT模式相似，每个阶段都是独立事务，不同的是TCC通过人工编码来实现数据恢复，需要实现三个方法：<br>Try：资源的检测和预留<br>Confirm：完成资源操作业务，要求Try成功 Confirm一定要能成功<br>Cancel：预留资源释放，可以理解Try的反向操作</p>\n<p><img src=\"/../img/TCC%E6%A8%A1%E5%BC%8F.png\" alt=\"TCC模式.png\"></p>\n<h3 id=\"SAGA模式\"><a href=\"#SAGA模式\" class=\"headerlink\" title=\"SAGA模式\"></a>SAGA模式</h3><p>SAGA模式是GTXS提供的长事务解决方案，也分为两个阶段。它在一阶段的时候直接提交本地事务，而在二阶段的过程中如果成功则什么都不做，如果失败则通过编写补偿业务来回滚。聊到这大家可能觉得这和TCC模式也很像，但其实不一样。因为TCC在一阶段并不是提交事务，而是做资源的预留而已，这里一阶段直接提交事务。<br>而第二阶段也不一样，TCC在第二阶段是对预留资源的扣除或者回滚，而SAGA在第二阶段如果成功则什么事情都不做，如果失败则通过编写补偿方法来回滚事务。<br>但也因为SAGA模式在第二阶段直接操作的资源本身，所有它也失去了TCC模式中资源的隔离效果，所以SAGA模式中最大的缺点就是没有隔离性，事务与事务之间是可能存在脏写的，所以它是有隔离的安全问题。它的执行流程有下面这张图。它会在第一阶段按照顺序逐个执行分支事务，而一旦在这个事务流程有事务的执行出现了问题，则会反向地去执行补偿逻辑，从而保证整个事务地状态一致性。<br>它还有一个特点是，它这里地每个分支事务是可以基于事件驱动的，而这种事件有一个好处就是它的吞吐能力会比较强，它不会阻塞和等待，你们可以理解它是一种状态机的机制来实现。但也因此每个分支事务的执行事件不确定，所以它的时效性可能比较差。<br>这种模型一般比较适用于事务跨度比较大的情况的场景来使用，但是一般SAGA的使用场景是比较少的，一般都是TCC或者FMT模式。</p>\n<p><img src=\"/../img/SAGA%E6%A8%A1%E5%BC%8F.png\" alt=\"SAGA模式.png\"></p>\n<h4 id=\"SAGA模式的优势与不足\"><a href=\"#SAGA模式的优势与不足\" class=\"headerlink\" title=\"SAGA模式的优势与不足\"></a>SAGA模式的优势与不足</h4><ul>\n<li>优点</li>\n</ul>\n<p>事务参与者可以基于事件驱动实现异步调用，吞吐高</p>\n<p>一阶段直接提交事务，无锁，性能好</p>\n<p>不用编写TCC中的三个阶段，实现简单</p>\n<ul>\n<li>缺点：</li>\n</ul>\n<p>软状态持续时间不确定，时效性差</p>\n<p>没有锁，没有事务隔离，会有脏写</p>\n<h3 id=\"四种模式对比\"><a href=\"#四种模式对比\" class=\"headerlink\" title=\"四种模式对比\"></a>四种模式对比</h3><p><img src=\"/../img/%E5%9B%9B%E7%A7%8D%E6%A8%A1%E5%BC%8F%E5%AF%B9%E6%AF%94.png\" alt=\"四种模式对比.png\"></p>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>如今分布式系统和微服务架构的盛行，一个普通的操作可能在服务端就得由多个服务和数据库实例协同完成的。特别是在互联网金融等一致性要求较高的场景下，多个独立操作之间的一致性问题显得格外棘手。随着业务的快速发展、业务复杂度越来越高，几乎每个公司的系统都会从单体走向分布式，特别是转向微服务架构，随之而来就必然遇到分布式事务这个难题，而分布式事务管理服务正是为了解决这样的问题而诞生。<br>本篇文章也将分享常见的几个分布式事务的解决方案，也是过去一段时间我在分布式事务学习的一些沉淀。</p>\n<h2 id=\"什么是分布式事务\"><a href=\"#什么是分布式事务\" class=\"headerlink\" title=\"什么是分布式事务\"></a>什么是分布式事务</h2><p>说到事务大家了解，所有的事务都必须要满足ACID的原则，也就是原子性，一致性，隔离性，持久性。<br><img src=\"/../../img/%E4%BA%8B%E5%8A%A1acid.png\" alt=\"事务acid.png\"></p>\n<p>在以前的单体架构中，往往只有一个服务，这个服务只访问一个数据库，业务比较简单。基于数据库本身的特性就已经能实现ACID了。但是现在我们要研究的微服务，微服务的业务往往比较复杂，一个业务就会跨越多个服务，每个服务都会有自己的数据库或者数据源，这时候如果还靠业务自己的数据库是难以实现整个业务的ACID的。<br><img src=\"/../img/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%97%AE%E9%A2%98.png\" alt=\"分布式事务的问题.png\"></p>\n<p>在分布式系统下，一个业务跨越多个服务或数据源，每个服务都有一个本地事务，要保证所有本地事务最终状态一致，这样的事务就是分布式事务。</p>\n<h2 id=\"分布式事务理论基础\"><a href=\"#分布式事务理论基础\" class=\"headerlink\" title=\"分布式事务理论基础\"></a>分布式事务理论基础</h2><p>解决分布式事务的理论基础主要是两个理论，一个是CAP定理，一个是Base理论</p>\n<ul>\n<li>CAP定理：</li>\n</ul>\n<p>2000年，加州大学的计算机科学家 Eric Brewer提出，分布式系统有三个指标，Consistency（一致性），Availability（可用性），Partition     tolerance（分区容错性）。但我们都知道在分布式系统中，分区是没有办法避免的，而在发生网络分区的时候，强一致性和可用性只能二选一，这就是CAP定理。</p>\n<p><img src=\"/../img/cap.png\" alt=\"cap.png\"></p>\n<ul>\n<li>Base理论</li>\n</ul>\n<p>而在实际的场景下，一致性和可用性都非常地重要，两者都不想放弃，而BASE理论则是可以解决这个问题。</p>\n<p>BASE理论是对CAP的一种解决思路，包含三个思想：</p>\n<ul>\n<li>Basically Available（基本可用）：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</li>\n<li>Soft State（软状态）：在一定时间内，允许出现中间状态，比如临时的不一致状态。</li>\n<li>Eventually Consistent（最终一致性）：虽然无法保证强一致性，但在软状态结束后，最终达到一致性</li>\n</ul>\n<p>其实BASE理论就是对CAP理论中的C和A的矛盾所做的调和和选择，在CAP理论中我们讲想要达到一致性，那么就要牺牲可用性，但是在BASE里我们说，如果想要达成强一致性，是要牺牲可用性，但不是完全不可用，而是允许损失部分可用性，即保证核心可用。<br>就比如说在ES集群中，有一个节点发生了故障，我们会将其从集群中剔除，这时候当前节点不可用，但是没关系，一旦它的网络恢复了，我们会重讲将它加入集群之中，重新给它分片，使其重新可用。反过来，如果我们想要达到完整的可用性，在CAP中需要牺牲一致性，但是在BASE理论中，只是临时的不一致，在软状态结束后，我们会使其最终达到一致性。</p>\n<p>而在我们分布式事务中，往往包含多个子事务，各个子事务各自执行和提交，结果有些成功，有些失败，这时候大家的状态不一致，但是我们希望事务中的各个子事务状态能够一致，要么大家都成功，要么大家都失败。因此我们可以借鉴CAP定理和BASE理论解决分布式最大的问题是各个子事务的一致性问题。</p>\n<p>第一种 解决方案就是基于AP的模式，各个子事务分别执行和提交，允许出现结果不一致，然后采取弥补措施恢复数据即可，实现最终一致。</p>\n<p>第二种是基于CP模式，各个子事务执行后互相等待，同时提交，同时回滚，达成强一致。但事务执行过程中，处于弱可用状态。</p>\n<h2 id=\"分布式事务模型\"><a href=\"#分布式事务模型\" class=\"headerlink\" title=\"分布式事务模型\"></a>分布式事务模型</h2><p>但是不论基于AP还是CP模式，这里都有一个共同点，那就是各个本地事务都需要互相通信，来辨别彼此的通信，但是各个子事务之间怎么进行通信呢？所以它就是需要有一个协调者来帮助分布式事务中的各个子事务进行通信，感知彼次的状态。<br><img src=\"/../img/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%A8%A1%E5%9E%8B.png\" alt=\"分布式事务模型.png\"></p>\n<p>这里的子事务系统称作分支事务，有关联的各个分支事务组合在一起称为全局事务</p>\n<p>在分布式事务管理系统中由三个重要的角色组成：</p>\n<ul>\n<li>TC（Transaction Coordinator）-事务协调者：维护全局和分支事务的状态，协调全局事务提交或回滚</li>\n<li>TM（Transaction Manager）-事务管理器：定义全局事务的范围，开始全局事务，提交或回滚全局事务</li>\n<li>RM（Resource Manager）-资源管理器：管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚</li>\n</ul>\n<p><img src=\"/../img/tctmrm.png\" alt=\"tctmrm.png\"></p>\n<p>一个典型的事务过程包括：</p>\n<ul>\n<li>TM 向 TC 申请开启（Begin）一个全局事务，全局事务创建成功并生成一个全局唯一的 XID。</li>\n<li>XID 在微服务调用链路的上下文中传播。</li>\n<li>RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖。</li>\n<li>TM 向 TC 发起针对 XID 的全局提交（Commit）或回滚（Rollback）决议。</li>\n<li>TC 调度 XID 下管辖的全部分支事务完成提交（Commit）或回滚（Rollback）请求。</li>\n</ul>\n<p>当然这只是GTXS中的事务模型，并不是最终的解决方案。在实际的分布式事务管理系统中会根据业务是要做强一致还是最终一致延伸出了好几种解决方案。比如有XA模式，AT模式，TCC模式，SAGA模式。</p>\n<h2 id=\"分布式事务常见解决方案\"><a href=\"#分布式事务常见解决方案\" class=\"headerlink\" title=\"分布式事务常见解决方案\"></a>分布式事务常见解决方案</h2><h3 id=\"XA模式\"><a href=\"#XA模式\" class=\"headerlink\" title=\"XA模式\"></a>XA模式</h3><p>XA规范是X&#x2F;Open 组织定义的分布式事务处理的标准，那么这个标准叫DTP标准，可以认为是分布式事务领域最早的一个标准。所以几乎所有主流的数据库都对XA规范提供了支持。比如MYSQL ，ORACLE都实现了这种标准，换言之这些数据库内部都已经实现了分布式事务，而采用的模式则是XA模式。这种分布式事务把XA模式定义成了两个阶段。</p>\n<p>第一阶段叫做准备阶段，事务协调者在准备阶段会向资源管理者RM发起准备的请求，在以下图片中RM是由事务参与者的SDK组成的，但是在这里RM是由数据库本身实现的，所以在此事务协调者会通知各个微服务的数据库执行自己的sql，但是执行完不要提交，而是把执行执行的结果告诉事务调节者进行就绪，事务协调者会根据各个事务的执行情况判断下一阶段的事情。</p>\n<p>如果都成功了则通知各个分支事务的数据库进行提交，否则让他们进行事务的回滚。所以我们看到这种XA模式就是基于数据库本身的特性来实现的分布式事务，因为一阶段并不提交，在二阶段才进行提交或回滚，它们是能够满足事务的ACID的特性的，它是一种强一致性的事务。</p>\n<p><img src=\"/../img/XA%E6%A8%A1%E5%BC%8F.png\" alt=\"XA模式.png\"></p>\n<h4 id=\"XA模式的优势与不足\"><a href=\"#XA模式的优势与不足\" class=\"headerlink\" title=\"XA模式的优势与不足\"></a>XA模式的优势与不足</h4><ul>\n<li>优点</li>\n</ul>\n<p>前面我们提到各个分支事务在一阶段的时候只是执行事务而不提交，那么这个事务一直处于运行中的一个状态，那么我们知道事务本身就具备ACID的特性，到了二阶段时候，所有的事务都执行完了再一起提交，所以每个分支事务都具备ACID的能力，而每个事务之间都互相等待，所以整个全局事务都具备ACID的特性。所以这种XA模式具备强一致性的，这是它的第一个优势。那么第二个优势就是说数据库本身就已经实现了分布式事务的能力，我们只是在其基础上做了封装，实现起来也比较简单，在使用的时候是没有代码入侵的，这是它第二个优势</p>\n<ul>\n<li>缺点</li>\n</ul>\n<p>由于分支事务在执行完业务sql的时候并不会进行事务的提交，而是等待TC的过程中会占用数据库锁，如果其他分支事务耗时较长，整个过程中所有的分支事务都处于等待的状态，其他事务都没办法进行资源的访问，造成了资源的浪费，所以它的性能是非常差的，可用性就降低了。第二个缺点，XA模式是依赖于数据库的实现，如果数据库不支持XA的规范，就比如说Redis这种非关系型的数据库，XA模式就没办法实现，这是它的第二个缺点。</p>\n<h3 id=\"AT模式\"><a href=\"#AT模式\" class=\"headerlink\" title=\"AT模式\"></a>AT模式</h3><p>AT模式同样是分阶段提交的事务模型，不过弥补了XA模型中资源锁定周期过长的缺陷。整体来说它还是这个模型，一开始都是一样的，TM开启全局事务并完成全局事务的注册，然后去调用我们的每个分支，每个RM都到TC进行分支事务的注册，并且执行本地业务SQL，但是此处AT执行完SQl之后会立即提交分支事务，而不是等待其他事务的提交，所以它的性能会优于XA模式。但是为了能够进行分支事务的回滚，RM会拦截SQL的执行并且给数据形成快照undo log，这时一阶段就可以放心大胆地提交，然后将状态报告给TC。第二阶段TM在执行完分支事务的调用之后会通知TC进行全局事务的提交。TC会根据分支事务的状态来判断提交或回滚。此处的提交并不是数据库事务的提交，而是通知各个分支事务RM将undo log 进行删除，并且是异步删除，进一步提高性能。如果存在失败的分支事务，则会通知后各个分支事务进行数据的回滚，一旦回滚成功，也需要将undo log进行删除。这就是二阶段的变化。以上就是AT模式的玩法。</p>\n<p><img src=\"/../img/fmt%E6%A8%A1%E5%BC%8F.png\" alt=\"fmt模式.png\"></p>\n<h4 id=\"AT模式的优势与不足\"><a href=\"#AT模式的优势与不足\" class=\"headerlink\" title=\"AT模式的优势与不足\"></a>AT模式的优势与不足</h4><ul>\n<li><p>优点</p>\n<p>AT是基于XA 2PC的模式实现的，针对于木桶效应，通过业务数据提交时自动拦截所有 SQL，将 SQL 对数据修改前、修改后的结果分别保存快照，生成行锁，通过本地事务一起提交到操作的数据源中，相当于自动记录了重做和回滚日志。这样每一个数据源都可以单独提交，然后立刻释放锁和资源。</p>\n</li>\n<li><p>缺点</p>\n<p>提高了吞吐量的同时，破坏了隔离性，会出现脏写的情况（在回滚前数据发生了改变，导致无法逆向SQL来补偿数据）</p>\n</li>\n</ul>\n<h3 id=\"TCC模式\"><a href=\"#TCC模式\" class=\"headerlink\" title=\"TCC模式\"></a>TCC模式</h3><p>TCC模式和AT模式相似，每个阶段都是独立事务，不同的是TCC通过人工编码来实现数据恢复，需要实现三个方法：<br>Try：资源的检测和预留<br>Confirm：完成资源操作业务，要求Try成功 Confirm一定要能成功<br>Cancel：预留资源释放，可以理解Try的反向操作</p>\n<p><img src=\"/../img/TCC%E6%A8%A1%E5%BC%8F.png\" alt=\"TCC模式.png\"></p>\n<h3 id=\"SAGA模式\"><a href=\"#SAGA模式\" class=\"headerlink\" title=\"SAGA模式\"></a>SAGA模式</h3><p>SAGA模式是GTXS提供的长事务解决方案，也分为两个阶段。它在一阶段的时候直接提交本地事务，而在二阶段的过程中如果成功则什么都不做，如果失败则通过编写补偿业务来回滚。聊到这大家可能觉得这和TCC模式也很像，但其实不一样。因为TCC在一阶段并不是提交事务，而是做资源的预留而已，这里一阶段直接提交事务。<br>而第二阶段也不一样，TCC在第二阶段是对预留资源的扣除或者回滚，而SAGA在第二阶段如果成功则什么事情都不做，如果失败则通过编写补偿方法来回滚事务。<br>但也因为SAGA模式在第二阶段直接操作的资源本身，所有它也失去了TCC模式中资源的隔离效果，所以SAGA模式中最大的缺点就是没有隔离性，事务与事务之间是可能存在脏写的，所以它是有隔离的安全问题。它的执行流程有下面这张图。它会在第一阶段按照顺序逐个执行分支事务，而一旦在这个事务流程有事务的执行出现了问题，则会反向地去执行补偿逻辑，从而保证整个事务地状态一致性。<br>它还有一个特点是，它这里地每个分支事务是可以基于事件驱动的，而这种事件有一个好处就是它的吞吐能力会比较强，它不会阻塞和等待，你们可以理解它是一种状态机的机制来实现。但也因此每个分支事务的执行事件不确定，所以它的时效性可能比较差。<br>这种模型一般比较适用于事务跨度比较大的情况的场景来使用，但是一般SAGA的使用场景是比较少的，一般都是TCC或者FMT模式。</p>\n<p><img src=\"/../img/SAGA%E6%A8%A1%E5%BC%8F.png\" alt=\"SAGA模式.png\"></p>\n<h4 id=\"SAGA模式的优势与不足\"><a href=\"#SAGA模式的优势与不足\" class=\"headerlink\" title=\"SAGA模式的优势与不足\"></a>SAGA模式的优势与不足</h4><ul>\n<li>优点</li>\n</ul>\n<p>事务参与者可以基于事件驱动实现异步调用，吞吐高</p>\n<p>一阶段直接提交事务，无锁，性能好</p>\n<p>不用编写TCC中的三个阶段，实现简单</p>\n<ul>\n<li>缺点：</li>\n</ul>\n<p>软状态持续时间不确定，时效性差</p>\n<p>没有锁，没有事务隔离，会有脏写</p>\n<h3 id=\"四种模式对比\"><a href=\"#四种模式对比\" class=\"headerlink\" title=\"四种模式对比\"></a>四种模式对比</h3><p><img src=\"/../img/%E5%9B%9B%E7%A7%8D%E6%A8%A1%E5%BC%8F%E5%AF%B9%E6%AF%94.png\" alt=\"四种模式对比.png\"></p>\n"},{"title":"编写网络应用程序基本步骤","date":"2022-03-13T16:25:00.000Z","_content":"\n编写网络应用程序基本步骤：\n* 需求分析\n* 定义业务数据结构\n* 实现业务逻辑\n* 选择传输协议\n* 定义传输信息结构\n* 选择编解码\n包括：\n1、数据本身编解码\n2、压缩等编解码\n3、粘包/半包处理编解码\n\n* 实现所有的编解码\n* 编写应用程序\n* 测试与改进\n\n\n编写代码->\n复查代码->\n* 检索\"最佳实践\" ->检索\"坑\"->对比经典项目实现->同行评审\n\n临门一脚->\n* 检查是否可诊断\n* 检查是否可度量\n上线->反馈->\n* 收集错误数据\n* 收集性能数据\n\n\n数据结构设计：\n\nFrame\nMessage\nMessage Header\nMessage Body\nlength\nversion\nopCode\nstreamId\noperation/operation result\n\n粘包/半包 -> 封帧 -> 加上length字段\n","source":"_posts/Netty/编写网络应用程序基本步骤.md","raw":"---\ntitle: 编写网络应用程序基本步骤\ndate: 2022-03-14 00:25:00\ntags:\n  - Netty\ncategories: Netty\n---\n\n编写网络应用程序基本步骤：\n* 需求分析\n* 定义业务数据结构\n* 实现业务逻辑\n* 选择传输协议\n* 定义传输信息结构\n* 选择编解码\n包括：\n1、数据本身编解码\n2、压缩等编解码\n3、粘包/半包处理编解码\n\n* 实现所有的编解码\n* 编写应用程序\n* 测试与改进\n\n\n编写代码->\n复查代码->\n* 检索\"最佳实践\" ->检索\"坑\"->对比经典项目实现->同行评审\n\n临门一脚->\n* 检查是否可诊断\n* 检查是否可度量\n上线->反馈->\n* 收集错误数据\n* 收集性能数据\n\n\n数据结构设计：\n\nFrame\nMessage\nMessage Header\nMessage Body\nlength\nversion\nopCode\nstreamId\noperation/operation result\n\n粘包/半包 -> 封帧 -> 加上length字段\n","slug":"Netty/编写网络应用程序基本步骤","published":1,"updated":"2024-01-12T13:57:35.760Z","_id":"clrhmb95u000qqzyw1mztcx49","comments":1,"layout":"post","photos":[],"link":"","content":"<p>编写网络应用程序基本步骤：</p>\n<ul>\n<li><p>需求分析</p>\n</li>\n<li><p>定义业务数据结构</p>\n</li>\n<li><p>实现业务逻辑</p>\n</li>\n<li><p>选择传输协议</p>\n</li>\n<li><p>定义传输信息结构</p>\n</li>\n<li><p>选择编解码<br>包括：<br>1、数据本身编解码<br>2、压缩等编解码<br>3、粘包/半包处理编解码</p>\n</li>\n<li><p>实现所有的编解码</p>\n</li>\n<li><p>编写应用程序</p>\n</li>\n<li><p>测试与改进</p>\n</li>\n</ul>\n<p>编写代码-&gt;<br>复查代码-&gt;</p>\n<ul>\n<li>检索”最佳实践” -&gt;检索”坑”-&gt;对比经典项目实现-&gt;同行评审</li>\n</ul>\n<p>临门一脚-&gt;</p>\n<ul>\n<li>检查是否可诊断</li>\n<li>检查是否可度量<br>上线-&gt;反馈-&gt;</li>\n<li>收集错误数据</li>\n<li>收集性能数据</li>\n</ul>\n<p>数据结构设计：</p>\n<p>Frame<br>Message<br>Message Header<br>Message Body<br>length<br>version<br>opCode<br>streamId<br>operation/operation result</p>\n<p>粘包/半包 -&gt; 封帧 -&gt; 加上length字段</p>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<p>编写网络应用程序基本步骤：</p>\n<ul>\n<li><p>需求分析</p>\n</li>\n<li><p>定义业务数据结构</p>\n</li>\n<li><p>实现业务逻辑</p>\n</li>\n<li><p>选择传输协议</p>\n</li>\n<li><p>定义传输信息结构</p>\n</li>\n<li><p>选择编解码<br>包括：<br>1、数据本身编解码<br>2、压缩等编解码<br>3、粘包&#x2F;半包处理编解码</p>\n</li>\n<li><p>实现所有的编解码</p>\n</li>\n<li><p>编写应用程序</p>\n</li>\n<li><p>测试与改进</p>\n</li>\n</ul>\n<p>编写代码-&gt;<br>复查代码-&gt;</p>\n<ul>\n<li>检索”最佳实践” -&gt;检索”坑”-&gt;对比经典项目实现-&gt;同行评审</li>\n</ul>\n<p>临门一脚-&gt;</p>\n<ul>\n<li>检查是否可诊断</li>\n<li>检查是否可度量<br>上线-&gt;反馈-&gt;</li>\n<li>收集错误数据</li>\n<li>收集性能数据</li>\n</ul>\n<p>数据结构设计：</p>\n<p>Frame<br>Message<br>Message Header<br>Message Body<br>length<br>version<br>opCode<br>streamId<br>operation&#x2F;operation result</p>\n<p>粘包&#x2F;半包 -&gt; 封帧 -&gt; 加上length字段</p>\n"},{"title":"网关两地三中心的实践与总结","date":"2023-05-15T16:01:00.000Z","_content":"\n# 轻舟网关两地三中心整体技术方案\n\n## 背景概述\n\n轻舟云原生网关作为轻舟平台核心组件，负责承接集群内外的所有入口流量，并对其进行转发和治理。而两地三中心作为一种容灾能力相对比较完整的架构，有助于提升产品的稳定性，具备业务容灾能力。因此本次方案将实现网关产品的两地三中心能力，并具备区域路由优先和多集群服务发现等产品能力。\n\n## 需求说明\n\n### 功能需求\n\n+ 区域路由优先\n\n  网关基于区域匹配信息进行流量优先级划分。\n\n+ 多集群服务发现\n\n  控制面能够发现多集群中的服务实例。\n\n### 非功能需求\n\n+ 多集群配置下发\n\n  API Plane支持下发配置到多个集群中。\n\n+ 数据一致性保障\n\n  通过定时补偿任务达到数据最终一致性的目标\n\n+ 基于K8s Informer缓存资源数据\n\n  API Plane通过K8s Informer机制缓存资源数据，避免通过k8s api server全量拉取资源。\n\n## 目标和非目标\n\n**目标**：\n通过阅读该文档，明白网关两地三中心项目的设计思路及方案，并能通过该方案进行相关落地。\n\n**非目标**：\n阅读人员需要熟悉网关整体架构，主要面向开发和运维人员。\n\n## 系统指标\n\n**功能指标**\n\n实现两地三中心多集群部署，保障每个集群的网关代理组件的无状态性。\n\n提供区域路由优先的产品能力，保证流量优先转发到当前集群。\n\n提供多集群服务发现能力，实现多集群服务的统一纳管。\n\n提供多集群配置下发能力，保证多集群网关配置的一致性。\n\n支持灵活部署，资源有限的场景下，可以支持数据面高可用，控制面单集群部署。\n\n**性能指标**\n\n保证两地三中心部署模式下，流量转发延时和单集群延时保持一致。\n\n多集群下每个网关都可以承接所有流量，QPS理论上可以n倍于单集群网关。\n\n## 功能架构设计\n\n### 区域路由优先\n\n两地三中心模式下，可以通过地区（region）、可用区（zone）、集群(cluster)三元组定义网关和业务服务实例的地域信息。\n\n+ 地区：代表较大的地理区域，例如杭州。一个地区通常包含许多可用区域。通过node标签mlha.skiff.netease.com/region确定服务的地区。\n+ 区域：代表一个可用区，例如滨江。一个区域内通常会部署多个集群。通过node标签mlha.skiff.netease.com/zone确定服务的可用区。\n+ 集群：代表服务所在的K8S集群，通过node标签mlha.skiff.netease.com/cluster确定服务的可用区。\n\n例如：【杭州、滨江、集群A】，【杭州、余杭、集群B】\n\n![区域路由优先.png](..%2F..%2Fimg%2FfuncDesign%2F%E5%8C%BA%E5%9F%9F%E8%B7%AF%E7%94%B1%E4%BC%98%E5%85%88.png)\n\n若开启地域区域路由优先功能，网关代理（Envoy）会基于如下规则对流量进行转发：\n\n1.优先将请求转发到当前集群中的服务。\n\n2.若网关所在集群的服务不可用，则将流量转发到当前可用区中其他集群的服务。\n\n3.若网关所在可用区的服务都不可用，则将流量转发到当前区域中其他集群的服务。\n\n4.若网关所在区域的服务都不可用，则将流量转发到其他区域中的服务。\n\n## 技术架构设计\n\n网关两地三中心方案是在现有网关组件的基础上，通过多集群配置下发与监听、多集群服务发现等技术实现网关集群无状态水平扩展，每个集群都包含完整的网关组件。\n\n### 整体技术架构\n\n![网关总体架构.png](..%2F..%2Fimg%2FfuncDesign%2F%E7%BD%91%E5%85%B3%E6%80%BB%E4%BD%93%E6%9E%B6%E6%9E%84.png)\n\n网关的整体架构如图所示，主要可以划分为如下4部分：\n\n+ 控制面组件\n\n  控制面组件负责配置管理和服务发现，具体包括如下组件：\n\n  Front：前端组件，负责轻舟网关的可视化展示。\n\n  GPortal：轻舟网关控制台，和前端组件交互，负责配置管理和可视化。\n\n  API Plane：资源管理组件，和K8s api server交互，负责配置资源（CRD）的创建。\n\n  Istio Pilot：网关团队基于Istio开源控制面Pilot进行增强，主要负责与数据面Envoy的交互，包括服务以及配置等信息通过xDS协议与数据面进行交互。\n\n  Mesh Registry：服务发现组件，通过MCP协议从注册中心获取服务实例，支持的注册中心包括Nacos、Kubernetes、Eureka、Zookeeper。\n\n+ 数据面组件\n\n  网关代理组件（Envoy Proxy），负责流量治理和转发，当网关使用集群限流功能时，需要额外部署Rate Limit组件。\n\n### 多集群架构\n\n![网关多集群.png](..%2F..%2Fimg%2FfuncDesign%2F%E7%BD%91%E5%85%B3%E5%A4%9A%E9%9B%86%E7%BE%A4.png)\n\n网关多集群水平扩展后如图所示，每个集群都包含完整数据面和控制面组件，其中数据面组件包含完整的服务和配置信息，可以完整承接网关流量，上层通过Nginx进行流量负载均衡。\n\n### 持久化数据依赖说明\n\n网关依赖的持久化组件如下：\n\nMysql（强依赖）：持久化流量治理相关配置，用于视图管理和资源下发。\n\nEtcd（强依赖）：K8s Api Server依赖组件，每个K8s集群都单独维护一个Etcd，用于存储相关Istio配置资源，Istio监听Etcd资源并下发配置给挖宝方法代理Envoy。\n\nRedis（可选）：用于缓存和限流插件。\n\nPrometheus(可选)：用于指标数据上报和统计。\n\n## 部署架构设计\n\n![两地三中心部署架构.png](..%2F..%2Fimg%2FfuncDesign%2F%E4%B8%A4%E5%9C%B0%E4%B8%89%E4%B8%AD%E5%BF%83%E9%83%A8%E7%BD%B2%E6%9E%B6%E6%9E%84.png)\n\n网关两地三中心部署方案如上所示，其中区域1为当前提供服务的区域，通过SLB将流量负载均衡到可用区A和B中；区域2为异地区域，区域1中的mysql配置数据会定时同步到可用区C的灾备中间件中。当进行故障切换时，需要执行如下两步骤：\n\n1.同步最新的mysql配置数据到灾备数据库中。\n\n2.基于同步后的灾备数据，全量发布网关资源（服务、路由、插件）。\n\n## 容灾方案设计\n\n### 同城单机房故障应对及影响\n\n#### 平台侧\n\nSLB感知机房故障，自动将流量切换到同城可用机房，不会对流量产生影响。\n\n#### 业务侧\n\n部署在本机房中的业务服务将无法接受流量，因此推荐用户将服务分散部署在多个集群中，避免机房故障导致服务实例不可用。\n\n### 同城双机房故障应对及影响\n\n#### 平台侧\n\n故障期间会导致网关不可用，需要人为切换到灾备机房，切换后需要同步最新数据到灾备数据库中，并进行全量资源发布后可正常提供服务。\n\n#### 业务侧\n\n当前可用区中的服务将不可用，灾备机房中的服务可以正常接受流量。\n\n## 关键方案设计\n\n### 多集群读写\n\n![API Plane多集群配置下发.png](..%2F..%2Fimg%2FfuncDesign%2FAPI%20Plane%E5%A4%9A%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E4%B8%8B%E5%8F%91.png)\n\n在网关下发配置流程中，GPortal负责落库，API Plane负责下发配置到K8S API Server。在两地三中心场景下，API Plane还需要提供多集群配置下发的能力。在具体实现层面，api plane需要指定主机群和从集群配置，其中主机群为当前集群，从集群为其他集群。\n\n```yaml\nclusters: \n    master:\n      k8s-api-server: \"\"\n      cert-data: \"\"\n      key-data: \"\"\n      ca-data: \"\"\n    test209:\n      k8s-api-server: \"\"\n      cert-data: \"\"\n      key-data: \"\"\n      ca-data: \"\"\n```\n\n+ 读操作\n\n  对于读操作API Plane只从主集群中读取配置，若主集群crash，会导致pass平台视图展示失败，需要通过Nginx进行切换；\n\n+ 写操作\n\n​\t\t写操作包含GPortal落库和API Plane多集群配置下发两个操作。本方案优先API Plane下发配置，并且只要主集群配置下发成功，就返回成功，GPortal执行DB操作。对于从集群则通过子线程异步进行更新，若更新失败导致数据不一致，则需要通过定时补偿任务进行修正，保证数据的最终一致性。\n\n### 定时补偿任务\n\n本方案通过API Plane执行定时补偿任务对数据进行修正。其中每个API Plane组件都会校验本集群中CR和DB数据是否一致，若出现不一致，则以DB数据为准更新本集群CR。针对资源类型的不同，API Plane采用版本号校验和内容校验两种方式。\n\n#### 版本号校验：\n\n通过对比DB中版本号和CR中版本号是否一致来判断配置是否成功下发，优先采用该方式，涉及的资源包括Destination Rule、Virtual Service和GatewayPlugin。\n\n具体步骤：\n\n1.相关表添加版本号标识符version字段，数据创建时初始化为0，之后每次修改都自增。\n\n2.API Plane下发配置时需要带上版本号，映射到资源metadata中的hango.data.version字段。\n\n3.定时触发校验校验任务比较两种的版本号是否一致，若版本号一致，则表明配置正常下发了；否则需要基于DB中的数据进行修正，修正场景如下：\n\n| 场景           | 数据库                 | CR                       | 操作   |\n| -------------- | ---------------------- | ------------------------ | ------ |\n| 配置未更新     | version=2              | skiff.nsf.data.version=1 | 更新CR |\n| 配置未创建     | version=2，enable=true | NULL                     | 创建CR |\n| 禁用相关功能   | enable=false           | NULL                     | 不操作 |\n| 数据库更新失败 | version=2              | skiff.nsf.data.version=3 | 更新CR |\n| 配置未删除     | NULL                   | skiff.nsf.data.version=1 | 删除CR |\n\n上述为版本号校验的基本步骤，存在下面三种情况需要特殊处理：\n\n+ 双表映射相同资源\n\n  解释：两个表映射到相同资源\n\n  场景：\n\n  1.apigw_service_proxy和apigw_envoy_health_check_rule映射Destination Rule资源。\n\n  2.apigw_route_rule_proxy和apigw_gportal_dubbo_info映射Virtual Service资源。\n\n  解决方案：只在主映射表（apigw_service_proxy， apigw_route_rule_proxy）添加版本号，从映射表更新配置时，需要更新主映射表的版本号。\n\n![健康检查version.png](..%2F..%2Fimg%2FfuncDesign%2F%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5version.png)\n\n+ 同表多记录映射相同资源\n\n  解释：同一个表中的多条记录映射到相同场景\n\n  场景：路由级插件apigw_envoy_plugin_binding表中相同路由下的多个插件映射到同一个GatewayPlugin资源\n\n  解决方案：多条记录维护相同的版本号，具体步骤如下：\n\n![项目级插件流程.png](..%2F..%2Fimg%2FfuncDesign%2F%E9%A1%B9%E7%9B%AE%E7%BA%A7%E6%8F%92%E4%BB%B6%E6%B5%81%E7%A8%8B.png)\n\n#### 内容校验：\n\n直接比较CR资源和DB中的详细内容，该方式主要应用于内容相对简单的场景，具体指Service Entry资源。该资源只包含静态服务地址信息。\n\n### API Plane资源监听\n\n定时补偿任务需要全量拉取K8s 资源进行校验，数据量过大时查询较慢（1w+数据需要查询3分钟），导致api server压力过大，同时导致并发问题影响补偿任务的正确性。为了解决上述问题，本方案通过K8s Informer机制实现资源缓存。\n\n![K8s informer.png](..%2F..%2Fimg%2FfuncDesign%2FK8s%20informer.png)\n\n\nK8s Infomer机制的核心是List/Watch，Api plane 在全量拉取资源时会使用Informer中的Lister()方法，从本地缓存中（store）获取，而非直接请求Kubernetes API。而本地缓存则通过watch机制进行实时更新。具体原理可参考[Kubernetes Informer详解](https://houmin.cc/posts/1f0eb2ff/) 。\n\n### Istio多集群服务发现\n\n![Istio多集群监听.png](..%2F..%2Fimg%2FfuncDesign%2FIstio%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%9B%91%E5%90%AC.png)\n该部分主要基于Istio提供的[多主架构部署方案](https://istio.io/latest/zh/docs/setup/install/multicluster/multi-primary/)实现，需要保证多集群处于单一的互通网络，任意负载间网络可达。该方案中每个集群中的Istio都会监听所有集群K8s API服务器的服务端点，从而实现获取所有集群中的服务实例。\n\nMesh Registry也具备多集群监听的能力，实现方式参照Istio，因此不进行额外说明。\n\n## 监控、告警及运维\n\n无\n\n## 遗留或待解决问题\n\n无\n\n## 讨论及更新记录\n\n无\n","source":"_posts/FuncDesign/网关两地三中心的实践与总结.md","raw":"---\ntitle: 网关两地三中心的实践与总结\ndate: 2023-05-16 00:01:00\ntags:\n  - 云原生网关\n  - 两地三中心\ncategories: 云原生网关\n---\n\n# 轻舟网关两地三中心整体技术方案\n\n## 背景概述\n\n轻舟云原生网关作为轻舟平台核心组件，负责承接集群内外的所有入口流量，并对其进行转发和治理。而两地三中心作为一种容灾能力相对比较完整的架构，有助于提升产品的稳定性，具备业务容灾能力。因此本次方案将实现网关产品的两地三中心能力，并具备区域路由优先和多集群服务发现等产品能力。\n\n## 需求说明\n\n### 功能需求\n\n+ 区域路由优先\n\n  网关基于区域匹配信息进行流量优先级划分。\n\n+ 多集群服务发现\n\n  控制面能够发现多集群中的服务实例。\n\n### 非功能需求\n\n+ 多集群配置下发\n\n  API Plane支持下发配置到多个集群中。\n\n+ 数据一致性保障\n\n  通过定时补偿任务达到数据最终一致性的目标\n\n+ 基于K8s Informer缓存资源数据\n\n  API Plane通过K8s Informer机制缓存资源数据，避免通过k8s api server全量拉取资源。\n\n## 目标和非目标\n\n**目标**：\n通过阅读该文档，明白网关两地三中心项目的设计思路及方案，并能通过该方案进行相关落地。\n\n**非目标**：\n阅读人员需要熟悉网关整体架构，主要面向开发和运维人员。\n\n## 系统指标\n\n**功能指标**\n\n实现两地三中心多集群部署，保障每个集群的网关代理组件的无状态性。\n\n提供区域路由优先的产品能力，保证流量优先转发到当前集群。\n\n提供多集群服务发现能力，实现多集群服务的统一纳管。\n\n提供多集群配置下发能力，保证多集群网关配置的一致性。\n\n支持灵活部署，资源有限的场景下，可以支持数据面高可用，控制面单集群部署。\n\n**性能指标**\n\n保证两地三中心部署模式下，流量转发延时和单集群延时保持一致。\n\n多集群下每个网关都可以承接所有流量，QPS理论上可以n倍于单集群网关。\n\n## 功能架构设计\n\n### 区域路由优先\n\n两地三中心模式下，可以通过地区（region）、可用区（zone）、集群(cluster)三元组定义网关和业务服务实例的地域信息。\n\n+ 地区：代表较大的地理区域，例如杭州。一个地区通常包含许多可用区域。通过node标签mlha.skiff.netease.com/region确定服务的地区。\n+ 区域：代表一个可用区，例如滨江。一个区域内通常会部署多个集群。通过node标签mlha.skiff.netease.com/zone确定服务的可用区。\n+ 集群：代表服务所在的K8S集群，通过node标签mlha.skiff.netease.com/cluster确定服务的可用区。\n\n例如：【杭州、滨江、集群A】，【杭州、余杭、集群B】\n\n![区域路由优先.png](..%2F..%2Fimg%2FfuncDesign%2F%E5%8C%BA%E5%9F%9F%E8%B7%AF%E7%94%B1%E4%BC%98%E5%85%88.png)\n\n若开启地域区域路由优先功能，网关代理（Envoy）会基于如下规则对流量进行转发：\n\n1.优先将请求转发到当前集群中的服务。\n\n2.若网关所在集群的服务不可用，则将流量转发到当前可用区中其他集群的服务。\n\n3.若网关所在可用区的服务都不可用，则将流量转发到当前区域中其他集群的服务。\n\n4.若网关所在区域的服务都不可用，则将流量转发到其他区域中的服务。\n\n## 技术架构设计\n\n网关两地三中心方案是在现有网关组件的基础上，通过多集群配置下发与监听、多集群服务发现等技术实现网关集群无状态水平扩展，每个集群都包含完整的网关组件。\n\n### 整体技术架构\n\n![网关总体架构.png](..%2F..%2Fimg%2FfuncDesign%2F%E7%BD%91%E5%85%B3%E6%80%BB%E4%BD%93%E6%9E%B6%E6%9E%84.png)\n\n网关的整体架构如图所示，主要可以划分为如下4部分：\n\n+ 控制面组件\n\n  控制面组件负责配置管理和服务发现，具体包括如下组件：\n\n  Front：前端组件，负责轻舟网关的可视化展示。\n\n  GPortal：轻舟网关控制台，和前端组件交互，负责配置管理和可视化。\n\n  API Plane：资源管理组件，和K8s api server交互，负责配置资源（CRD）的创建。\n\n  Istio Pilot：网关团队基于Istio开源控制面Pilot进行增强，主要负责与数据面Envoy的交互，包括服务以及配置等信息通过xDS协议与数据面进行交互。\n\n  Mesh Registry：服务发现组件，通过MCP协议从注册中心获取服务实例，支持的注册中心包括Nacos、Kubernetes、Eureka、Zookeeper。\n\n+ 数据面组件\n\n  网关代理组件（Envoy Proxy），负责流量治理和转发，当网关使用集群限流功能时，需要额外部署Rate Limit组件。\n\n### 多集群架构\n\n![网关多集群.png](..%2F..%2Fimg%2FfuncDesign%2F%E7%BD%91%E5%85%B3%E5%A4%9A%E9%9B%86%E7%BE%A4.png)\n\n网关多集群水平扩展后如图所示，每个集群都包含完整数据面和控制面组件，其中数据面组件包含完整的服务和配置信息，可以完整承接网关流量，上层通过Nginx进行流量负载均衡。\n\n### 持久化数据依赖说明\n\n网关依赖的持久化组件如下：\n\nMysql（强依赖）：持久化流量治理相关配置，用于视图管理和资源下发。\n\nEtcd（强依赖）：K8s Api Server依赖组件，每个K8s集群都单独维护一个Etcd，用于存储相关Istio配置资源，Istio监听Etcd资源并下发配置给挖宝方法代理Envoy。\n\nRedis（可选）：用于缓存和限流插件。\n\nPrometheus(可选)：用于指标数据上报和统计。\n\n## 部署架构设计\n\n![两地三中心部署架构.png](..%2F..%2Fimg%2FfuncDesign%2F%E4%B8%A4%E5%9C%B0%E4%B8%89%E4%B8%AD%E5%BF%83%E9%83%A8%E7%BD%B2%E6%9E%B6%E6%9E%84.png)\n\n网关两地三中心部署方案如上所示，其中区域1为当前提供服务的区域，通过SLB将流量负载均衡到可用区A和B中；区域2为异地区域，区域1中的mysql配置数据会定时同步到可用区C的灾备中间件中。当进行故障切换时，需要执行如下两步骤：\n\n1.同步最新的mysql配置数据到灾备数据库中。\n\n2.基于同步后的灾备数据，全量发布网关资源（服务、路由、插件）。\n\n## 容灾方案设计\n\n### 同城单机房故障应对及影响\n\n#### 平台侧\n\nSLB感知机房故障，自动将流量切换到同城可用机房，不会对流量产生影响。\n\n#### 业务侧\n\n部署在本机房中的业务服务将无法接受流量，因此推荐用户将服务分散部署在多个集群中，避免机房故障导致服务实例不可用。\n\n### 同城双机房故障应对及影响\n\n#### 平台侧\n\n故障期间会导致网关不可用，需要人为切换到灾备机房，切换后需要同步最新数据到灾备数据库中，并进行全量资源发布后可正常提供服务。\n\n#### 业务侧\n\n当前可用区中的服务将不可用，灾备机房中的服务可以正常接受流量。\n\n## 关键方案设计\n\n### 多集群读写\n\n![API Plane多集群配置下发.png](..%2F..%2Fimg%2FfuncDesign%2FAPI%20Plane%E5%A4%9A%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E4%B8%8B%E5%8F%91.png)\n\n在网关下发配置流程中，GPortal负责落库，API Plane负责下发配置到K8S API Server。在两地三中心场景下，API Plane还需要提供多集群配置下发的能力。在具体实现层面，api plane需要指定主机群和从集群配置，其中主机群为当前集群，从集群为其他集群。\n\n```yaml\nclusters: \n    master:\n      k8s-api-server: \"\"\n      cert-data: \"\"\n      key-data: \"\"\n      ca-data: \"\"\n    test209:\n      k8s-api-server: \"\"\n      cert-data: \"\"\n      key-data: \"\"\n      ca-data: \"\"\n```\n\n+ 读操作\n\n  对于读操作API Plane只从主集群中读取配置，若主集群crash，会导致pass平台视图展示失败，需要通过Nginx进行切换；\n\n+ 写操作\n\n​\t\t写操作包含GPortal落库和API Plane多集群配置下发两个操作。本方案优先API Plane下发配置，并且只要主集群配置下发成功，就返回成功，GPortal执行DB操作。对于从集群则通过子线程异步进行更新，若更新失败导致数据不一致，则需要通过定时补偿任务进行修正，保证数据的最终一致性。\n\n### 定时补偿任务\n\n本方案通过API Plane执行定时补偿任务对数据进行修正。其中每个API Plane组件都会校验本集群中CR和DB数据是否一致，若出现不一致，则以DB数据为准更新本集群CR。针对资源类型的不同，API Plane采用版本号校验和内容校验两种方式。\n\n#### 版本号校验：\n\n通过对比DB中版本号和CR中版本号是否一致来判断配置是否成功下发，优先采用该方式，涉及的资源包括Destination Rule、Virtual Service和GatewayPlugin。\n\n具体步骤：\n\n1.相关表添加版本号标识符version字段，数据创建时初始化为0，之后每次修改都自增。\n\n2.API Plane下发配置时需要带上版本号，映射到资源metadata中的hango.data.version字段。\n\n3.定时触发校验校验任务比较两种的版本号是否一致，若版本号一致，则表明配置正常下发了；否则需要基于DB中的数据进行修正，修正场景如下：\n\n| 场景           | 数据库                 | CR                       | 操作   |\n| -------------- | ---------------------- | ------------------------ | ------ |\n| 配置未更新     | version=2              | skiff.nsf.data.version=1 | 更新CR |\n| 配置未创建     | version=2，enable=true | NULL                     | 创建CR |\n| 禁用相关功能   | enable=false           | NULL                     | 不操作 |\n| 数据库更新失败 | version=2              | skiff.nsf.data.version=3 | 更新CR |\n| 配置未删除     | NULL                   | skiff.nsf.data.version=1 | 删除CR |\n\n上述为版本号校验的基本步骤，存在下面三种情况需要特殊处理：\n\n+ 双表映射相同资源\n\n  解释：两个表映射到相同资源\n\n  场景：\n\n  1.apigw_service_proxy和apigw_envoy_health_check_rule映射Destination Rule资源。\n\n  2.apigw_route_rule_proxy和apigw_gportal_dubbo_info映射Virtual Service资源。\n\n  解决方案：只在主映射表（apigw_service_proxy， apigw_route_rule_proxy）添加版本号，从映射表更新配置时，需要更新主映射表的版本号。\n\n![健康检查version.png](..%2F..%2Fimg%2FfuncDesign%2F%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5version.png)\n\n+ 同表多记录映射相同资源\n\n  解释：同一个表中的多条记录映射到相同场景\n\n  场景：路由级插件apigw_envoy_plugin_binding表中相同路由下的多个插件映射到同一个GatewayPlugin资源\n\n  解决方案：多条记录维护相同的版本号，具体步骤如下：\n\n![项目级插件流程.png](..%2F..%2Fimg%2FfuncDesign%2F%E9%A1%B9%E7%9B%AE%E7%BA%A7%E6%8F%92%E4%BB%B6%E6%B5%81%E7%A8%8B.png)\n\n#### 内容校验：\n\n直接比较CR资源和DB中的详细内容，该方式主要应用于内容相对简单的场景，具体指Service Entry资源。该资源只包含静态服务地址信息。\n\n### API Plane资源监听\n\n定时补偿任务需要全量拉取K8s 资源进行校验，数据量过大时查询较慢（1w+数据需要查询3分钟），导致api server压力过大，同时导致并发问题影响补偿任务的正确性。为了解决上述问题，本方案通过K8s Informer机制实现资源缓存。\n\n![K8s informer.png](..%2F..%2Fimg%2FfuncDesign%2FK8s%20informer.png)\n\n\nK8s Infomer机制的核心是List/Watch，Api plane 在全量拉取资源时会使用Informer中的Lister()方法，从本地缓存中（store）获取，而非直接请求Kubernetes API。而本地缓存则通过watch机制进行实时更新。具体原理可参考[Kubernetes Informer详解](https://houmin.cc/posts/1f0eb2ff/) 。\n\n### Istio多集群服务发现\n\n![Istio多集群监听.png](..%2F..%2Fimg%2FfuncDesign%2FIstio%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%9B%91%E5%90%AC.png)\n该部分主要基于Istio提供的[多主架构部署方案](https://istio.io/latest/zh/docs/setup/install/multicluster/multi-primary/)实现，需要保证多集群处于单一的互通网络，任意负载间网络可达。该方案中每个集群中的Istio都会监听所有集群K8s API服务器的服务端点，从而实现获取所有集群中的服务实例。\n\nMesh Registry也具备多集群监听的能力，实现方式参照Istio，因此不进行额外说明。\n\n## 监控、告警及运维\n\n无\n\n## 遗留或待解决问题\n\n无\n\n## 讨论及更新记录\n\n无\n","slug":"FuncDesign/网关两地三中心的实践与总结","published":1,"updated":"2024-01-25T12:18:03.380Z","_id":"clrhmbdoo000tqzywh692484i","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"轻舟网关两地三中心整体技术方案\"><a href=\"#轻舟网关两地三中心整体技术方案\" class=\"headerlink\" title=\"轻舟网关两地三中心整体技术方案\"></a>轻舟网关两地三中心整体技术方案</h1><h2 id=\"背景概述\"><a href=\"#背景概述\" class=\"headerlink\" title=\"背景概述\"></a>背景概述</h2><p>轻舟云原生网关作为轻舟平台核心组件，负责承接集群内外的所有入口流量，并对其进行转发和治理。而两地三中心作为一种容灾能力相对比较完整的架构，有助于提升产品的稳定性，具备业务容灾能力。因此本次方案将实现网关产品的两地三中心能力，并具备区域路由优先和多集群服务发现等产品能力。</p>\n<h2 id=\"需求说明\"><a href=\"#需求说明\" class=\"headerlink\" title=\"需求说明\"></a>需求说明</h2><h3 id=\"功能需求\"><a href=\"#功能需求\" class=\"headerlink\" title=\"功能需求\"></a>功能需求</h3><ul>\n<li><p>区域路由优先</p>\n<p>网关基于区域匹配信息进行流量优先级划分。</p>\n</li>\n<li><p>多集群服务发现</p>\n<p>控制面能够发现多集群中的服务实例。</p>\n</li>\n</ul>\n<h3 id=\"非功能需求\"><a href=\"#非功能需求\" class=\"headerlink\" title=\"非功能需求\"></a>非功能需求</h3><ul>\n<li><p>多集群配置下发</p>\n<p>API Plane支持下发配置到多个集群中。</p>\n</li>\n<li><p>数据一致性保障</p>\n<p>通过定时补偿任务达到数据最终一致性的目标</p>\n</li>\n<li><p>基于K8s Informer缓存资源数据</p>\n<p>API Plane通过K8s Informer机制缓存资源数据，避免通过k8s api server全量拉取资源。</p>\n</li>\n</ul>\n<h2 id=\"目标和非目标\"><a href=\"#目标和非目标\" class=\"headerlink\" title=\"目标和非目标\"></a>目标和非目标</h2><p><strong>目标</strong>：<br>通过阅读该文档，明白网关两地三中心项目的设计思路及方案，并能通过该方案进行相关落地。</p>\n<p><strong>非目标</strong>：<br>阅读人员需要熟悉网关整体架构，主要面向开发和运维人员。</p>\n<h2 id=\"系统指标\"><a href=\"#系统指标\" class=\"headerlink\" title=\"系统指标\"></a>系统指标</h2><p><strong>功能指标</strong></p>\n<p>实现两地三中心多集群部署，保障每个集群的网关代理组件的无状态性。</p>\n<p>提供区域路由优先的产品能力，保证流量优先转发到当前集群。</p>\n<p>提供多集群服务发现能力，实现多集群服务的统一纳管。</p>\n<p>提供多集群配置下发能力，保证多集群网关配置的一致性。</p>\n<p>支持灵活部署，资源有限的场景下，可以支持数据面高可用，控制面单集群部署。</p>\n<p><strong>性能指标</strong></p>\n<p>保证两地三中心部署模式下，流量转发延时和单集群延时保持一致。</p>\n<p>多集群下每个网关都可以承接所有流量，QPS理论上可以n倍于单集群网关。</p>\n<h2 id=\"功能架构设计\"><a href=\"#功能架构设计\" class=\"headerlink\" title=\"功能架构设计\"></a>功能架构设计</h2><h3 id=\"区域路由优先\"><a href=\"#区域路由优先\" class=\"headerlink\" title=\"区域路由优先\"></a>区域路由优先</h3><p>两地三中心模式下，可以通过地区（region）、可用区（zone）、集群(cluster)三元组定义网关和业务服务实例的地域信息。</p>\n<ul>\n<li>地区：代表较大的地理区域，例如杭州。一个地区通常包含许多可用区域。通过node标签mlha.skiff.netease.com/region确定服务的地区。</li>\n<li>区域：代表一个可用区，例如滨江。一个区域内通常会部署多个集群。通过node标签mlha.skiff.netease.com/zone确定服务的可用区。</li>\n<li>集群：代表服务所在的K8S集群，通过node标签mlha.skiff.netease.com/cluster确定服务的可用区。</li>\n</ul>\n<p>例如：【杭州、滨江、集群A】，【杭州、余杭、集群B】</p>\n<p><img src=\"/../../img/funcDesign/%E5%8C%BA%E5%9F%9F%E8%B7%AF%E7%94%B1%E4%BC%98%E5%85%88.png\" alt=\"区域路由优先.png\"></p>\n<p>若开启地域区域路由优先功能，网关代理（Envoy）会基于如下规则对流量进行转发：</p>\n<p>1.优先将请求转发到当前集群中的服务。</p>\n<p>2.若网关所在集群的服务不可用，则将流量转发到当前可用区中其他集群的服务。</p>\n<p>3.若网关所在可用区的服务都不可用，则将流量转发到当前区域中其他集群的服务。</p>\n<p>4.若网关所在区域的服务都不可用，则将流量转发到其他区域中的服务。</p>\n<h2 id=\"技术架构设计\"><a href=\"#技术架构设计\" class=\"headerlink\" title=\"技术架构设计\"></a>技术架构设计</h2><p>网关两地三中心方案是在现有网关组件的基础上，通过多集群配置下发与监听、多集群服务发现等技术实现网关集群无状态水平扩展，每个集群都包含完整的网关组件。</p>\n<h3 id=\"整体技术架构\"><a href=\"#整体技术架构\" class=\"headerlink\" title=\"整体技术架构\"></a>整体技术架构</h3><p><img src=\"/../../img/funcDesign/%E7%BD%91%E5%85%B3%E6%80%BB%E4%BD%93%E6%9E%B6%E6%9E%84.png\" alt=\"网关总体架构.png\"></p>\n<p>网关的整体架构如图所示，主要可以划分为如下4部分：</p>\n<ul>\n<li><p>控制面组件</p>\n<p>控制面组件负责配置管理和服务发现，具体包括如下组件：</p>\n<p>Front：前端组件，负责轻舟网关的可视化展示。</p>\n<p>GPortal：轻舟网关控制台，和前端组件交互，负责配置管理和可视化。</p>\n<p>API Plane：资源管理组件，和K8s api server交互，负责配置资源（CRD）的创建。</p>\n<p>Istio Pilot：网关团队基于Istio开源控制面Pilot进行增强，主要负责与数据面Envoy的交互，包括服务以及配置等信息通过xDS协议与数据面进行交互。</p>\n<p>Mesh Registry：服务发现组件，通过MCP协议从注册中心获取服务实例，支持的注册中心包括Nacos、Kubernetes、Eureka、Zookeeper。</p>\n</li>\n<li><p>数据面组件</p>\n<p>网关代理组件（Envoy Proxy），负责流量治理和转发，当网关使用集群限流功能时，需要额外部署Rate Limit组件。</p>\n</li>\n</ul>\n<h3 id=\"多集群架构\"><a href=\"#多集群架构\" class=\"headerlink\" title=\"多集群架构\"></a>多集群架构</h3><p><img src=\"/../../img/funcDesign/%E7%BD%91%E5%85%B3%E5%A4%9A%E9%9B%86%E7%BE%A4.png\" alt=\"网关多集群.png\"></p>\n<p>网关多集群水平扩展后如图所示，每个集群都包含完整数据面和控制面组件，其中数据面组件包含完整的服务和配置信息，可以完整承接网关流量，上层通过Nginx进行流量负载均衡。</p>\n<h3 id=\"持久化数据依赖说明\"><a href=\"#持久化数据依赖说明\" class=\"headerlink\" title=\"持久化数据依赖说明\"></a>持久化数据依赖说明</h3><p>网关依赖的持久化组件如下：</p>\n<p>Mysql（强依赖）：持久化流量治理相关配置，用于视图管理和资源下发。</p>\n<p>Etcd（强依赖）：K8s Api Server依赖组件，每个K8s集群都单独维护一个Etcd，用于存储相关Istio配置资源，Istio监听Etcd资源并下发配置给挖宝方法代理Envoy。</p>\n<p>Redis（可选）：用于缓存和限流插件。</p>\n<p>Prometheus(可选)：用于指标数据上报和统计。</p>\n<h2 id=\"部署架构设计\"><a href=\"#部署架构设计\" class=\"headerlink\" title=\"部署架构设计\"></a>部署架构设计</h2><p><img src=\"/../../img/funcDesign/%E4%B8%A4%E5%9C%B0%E4%B8%89%E4%B8%AD%E5%BF%83%E9%83%A8%E7%BD%B2%E6%9E%B6%E6%9E%84.png\" alt=\"两地三中心部署架构.png\"></p>\n<p>网关两地三中心部署方案如上所示，其中区域1为当前提供服务的区域，通过SLB将流量负载均衡到可用区A和B中；区域2为异地区域，区域1中的mysql配置数据会定时同步到可用区C的灾备中间件中。当进行故障切换时，需要执行如下两步骤：</p>\n<p>1.同步最新的mysql配置数据到灾备数据库中。</p>\n<p>2.基于同步后的灾备数据，全量发布网关资源（服务、路由、插件）。</p>\n<h2 id=\"容灾方案设计\"><a href=\"#容灾方案设计\" class=\"headerlink\" title=\"容灾方案设计\"></a>容灾方案设计</h2><h3 id=\"同城单机房故障应对及影响\"><a href=\"#同城单机房故障应对及影响\" class=\"headerlink\" title=\"同城单机房故障应对及影响\"></a>同城单机房故障应对及影响</h3><h4 id=\"平台侧\"><a href=\"#平台侧\" class=\"headerlink\" title=\"平台侧\"></a>平台侧</h4><p>SLB感知机房故障，自动将流量切换到同城可用机房，不会对流量产生影响。</p>\n<h4 id=\"业务侧\"><a href=\"#业务侧\" class=\"headerlink\" title=\"业务侧\"></a>业务侧</h4><p>部署在本机房中的业务服务将无法接受流量，因此推荐用户将服务分散部署在多个集群中，避免机房故障导致服务实例不可用。</p>\n<h3 id=\"同城双机房故障应对及影响\"><a href=\"#同城双机房故障应对及影响\" class=\"headerlink\" title=\"同城双机房故障应对及影响\"></a>同城双机房故障应对及影响</h3><h4 id=\"平台侧-1\"><a href=\"#平台侧-1\" class=\"headerlink\" title=\"平台侧\"></a>平台侧</h4><p>故障期间会导致网关不可用，需要人为切换到灾备机房，切换后需要同步最新数据到灾备数据库中，并进行全量资源发布后可正常提供服务。</p>\n<h4 id=\"业务侧-1\"><a href=\"#业务侧-1\" class=\"headerlink\" title=\"业务侧\"></a>业务侧</h4><p>当前可用区中的服务将不可用，灾备机房中的服务可以正常接受流量。</p>\n<h2 id=\"关键方案设计\"><a href=\"#关键方案设计\" class=\"headerlink\" title=\"关键方案设计\"></a>关键方案设计</h2><h3 id=\"多集群读写\"><a href=\"#多集群读写\" class=\"headerlink\" title=\"多集群读写\"></a>多集群读写</h3><p><img src=\"/../../img/funcDesign/API%20Plane%E5%A4%9A%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E4%B8%8B%E5%8F%91.png\" alt=\"API Plane多集群配置下发.png\"></p>\n<p>在网关下发配置流程中，GPortal负责落库，API Plane负责下发配置到K8S API Server。在两地三中心场景下，API Plane还需要提供多集群配置下发的能力。在具体实现层面，api plane需要指定主机群和从集群配置，其中主机群为当前集群，从集群为其他集群。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">clusters</span><span class=\"token punctuation\">:</span> \n    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">k8s-api-server</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n      <span class=\"token key atrule\">cert-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n      <span class=\"token key atrule\">key-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n      <span class=\"token key atrule\">ca-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token key atrule\">test209</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">k8s-api-server</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n      <span class=\"token key atrule\">cert-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n      <span class=\"token key atrule\">key-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n      <span class=\"token key atrule\">ca-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>读操作</p>\n<p>对于读操作API Plane只从主集群中读取配置，若主集群crash，会导致pass平台视图展示失败，需要通过Nginx进行切换；</p>\n</li>\n<li><p>写操作</p>\n</li>\n</ul>\n<p>​        写操作包含GPortal落库和API Plane多集群配置下发两个操作。本方案优先API Plane下发配置，并且只要主集群配置下发成功，就返回成功，GPortal执行DB操作。对于从集群则通过子线程异步进行更新，若更新失败导致数据不一致，则需要通过定时补偿任务进行修正，保证数据的最终一致性。</p>\n<h3 id=\"定时补偿任务\"><a href=\"#定时补偿任务\" class=\"headerlink\" title=\"定时补偿任务\"></a>定时补偿任务</h3><p>本方案通过API Plane执行定时补偿任务对数据进行修正。其中每个API Plane组件都会校验本集群中CR和DB数据是否一致，若出现不一致，则以DB数据为准更新本集群CR。针对资源类型的不同，API Plane采用版本号校验和内容校验两种方式。</p>\n<h4 id=\"版本号校验：\"><a href=\"#版本号校验：\" class=\"headerlink\" title=\"版本号校验：\"></a>版本号校验：</h4><p>通过对比DB中版本号和CR中版本号是否一致来判断配置是否成功下发，优先采用该方式，涉及的资源包括Destination Rule、Virtual Service和GatewayPlugin。</p>\n<p>具体步骤：</p>\n<p>1.相关表添加版本号标识符version字段，数据创建时初始化为0，之后每次修改都自增。</p>\n<p>2.API Plane下发配置时需要带上版本号，映射到资源metadata中的hango.data.version字段。</p>\n<p>3.定时触发校验校验任务比较两种的版本号是否一致，若版本号一致，则表明配置正常下发了；否则需要基于DB中的数据进行修正，修正场景如下：</p>\n<table>\n<thead>\n<tr>\n<th>场景</th>\n<th>数据库</th>\n<th>CR</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>配置未更新</td>\n<td>version=2</td>\n<td>skiff.nsf.data.version=1</td>\n<td>更新CR</td>\n</tr>\n<tr>\n<td>配置未创建</td>\n<td>version=2，enable=true</td>\n<td>NULL</td>\n<td>创建CR</td>\n</tr>\n<tr>\n<td>禁用相关功能</td>\n<td>enable=false</td>\n<td>NULL</td>\n<td>不操作</td>\n</tr>\n<tr>\n<td>数据库更新失败</td>\n<td>version=2</td>\n<td>skiff.nsf.data.version=3</td>\n<td>更新CR</td>\n</tr>\n<tr>\n<td>配置未删除</td>\n<td>NULL</td>\n<td>skiff.nsf.data.version=1</td>\n<td>删除CR</td>\n</tr>\n</tbody></table>\n<p>上述为版本号校验的基本步骤，存在下面三种情况需要特殊处理：</p>\n<ul>\n<li><p>双表映射相同资源</p>\n<p>解释：两个表映射到相同资源</p>\n<p>场景：</p>\n<p>1.apigw_service_proxy和apigw_envoy_health_check_rule映射Destination Rule资源。</p>\n<p>2.apigw_route_rule_proxy和apigw_gportal_dubbo_info映射Virtual Service资源。</p>\n<p>解决方案：只在主映射表（apigw_service_proxy， apigw_route_rule_proxy）添加版本号，从映射表更新配置时，需要更新主映射表的版本号。</p>\n</li>\n</ul>\n<p><img src=\"/../../img/funcDesign/%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5version.png\" alt=\"健康检查version.png\"></p>\n<ul>\n<li><p>同表多记录映射相同资源</p>\n<p>解释：同一个表中的多条记录映射到相同场景</p>\n<p>场景：路由级插件apigw_envoy_plugin_binding表中相同路由下的多个插件映射到同一个GatewayPlugin资源</p>\n<p>解决方案：多条记录维护相同的版本号，具体步骤如下：</p>\n</li>\n</ul>\n<p><img src=\"/../../img/funcDesign/%E9%A1%B9%E7%9B%AE%E7%BA%A7%E6%8F%92%E4%BB%B6%E6%B5%81%E7%A8%8B.png\" alt=\"项目级插件流程.png\"></p>\n<h4 id=\"内容校验：\"><a href=\"#内容校验：\" class=\"headerlink\" title=\"内容校验：\"></a>内容校验：</h4><p>直接比较CR资源和DB中的详细内容，该方式主要应用于内容相对简单的场景，具体指Service Entry资源。该资源只包含静态服务地址信息。</p>\n<h3 id=\"API-Plane资源监听\"><a href=\"#API-Plane资源监听\" class=\"headerlink\" title=\"API Plane资源监听\"></a>API Plane资源监听</h3><p>定时补偿任务需要全量拉取K8s 资源进行校验，数据量过大时查询较慢（1w+数据需要查询3分钟），导致api server压力过大，同时导致并发问题影响补偿任务的正确性。为了解决上述问题，本方案通过K8s Informer机制实现资源缓存。</p>\n<p><img src=\"/../../img/funcDesign/K8s%20informer.png\" alt=\"K8s informer.png\"></p>\n<p>K8s Infomer机制的核心是List/Watch，Api plane 在全量拉取资源时会使用Informer中的Lister()方法，从本地缓存中（store）获取，而非直接请求Kubernetes API。而本地缓存则通过watch机制进行实时更新。具体原理可参考<a href=\"https://houmin.cc/posts/1f0eb2ff/\">Kubernetes Informer详解</a> 。</p>\n<h3 id=\"Istio多集群服务发现\"><a href=\"#Istio多集群服务发现\" class=\"headerlink\" title=\"Istio多集群服务发现\"></a>Istio多集群服务发现</h3><p><img src=\"/../../img/funcDesign/Istio%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%9B%91%E5%90%AC.png\" alt=\"Istio多集群监听.png\"><br>该部分主要基于Istio提供的<a href=\"https://istio.io/latest/zh/docs/setup/install/multicluster/multi-primary/\">多主架构部署方案</a>实现，需要保证多集群处于单一的互通网络，任意负载间网络可达。该方案中每个集群中的Istio都会监听所有集群K8s API服务器的服务端点，从而实现获取所有集群中的服务实例。</p>\n<p>Mesh Registry也具备多集群监听的能力，实现方式参照Istio，因此不进行额外说明。</p>\n<h2 id=\"监控、告警及运维\"><a href=\"#监控、告警及运维\" class=\"headerlink\" title=\"监控、告警及运维\"></a>监控、告警及运维</h2><p>无</p>\n<h2 id=\"遗留或待解决问题\"><a href=\"#遗留或待解决问题\" class=\"headerlink\" title=\"遗留或待解决问题\"></a>遗留或待解决问题</h2><p>无</p>\n<h2 id=\"讨论及更新记录\"><a href=\"#讨论及更新记录\" class=\"headerlink\" title=\"讨论及更新记录\"></a>讨论及更新记录</h2><p>无</p>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h1 id=\"轻舟网关两地三中心整体技术方案\"><a href=\"#轻舟网关两地三中心整体技术方案\" class=\"headerlink\" title=\"轻舟网关两地三中心整体技术方案\"></a>轻舟网关两地三中心整体技术方案</h1><h2 id=\"背景概述\"><a href=\"#背景概述\" class=\"headerlink\" title=\"背景概述\"></a>背景概述</h2><p>轻舟云原生网关作为轻舟平台核心组件，负责承接集群内外的所有入口流量，并对其进行转发和治理。而两地三中心作为一种容灾能力相对比较完整的架构，有助于提升产品的稳定性，具备业务容灾能力。因此本次方案将实现网关产品的两地三中心能力，并具备区域路由优先和多集群服务发现等产品能力。</p>\n<h2 id=\"需求说明\"><a href=\"#需求说明\" class=\"headerlink\" title=\"需求说明\"></a>需求说明</h2><h3 id=\"功能需求\"><a href=\"#功能需求\" class=\"headerlink\" title=\"功能需求\"></a>功能需求</h3><ul>\n<li><p>区域路由优先</p>\n<p>网关基于区域匹配信息进行流量优先级划分。</p>\n</li>\n<li><p>多集群服务发现</p>\n<p>控制面能够发现多集群中的服务实例。</p>\n</li>\n</ul>\n<h3 id=\"非功能需求\"><a href=\"#非功能需求\" class=\"headerlink\" title=\"非功能需求\"></a>非功能需求</h3><ul>\n<li><p>多集群配置下发</p>\n<p>API Plane支持下发配置到多个集群中。</p>\n</li>\n<li><p>数据一致性保障</p>\n<p>通过定时补偿任务达到数据最终一致性的目标</p>\n</li>\n<li><p>基于K8s Informer缓存资源数据</p>\n<p>API Plane通过K8s Informer机制缓存资源数据，避免通过k8s api server全量拉取资源。</p>\n</li>\n</ul>\n<h2 id=\"目标和非目标\"><a href=\"#目标和非目标\" class=\"headerlink\" title=\"目标和非目标\"></a>目标和非目标</h2><p><strong>目标</strong>：<br>通过阅读该文档，明白网关两地三中心项目的设计思路及方案，并能通过该方案进行相关落地。</p>\n<p><strong>非目标</strong>：<br>阅读人员需要熟悉网关整体架构，主要面向开发和运维人员。</p>\n<h2 id=\"系统指标\"><a href=\"#系统指标\" class=\"headerlink\" title=\"系统指标\"></a>系统指标</h2><p><strong>功能指标</strong></p>\n<p>实现两地三中心多集群部署，保障每个集群的网关代理组件的无状态性。</p>\n<p>提供区域路由优先的产品能力，保证流量优先转发到当前集群。</p>\n<p>提供多集群服务发现能力，实现多集群服务的统一纳管。</p>\n<p>提供多集群配置下发能力，保证多集群网关配置的一致性。</p>\n<p>支持灵活部署，资源有限的场景下，可以支持数据面高可用，控制面单集群部署。</p>\n<p><strong>性能指标</strong></p>\n<p>保证两地三中心部署模式下，流量转发延时和单集群延时保持一致。</p>\n<p>多集群下每个网关都可以承接所有流量，QPS理论上可以n倍于单集群网关。</p>\n<h2 id=\"功能架构设计\"><a href=\"#功能架构设计\" class=\"headerlink\" title=\"功能架构设计\"></a>功能架构设计</h2><h3 id=\"区域路由优先\"><a href=\"#区域路由优先\" class=\"headerlink\" title=\"区域路由优先\"></a>区域路由优先</h3><p>两地三中心模式下，可以通过地区（region）、可用区（zone）、集群(cluster)三元组定义网关和业务服务实例的地域信息。</p>\n<ul>\n<li>地区：代表较大的地理区域，例如杭州。一个地区通常包含许多可用区域。通过node标签mlha.skiff.netease.com&#x2F;region确定服务的地区。</li>\n<li>区域：代表一个可用区，例如滨江。一个区域内通常会部署多个集群。通过node标签mlha.skiff.netease.com&#x2F;zone确定服务的可用区。</li>\n<li>集群：代表服务所在的K8S集群，通过node标签mlha.skiff.netease.com&#x2F;cluster确定服务的可用区。</li>\n</ul>\n<p>例如：【杭州、滨江、集群A】，【杭州、余杭、集群B】</p>\n<p><img src=\"/../../img/funcDesign/%E5%8C%BA%E5%9F%9F%E8%B7%AF%E7%94%B1%E4%BC%98%E5%85%88.png\" alt=\"区域路由优先.png\"></p>\n<p>若开启地域区域路由优先功能，网关代理（Envoy）会基于如下规则对流量进行转发：</p>\n<p>1.优先将请求转发到当前集群中的服务。</p>\n<p>2.若网关所在集群的服务不可用，则将流量转发到当前可用区中其他集群的服务。</p>\n<p>3.若网关所在可用区的服务都不可用，则将流量转发到当前区域中其他集群的服务。</p>\n<p>4.若网关所在区域的服务都不可用，则将流量转发到其他区域中的服务。</p>\n<h2 id=\"技术架构设计\"><a href=\"#技术架构设计\" class=\"headerlink\" title=\"技术架构设计\"></a>技术架构设计</h2><p>网关两地三中心方案是在现有网关组件的基础上，通过多集群配置下发与监听、多集群服务发现等技术实现网关集群无状态水平扩展，每个集群都包含完整的网关组件。</p>\n<h3 id=\"整体技术架构\"><a href=\"#整体技术架构\" class=\"headerlink\" title=\"整体技术架构\"></a>整体技术架构</h3><p><img src=\"/../../img/funcDesign/%E7%BD%91%E5%85%B3%E6%80%BB%E4%BD%93%E6%9E%B6%E6%9E%84.png\" alt=\"网关总体架构.png\"></p>\n<p>网关的整体架构如图所示，主要可以划分为如下4部分：</p>\n<ul>\n<li><p>控制面组件</p>\n<p>控制面组件负责配置管理和服务发现，具体包括如下组件：</p>\n<p>Front：前端组件，负责轻舟网关的可视化展示。</p>\n<p>GPortal：轻舟网关控制台，和前端组件交互，负责配置管理和可视化。</p>\n<p>API Plane：资源管理组件，和K8s api server交互，负责配置资源（CRD）的创建。</p>\n<p>Istio Pilot：网关团队基于Istio开源控制面Pilot进行增强，主要负责与数据面Envoy的交互，包括服务以及配置等信息通过xDS协议与数据面进行交互。</p>\n<p>Mesh Registry：服务发现组件，通过MCP协议从注册中心获取服务实例，支持的注册中心包括Nacos、Kubernetes、Eureka、Zookeeper。</p>\n</li>\n<li><p>数据面组件</p>\n<p>网关代理组件（Envoy Proxy），负责流量治理和转发，当网关使用集群限流功能时，需要额外部署Rate Limit组件。</p>\n</li>\n</ul>\n<h3 id=\"多集群架构\"><a href=\"#多集群架构\" class=\"headerlink\" title=\"多集群架构\"></a>多集群架构</h3><p><img src=\"/../../img/funcDesign/%E7%BD%91%E5%85%B3%E5%A4%9A%E9%9B%86%E7%BE%A4.png\" alt=\"网关多集群.png\"></p>\n<p>网关多集群水平扩展后如图所示，每个集群都包含完整数据面和控制面组件，其中数据面组件包含完整的服务和配置信息，可以完整承接网关流量，上层通过Nginx进行流量负载均衡。</p>\n<h3 id=\"持久化数据依赖说明\"><a href=\"#持久化数据依赖说明\" class=\"headerlink\" title=\"持久化数据依赖说明\"></a>持久化数据依赖说明</h3><p>网关依赖的持久化组件如下：</p>\n<p>Mysql（强依赖）：持久化流量治理相关配置，用于视图管理和资源下发。</p>\n<p>Etcd（强依赖）：K8s Api Server依赖组件，每个K8s集群都单独维护一个Etcd，用于存储相关Istio配置资源，Istio监听Etcd资源并下发配置给挖宝方法代理Envoy。</p>\n<p>Redis（可选）：用于缓存和限流插件。</p>\n<p>Prometheus(可选)：用于指标数据上报和统计。</p>\n<h2 id=\"部署架构设计\"><a href=\"#部署架构设计\" class=\"headerlink\" title=\"部署架构设计\"></a>部署架构设计</h2><p><img src=\"/../../img/funcDesign/%E4%B8%A4%E5%9C%B0%E4%B8%89%E4%B8%AD%E5%BF%83%E9%83%A8%E7%BD%B2%E6%9E%B6%E6%9E%84.png\" alt=\"两地三中心部署架构.png\"></p>\n<p>网关两地三中心部署方案如上所示，其中区域1为当前提供服务的区域，通过SLB将流量负载均衡到可用区A和B中；区域2为异地区域，区域1中的mysql配置数据会定时同步到可用区C的灾备中间件中。当进行故障切换时，需要执行如下两步骤：</p>\n<p>1.同步最新的mysql配置数据到灾备数据库中。</p>\n<p>2.基于同步后的灾备数据，全量发布网关资源（服务、路由、插件）。</p>\n<h2 id=\"容灾方案设计\"><a href=\"#容灾方案设计\" class=\"headerlink\" title=\"容灾方案设计\"></a>容灾方案设计</h2><h3 id=\"同城单机房故障应对及影响\"><a href=\"#同城单机房故障应对及影响\" class=\"headerlink\" title=\"同城单机房故障应对及影响\"></a>同城单机房故障应对及影响</h3><h4 id=\"平台侧\"><a href=\"#平台侧\" class=\"headerlink\" title=\"平台侧\"></a>平台侧</h4><p>SLB感知机房故障，自动将流量切换到同城可用机房，不会对流量产生影响。</p>\n<h4 id=\"业务侧\"><a href=\"#业务侧\" class=\"headerlink\" title=\"业务侧\"></a>业务侧</h4><p>部署在本机房中的业务服务将无法接受流量，因此推荐用户将服务分散部署在多个集群中，避免机房故障导致服务实例不可用。</p>\n<h3 id=\"同城双机房故障应对及影响\"><a href=\"#同城双机房故障应对及影响\" class=\"headerlink\" title=\"同城双机房故障应对及影响\"></a>同城双机房故障应对及影响</h3><h4 id=\"平台侧-1\"><a href=\"#平台侧-1\" class=\"headerlink\" title=\"平台侧\"></a>平台侧</h4><p>故障期间会导致网关不可用，需要人为切换到灾备机房，切换后需要同步最新数据到灾备数据库中，并进行全量资源发布后可正常提供服务。</p>\n<h4 id=\"业务侧-1\"><a href=\"#业务侧-1\" class=\"headerlink\" title=\"业务侧\"></a>业务侧</h4><p>当前可用区中的服务将不可用，灾备机房中的服务可以正常接受流量。</p>\n<h2 id=\"关键方案设计\"><a href=\"#关键方案设计\" class=\"headerlink\" title=\"关键方案设计\"></a>关键方案设计</h2><h3 id=\"多集群读写\"><a href=\"#多集群读写\" class=\"headerlink\" title=\"多集群读写\"></a>多集群读写</h3><p><img src=\"/../../img/funcDesign/API%20Plane%E5%A4%9A%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E4%B8%8B%E5%8F%91.png\" alt=\"API Plane多集群配置下发.png\"></p>\n<p>在网关下发配置流程中，GPortal负责落库，API Plane负责下发配置到K8S API Server。在两地三中心场景下，API Plane还需要提供多集群配置下发的能力。在具体实现层面，api plane需要指定主机群和从集群配置，其中主机群为当前集群，从集群为其他集群。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">clusters</span><span class=\"token punctuation\">:</span> \n    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">k8s-api-server</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n      <span class=\"token key atrule\">cert-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n      <span class=\"token key atrule\">key-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n      <span class=\"token key atrule\">ca-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token key atrule\">test209</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">k8s-api-server</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n      <span class=\"token key atrule\">cert-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n      <span class=\"token key atrule\">key-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n      <span class=\"token key atrule\">ca-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>读操作</p>\n<p>对于读操作API Plane只从主集群中读取配置，若主集群crash，会导致pass平台视图展示失败，需要通过Nginx进行切换；</p>\n</li>\n<li><p>写操作</p>\n</li>\n</ul>\n<p>​        写操作包含GPortal落库和API Plane多集群配置下发两个操作。本方案优先API Plane下发配置，并且只要主集群配置下发成功，就返回成功，GPortal执行DB操作。对于从集群则通过子线程异步进行更新，若更新失败导致数据不一致，则需要通过定时补偿任务进行修正，保证数据的最终一致性。</p>\n<h3 id=\"定时补偿任务\"><a href=\"#定时补偿任务\" class=\"headerlink\" title=\"定时补偿任务\"></a>定时补偿任务</h3><p>本方案通过API Plane执行定时补偿任务对数据进行修正。其中每个API Plane组件都会校验本集群中CR和DB数据是否一致，若出现不一致，则以DB数据为准更新本集群CR。针对资源类型的不同，API Plane采用版本号校验和内容校验两种方式。</p>\n<h4 id=\"版本号校验：\"><a href=\"#版本号校验：\" class=\"headerlink\" title=\"版本号校验：\"></a>版本号校验：</h4><p>通过对比DB中版本号和CR中版本号是否一致来判断配置是否成功下发，优先采用该方式，涉及的资源包括Destination Rule、Virtual Service和GatewayPlugin。</p>\n<p>具体步骤：</p>\n<p>1.相关表添加版本号标识符version字段，数据创建时初始化为0，之后每次修改都自增。</p>\n<p>2.API Plane下发配置时需要带上版本号，映射到资源metadata中的hango.data.version字段。</p>\n<p>3.定时触发校验校验任务比较两种的版本号是否一致，若版本号一致，则表明配置正常下发了；否则需要基于DB中的数据进行修正，修正场景如下：</p>\n<table>\n<thead>\n<tr>\n<th>场景</th>\n<th>数据库</th>\n<th>CR</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>配置未更新</td>\n<td>version&#x3D;2</td>\n<td>skiff.nsf.data.version&#x3D;1</td>\n<td>更新CR</td>\n</tr>\n<tr>\n<td>配置未创建</td>\n<td>version&#x3D;2，enable&#x3D;true</td>\n<td>NULL</td>\n<td>创建CR</td>\n</tr>\n<tr>\n<td>禁用相关功能</td>\n<td>enable&#x3D;false</td>\n<td>NULL</td>\n<td>不操作</td>\n</tr>\n<tr>\n<td>数据库更新失败</td>\n<td>version&#x3D;2</td>\n<td>skiff.nsf.data.version&#x3D;3</td>\n<td>更新CR</td>\n</tr>\n<tr>\n<td>配置未删除</td>\n<td>NULL</td>\n<td>skiff.nsf.data.version&#x3D;1</td>\n<td>删除CR</td>\n</tr>\n</tbody></table>\n<p>上述为版本号校验的基本步骤，存在下面三种情况需要特殊处理：</p>\n<ul>\n<li><p>双表映射相同资源</p>\n<p>解释：两个表映射到相同资源</p>\n<p>场景：</p>\n<p>1.apigw_service_proxy和apigw_envoy_health_check_rule映射Destination Rule资源。</p>\n<p>2.apigw_route_rule_proxy和apigw_gportal_dubbo_info映射Virtual Service资源。</p>\n<p>解决方案：只在主映射表（apigw_service_proxy， apigw_route_rule_proxy）添加版本号，从映射表更新配置时，需要更新主映射表的版本号。</p>\n</li>\n</ul>\n<p><img src=\"/../../img/funcDesign/%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5version.png\" alt=\"健康检查version.png\"></p>\n<ul>\n<li><p>同表多记录映射相同资源</p>\n<p>解释：同一个表中的多条记录映射到相同场景</p>\n<p>场景：路由级插件apigw_envoy_plugin_binding表中相同路由下的多个插件映射到同一个GatewayPlugin资源</p>\n<p>解决方案：多条记录维护相同的版本号，具体步骤如下：</p>\n</li>\n</ul>\n<p><img src=\"/../../img/funcDesign/%E9%A1%B9%E7%9B%AE%E7%BA%A7%E6%8F%92%E4%BB%B6%E6%B5%81%E7%A8%8B.png\" alt=\"项目级插件流程.png\"></p>\n<h4 id=\"内容校验：\"><a href=\"#内容校验：\" class=\"headerlink\" title=\"内容校验：\"></a>内容校验：</h4><p>直接比较CR资源和DB中的详细内容，该方式主要应用于内容相对简单的场景，具体指Service Entry资源。该资源只包含静态服务地址信息。</p>\n<h3 id=\"API-Plane资源监听\"><a href=\"#API-Plane资源监听\" class=\"headerlink\" title=\"API Plane资源监听\"></a>API Plane资源监听</h3><p>定时补偿任务需要全量拉取K8s 资源进行校验，数据量过大时查询较慢（1w+数据需要查询3分钟），导致api server压力过大，同时导致并发问题影响补偿任务的正确性。为了解决上述问题，本方案通过K8s Informer机制实现资源缓存。</p>\n<p><img src=\"/../../img/funcDesign/K8s%20informer.png\" alt=\"K8s informer.png\"></p>\n<p>K8s Infomer机制的核心是List&#x2F;Watch，Api plane 在全量拉取资源时会使用Informer中的Lister()方法，从本地缓存中（store）获取，而非直接请求Kubernetes API。而本地缓存则通过watch机制进行实时更新。具体原理可参考<a href=\"https://houmin.cc/posts/1f0eb2ff/\">Kubernetes Informer详解</a> 。</p>\n<h3 id=\"Istio多集群服务发现\"><a href=\"#Istio多集群服务发现\" class=\"headerlink\" title=\"Istio多集群服务发现\"></a>Istio多集群服务发现</h3><p><img src=\"/../../img/funcDesign/Istio%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%9B%91%E5%90%AC.png\" alt=\"Istio多集群监听.png\"><br>该部分主要基于Istio提供的<a href=\"https://istio.io/latest/zh/docs/setup/install/multicluster/multi-primary/\">多主架构部署方案</a>实现，需要保证多集群处于单一的互通网络，任意负载间网络可达。该方案中每个集群中的Istio都会监听所有集群K8s API服务器的服务端点，从而实现获取所有集群中的服务实例。</p>\n<p>Mesh Registry也具备多集群监听的能力，实现方式参照Istio，因此不进行额外说明。</p>\n<h2 id=\"监控、告警及运维\"><a href=\"#监控、告警及运维\" class=\"headerlink\" title=\"监控、告警及运维\"></a>监控、告警及运维</h2><p>无</p>\n<h2 id=\"遗留或待解决问题\"><a href=\"#遗留或待解决问题\" class=\"headerlink\" title=\"遗留或待解决问题\"></a>遗留或待解决问题</h2><p>无</p>\n<h2 id=\"讨论及更新记录\"><a href=\"#讨论及更新记录\" class=\"headerlink\" title=\"讨论及更新记录\"></a>讨论及更新记录</h2><p>无</p>\n"},{"title":"网关可观测性建设-(SpringCloudGateway篇)","date":"2022-05-13T16:01:00.000Z","_content":"\n## 前言\n可观测性体系的建设，可以说是很多开源产品距离企业级使用的距离，SpringCloud Gateway 亦是如此。本文将从可观测性的角度，对SpringCloud Gateway进行一些改造，以期达到企业级的可观测性要求。\n\n## 可观测性\n网关通常会需要记录三类可观测性指标\n\n- Metrics：如上图所示，记录请求数、QPS、响应码、P99、P999 等指标\n\n- Trace：网关链路能够串联后续微服务体系链路，实现全链路监控\n\n- Logging：按类别打印网关日志，常见的日志分类如 accessLog、requestLog、remotingLog 等\n### Metrics\n开源 SpringCloud Gateway 集成了 micrometer-registry-prometheus，提供了一个开箱即用的大盘：https://docs.spring.io/spring-cloud-gateway/docs/3.1.8/reference/html/gateway-grafana-dashboard.json\n需要更加丰富维度的指标则需要自行埋点。\n\n而在展示上则是通过前端内嵌 Grafana 来实现，具体的功能架构如下图\n\n\n### Trace\nTrace 方案推荐对接 opentelemetry。\n\n### Logging\nLogging 方案则是 SpringCloud Gateway 开源欠缺的，在实际生产中至少应该打印 accessLog 记录请求信息，按需开启 requestLog 记录请求的 payload 信息和响应体信息，以及与后端服务连接的日志，用于排查一些连接问题。日志采集方案我们的实践是将 accessLog 输出到标准输出中，方便在 K8s 架构下配置采集，或者采用日志 agent 的方案进行文件采集。\n\n\n","source":"_posts/FuncDesign/网关可观测性建设-(SpringCloudGateway篇章).md","raw":"---\ntitle: 网关可观测性建设-(SpringCloudGateway篇)\ndate: 2022-05-14 00:01:00\ntags:\n  - SpringCloudGateway\n  - 可观测性\n  - 云原生网关\ncategories: 云原生网关\n---\n\n## 前言\n可观测性体系的建设，可以说是很多开源产品距离企业级使用的距离，SpringCloud Gateway 亦是如此。本文将从可观测性的角度，对SpringCloud Gateway进行一些改造，以期达到企业级的可观测性要求。\n\n## 可观测性\n网关通常会需要记录三类可观测性指标\n\n- Metrics：如上图所示，记录请求数、QPS、响应码、P99、P999 等指标\n\n- Trace：网关链路能够串联后续微服务体系链路，实现全链路监控\n\n- Logging：按类别打印网关日志，常见的日志分类如 accessLog、requestLog、remotingLog 等\n### Metrics\n开源 SpringCloud Gateway 集成了 micrometer-registry-prometheus，提供了一个开箱即用的大盘：https://docs.spring.io/spring-cloud-gateway/docs/3.1.8/reference/html/gateway-grafana-dashboard.json\n需要更加丰富维度的指标则需要自行埋点。\n\n而在展示上则是通过前端内嵌 Grafana 来实现，具体的功能架构如下图\n\n\n### Trace\nTrace 方案推荐对接 opentelemetry。\n\n### Logging\nLogging 方案则是 SpringCloud Gateway 开源欠缺的，在实际生产中至少应该打印 accessLog 记录请求信息，按需开启 requestLog 记录请求的 payload 信息和响应体信息，以及与后端服务连接的日志，用于排查一些连接问题。日志采集方案我们的实践是将 accessLog 输出到标准输出中，方便在 K8s 架构下配置采集，或者采用日志 agent 的方案进行文件采集。\n\n\n","slug":"FuncDesign/网关可观测性建设-(SpringCloudGateway篇章)","published":1,"updated":"2024-01-29T08:15:11.521Z","_id":"clrhmbdoo000uqzywfl0zd1p8","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>可观测性体系的建设，可以说是很多开源产品距离企业级使用的距离，SpringCloud Gateway 亦是如此。本文将从可观测性的角度，对SpringCloud Gateway进行一些改造，以期达到企业级的可观测性要求。</p>\n<h2 id=\"可观测性\"><a href=\"#可观测性\" class=\"headerlink\" title=\"可观测性\"></a>可观测性</h2><p>网关通常会需要记录三类可观测性指标</p>\n<ul>\n<li><p>Metrics：如上图所示，记录请求数、QPS、响应码、P99、P999 等指标</p>\n</li>\n<li><p>Trace：网关链路能够串联后续微服务体系链路，实现全链路监控</p>\n</li>\n<li><p>Logging：按类别打印网关日志，常见的日志分类如 accessLog、requestLog、remotingLog 等</p>\n<h3 id=\"Metrics\"><a href=\"#Metrics\" class=\"headerlink\" title=\"Metrics\"></a>Metrics</h3><p>开源 SpringCloud Gateway 集成了 micrometer-registry-prometheus，提供了一个开箱即用的大盘：<a href=\"https://docs.spring.io/spring-cloud-gateway/docs/3.1.8/reference/html/gateway-grafana-dashboard.json\">https://docs.spring.io/spring-cloud-gateway/docs/3.1.8/reference/html/gateway-grafana-dashboard.json</a><br>需要更加丰富维度的指标则需要自行埋点。</p>\n</li>\n</ul>\n<p>而在展示上则是通过前端内嵌 Grafana 来实现，具体的功能架构如下图</p>\n<h3 id=\"Trace\"><a href=\"#Trace\" class=\"headerlink\" title=\"Trace\"></a>Trace</h3><p>Trace 方案推荐对接 opentelemetry。</p>\n<h3 id=\"Logging\"><a href=\"#Logging\" class=\"headerlink\" title=\"Logging\"></a>Logging</h3><p>Logging 方案则是 SpringCloud Gateway 开源欠缺的，在实际生产中至少应该打印 accessLog 记录请求信息，按需开启 requestLog 记录请求的 payload 信息和响应体信息，以及与后端服务连接的日志，用于排查一些连接问题。日志采集方案我们的实践是将 accessLog 输出到标准输出中，方便在 K8s 架构下配置采集，或者采用日志 agent 的方案进行文件采集。</p>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>可观测性体系的建设，可以说是很多开源产品距离企业级使用的距离，SpringCloud Gateway 亦是如此。本文将从可观测性的角度，对SpringCloud Gateway进行一些改造，以期达到企业级的可观测性要求。</p>\n<h2 id=\"可观测性\"><a href=\"#可观测性\" class=\"headerlink\" title=\"可观测性\"></a>可观测性</h2><p>网关通常会需要记录三类可观测性指标</p>\n<ul>\n<li><p>Metrics：如上图所示，记录请求数、QPS、响应码、P99、P999 等指标</p>\n</li>\n<li><p>Trace：网关链路能够串联后续微服务体系链路，实现全链路监控</p>\n</li>\n<li><p>Logging：按类别打印网关日志，常见的日志分类如 accessLog、requestLog、remotingLog 等</p>\n<h3 id=\"Metrics\"><a href=\"#Metrics\" class=\"headerlink\" title=\"Metrics\"></a>Metrics</h3><p>开源 SpringCloud Gateway 集成了 micrometer-registry-prometheus，提供了一个开箱即用的大盘：<a href=\"https://docs.spring.io/spring-cloud-gateway/docs/3.1.8/reference/html/gateway-grafana-dashboard.json\">https://docs.spring.io/spring-cloud-gateway/docs/3.1.8/reference/html/gateway-grafana-dashboard.json</a><br>需要更加丰富维度的指标则需要自行埋点。</p>\n</li>\n</ul>\n<p>而在展示上则是通过前端内嵌 Grafana 来实现，具体的功能架构如下图</p>\n<h3 id=\"Trace\"><a href=\"#Trace\" class=\"headerlink\" title=\"Trace\"></a>Trace</h3><p>Trace 方案推荐对接 opentelemetry。</p>\n<h3 id=\"Logging\"><a href=\"#Logging\" class=\"headerlink\" title=\"Logging\"></a>Logging</h3><p>Logging 方案则是 SpringCloud Gateway 开源欠缺的，在实际生产中至少应该打印 accessLog 记录请求信息，按需开启 requestLog 记录请求的 payload 信息和响应体信息，以及与后端服务连接的日志，用于排查一些连接问题。日志采集方案我们的实践是将 accessLog 输出到标准输出中，方便在 K8s 架构下配置采集，或者采用日志 agent 的方案进行文件采集。</p>\n"},{"title":"网关可观测性建设-(Envoy篇)","date":"2023-09-07T16:01:00.000Z","_content":"\n","source":"_posts/FuncDesign/网关可观测性建设-(Envoy篇章).md","raw":"---\ntitle: 网关可观测性建设-(Envoy篇)\ndate: 2023-09-08 00:01:00\ntags:\n  - Envoy\n  - 云原生网关\n  - 可观测性\ncategories: 云原生网关\n---\n\n","slug":"FuncDesign/网关可观测性建设-(Envoy篇章)","published":1,"updated":"2024-01-26T06:40:58.810Z","_id":"clrhmbdop000vqzyw7e2ecu23","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":""},{"title":"网关金融场景下的大规模实践","date":"2023-12-29T16:01:00.000Z","_content":"## 前言\n在近几年，网易数帆轻舟云原生网关在国内头部证券，银行等金融场景进行大规模实践。在落地过程中，有一些典型场景以及一些痛点问题。本章主要聚焦几个真实的场景，分享在金融场景下的云原生网关大规模实践。\n\n## 金融场景下的云原生网关\n\n### 私有协议扩展\n越来越多的大型证券、银行等金融企业要求核心场景下的协议私有化。一部分原因是从企业角度要求，需要自主可控，另一部分也是证券及银行属于敏感企业，有一定的国家监管层面要求。\n\n总结下来主要有三个明显的特征需求：\n\n- 协议定制化\n\n- 入口协议统一\n\n- 多协议转换诉求\n\n针对性的，我们提供两个解决方案，针对入口协议统一，upstream协议多样的场景，通过复用Envoy HTTP Connection Managaer（HCM）提供的标准filter，提炼通用的generic_filter。针对性的扩展私有协议的编解码。这样实现的好处是，可以复用HCM提供的标准filter以及我们在http维度的积累。只需要扩展对应的协议即可以开箱即用的集成40余种插件。实现的架构如下图：\n\n![http_qstep_arc.png](..%2F..%2Fimg%2FfuncDesign%2Fhttp_qstep_arc.png)\n\n针对多协议互转以及入口协议非HTTP的场景，考虑到协议处理维度的相同点，大部分request,response的rpc架构都有相似的流式处理，路由，可观测等能力。为了简化及抽象协议扩展的复杂度，我们提出设计通用代理（generic_proxy）的架构。主要分析generic_proxy的设计理念及设计目标，提供通用的generic_proxy的编解码的扩展点，定义通用的generic route API。通过generic proxy的实现，旨在为私有协议的扩展提供通用性。其核心设计架构如下图：\n\n![qstep_generic_proxy.png](..%2F..%2Fimg%2FfuncDesign%2Fqstep_generic_proxy.png)\n\n### 插件扩展能力\n\n在金融场景下，会有一些业务定制诉求。从敏捷开发角度上考虑，需要支持一定的快速扩展能力，满足业务敏捷开发；同时，由于存在一些敏感合规的要求，业务会要求具备自身定制特殊需求的能力。因此，对云原生网关提出了以下要求：\n\n\n- 敏捷扩展\n\n- 插件隔离\n\n- 动态生效\n\n从插件开发人员和插件使用视角，我们抽象插件扩展。形成插件扩展解决方案，流程如下：\n![插件扩展.png](..%2F..%2Fimg%2FfuncDesign%2F%E6%8F%92%E4%BB%B6%E6%89%A9%E5%B1%95.png)\n\n从设计维度，本着多语言，无侵入，高性能，可视化的原则，我们从以下几方面进行扩展\n\n![rider.png](..%2F..%2Fimg%2FfuncDesign%2Frider.png)\n\n### 业务平滑上云\n金融企业作为敏感行业，稳定性压倒一切。因此，在云原生迁移过程一定不是一蹴而就的，对于网关提出，我们如何帮助业务顺利完成云原生改造，协助业务完成平滑迁移。\n![业务平滑上云的痛点.png](..%2F..%2Fimg%2FfuncDesign%2F%E4%B8%9A%E5%8A%A1%E5%B9%B3%E6%BB%91%E4%B8%8A%E4%BA%91%E7%9A%84%E7%97%9B%E7%82%B9.png)\n迁移过程中，主要有三点痛点：\n\n\n\n- 注册中心复杂\n\n- 服务模型不统一\n\n- 存量网关迁移困难\n\n基于以上痛点，我们从三个方面解决业务平滑上云的痛点，整体架构如下：\n\n![业务平滑上云.png](..%2F..%2Fimg%2FfuncDesign%2F%E4%B8%9A%E5%8A%A1%E5%B9%B3%E6%BB%91%E4%B8%8A%E4%BA%91.png)\n\n其核心主要有几点：\n\n- 通过slime mesh-registry模块实现对接多注册中心能力，已经集成zk,eureka,nacos等注册中心。\n\n- 提供丰富的upstream管理及路由能力\n\n- 抽象服务概念，统一k8s svc、静态ip、eureka app以及dubbo interface\n\n- 通过mesh-registry对接多注册中心，同步ServiceEntry资源\n\n- 支持同协议多服务发布，用于流量灰度\n\n- 提供权重分流、版本分流的能力，支持服务金丝雀发布\n\n- 通过sync-service 对接同步不同注册中心的配置数据，支持对接DB、Zookeeper等配置结构化数据，用于业务原网关配置迁移至云原生网关。\n\n### 全链路灰度\n在实际开发过程中，会存在多版本的发布及上线。复杂的微服务集群，如何能够快速拉起一套全链路的灰度逻辑环境，用于线下全链路测试、生产版本问题定位等是一个比较棘手的事情。在传统的微服务架构下，业务会通过修改自身代码，将一定特征的流量自主路由至不同版本。或者提供一套独立的环境，用于问题复现。总之，两种方式都不够轻量，涉及链路及交付周期等问题。\n\n因此，全链路灰度的提出，可以将特征请求独立在不同的完全逻辑隔离的运行时环境，能够响应快速迭代、测试、问题复现等场景。其示意图如下：\n\n![全链路灰度场景.png](..%2F..%2Fimg%2FfuncDesign%2F%E5%85%A8%E9%93%BE%E8%B7%AF%E7%81%B0%E5%BA%A6%E5%9C%BA%E6%99%AF.png)\n\n对于云原生网关来说，在全链路灰度场景下，需要关注到三个核心点：\n\n- 标签同步：能够同步服务实例，支持多注册中心的实例标签同步。\n\n- 条件匹配：能够支持对入口流量根据不同的条件进行流量打标。\n\n- 流量负载：根据不同的流量标签，将流量目的路由到对应标签（颜色）的实例。其流量架构如下：\n\n我们通过slime mesh-registry同步不同注册中心的实例，并通过Header Rewrite能力进行路由匹配条件的重写，将匹配后的信息增加额外的实例颜色标签。这一流程，从处理上为入口流量染色。之后进入核心负载均衡阶段，通过Envoy LB Subset的能力，实现染色路由。完成全链路灰度的第一跳灰度。\n\n![标签染色.png](..%2F..%2Fimg%2FfuncDesign%2F%E6%A0%87%E7%AD%BE%E6%9F%93%E8%89%B2.png)\n\n\n### 网关多租户及隔离性\n租户隔离是在企业网关中非常重要的特性，特别是在金融场景下，例如银行，其下属有众多分行；而在证券企业中，又有应用分级。网关需要具备多租户的配置隔离能力，针对不同系统之间的配置互不影响。\n\n在传统的网关实现中，只能通过部署不同的网关集群，业务进行不同集群的划分进行强物理隔离。如下图\n![物理隔离.png](..%2F..%2Fimg%2FfuncDesign%2F%E7%89%A9%E7%90%86%E9%9A%94%E7%A6%BB.png)\n\n但是这种隔离会存在一定的资源浪费，集群之间的流量不均等，有的业务集群流量很低，但是因为其系统的特殊性，政策要求必须对齐进行配置隔离以避免相互影响。我们从Envoy的实现角度，进行优化。Envoy的核心就是代理，其最主要的就是确认流量，并将流量转发到对应的upstream。\n\n下图是Envoy作为Proxy的核心流程，Envoy会对每一个监听器抽象一层Listener，此Listener可以通过动态的方式扩展并对外暴露。流量通过对应的Listener进入核心L4,L7 Filter后，通过负载均衡策略路由至不同的cluster（即Upstream）\n\n![proxy处理流程.png](..%2F..%2Fimg%2FfuncDesign%2Fproxy%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png)\n\n因此，我们可以通过抽象不同的Listener为逻辑网关，每一个Listener上的配置相互独立。基于此，用户可以选择性的在同一个物理网关集群上抽象不同的逻辑网关，提供不同的网关分组。其逻辑图如下：\n\n![物理隔离.png](..%2F..%2Fimg%2FfuncDesign%2F%E7%89%A9%E7%90%86%E9%9A%94%E7%A6%BB.png)\n\n\n\n## 总结与展望\n\n在云原生网关的探索上，我觉得还可以从以下三个方面进行后续的演进。\n\n- 全能力网关建设： 网关逐步被大家作为南北流量的通用性所接纳，不止南北流量，当前网关也会结合编排等能力，多协议转换能力被用于微服务体系。\n\n- 生产级别稳定性持续建设：从细粒度观测 -> 精准化告警 -> 快速恢复 -> 流量无损 四位一体构建监控体系；从事前阶段，提升系统稳定时间为目标，尽可能在不确定环境中降低事故发生率，事中阶段降低系统不稳定时间，事故发生尽可能快速恢复角度持续优化立体化监控，支撑事故发生的问题焦点快速发现。\n\n- AI赋能：通过沉淀专家经验，结合AI洞察能力，尽量做到问题前置，洞察故障。\n\n\n\n\n","source":"_posts/FuncDesign/网关金融场景下的大规模实践.md","raw":"---\ntitle: 网关金融场景下的大规模实践\ndate: 2023-012-30 00:01:00\ntags:\n  - Envoy\n  - 金融\n  - 云原生网关\ncategories: 云原生网关\n---\n## 前言\n在近几年，网易数帆轻舟云原生网关在国内头部证券，银行等金融场景进行大规模实践。在落地过程中，有一些典型场景以及一些痛点问题。本章主要聚焦几个真实的场景，分享在金融场景下的云原生网关大规模实践。\n\n## 金融场景下的云原生网关\n\n### 私有协议扩展\n越来越多的大型证券、银行等金融企业要求核心场景下的协议私有化。一部分原因是从企业角度要求，需要自主可控，另一部分也是证券及银行属于敏感企业，有一定的国家监管层面要求。\n\n总结下来主要有三个明显的特征需求：\n\n- 协议定制化\n\n- 入口协议统一\n\n- 多协议转换诉求\n\n针对性的，我们提供两个解决方案，针对入口协议统一，upstream协议多样的场景，通过复用Envoy HTTP Connection Managaer（HCM）提供的标准filter，提炼通用的generic_filter。针对性的扩展私有协议的编解码。这样实现的好处是，可以复用HCM提供的标准filter以及我们在http维度的积累。只需要扩展对应的协议即可以开箱即用的集成40余种插件。实现的架构如下图：\n\n![http_qstep_arc.png](..%2F..%2Fimg%2FfuncDesign%2Fhttp_qstep_arc.png)\n\n针对多协议互转以及入口协议非HTTP的场景，考虑到协议处理维度的相同点，大部分request,response的rpc架构都有相似的流式处理，路由，可观测等能力。为了简化及抽象协议扩展的复杂度，我们提出设计通用代理（generic_proxy）的架构。主要分析generic_proxy的设计理念及设计目标，提供通用的generic_proxy的编解码的扩展点，定义通用的generic route API。通过generic proxy的实现，旨在为私有协议的扩展提供通用性。其核心设计架构如下图：\n\n![qstep_generic_proxy.png](..%2F..%2Fimg%2FfuncDesign%2Fqstep_generic_proxy.png)\n\n### 插件扩展能力\n\n在金融场景下，会有一些业务定制诉求。从敏捷开发角度上考虑，需要支持一定的快速扩展能力，满足业务敏捷开发；同时，由于存在一些敏感合规的要求，业务会要求具备自身定制特殊需求的能力。因此，对云原生网关提出了以下要求：\n\n\n- 敏捷扩展\n\n- 插件隔离\n\n- 动态生效\n\n从插件开发人员和插件使用视角，我们抽象插件扩展。形成插件扩展解决方案，流程如下：\n![插件扩展.png](..%2F..%2Fimg%2FfuncDesign%2F%E6%8F%92%E4%BB%B6%E6%89%A9%E5%B1%95.png)\n\n从设计维度，本着多语言，无侵入，高性能，可视化的原则，我们从以下几方面进行扩展\n\n![rider.png](..%2F..%2Fimg%2FfuncDesign%2Frider.png)\n\n### 业务平滑上云\n金融企业作为敏感行业，稳定性压倒一切。因此，在云原生迁移过程一定不是一蹴而就的，对于网关提出，我们如何帮助业务顺利完成云原生改造，协助业务完成平滑迁移。\n![业务平滑上云的痛点.png](..%2F..%2Fimg%2FfuncDesign%2F%E4%B8%9A%E5%8A%A1%E5%B9%B3%E6%BB%91%E4%B8%8A%E4%BA%91%E7%9A%84%E7%97%9B%E7%82%B9.png)\n迁移过程中，主要有三点痛点：\n\n\n\n- 注册中心复杂\n\n- 服务模型不统一\n\n- 存量网关迁移困难\n\n基于以上痛点，我们从三个方面解决业务平滑上云的痛点，整体架构如下：\n\n![业务平滑上云.png](..%2F..%2Fimg%2FfuncDesign%2F%E4%B8%9A%E5%8A%A1%E5%B9%B3%E6%BB%91%E4%B8%8A%E4%BA%91.png)\n\n其核心主要有几点：\n\n- 通过slime mesh-registry模块实现对接多注册中心能力，已经集成zk,eureka,nacos等注册中心。\n\n- 提供丰富的upstream管理及路由能力\n\n- 抽象服务概念，统一k8s svc、静态ip、eureka app以及dubbo interface\n\n- 通过mesh-registry对接多注册中心，同步ServiceEntry资源\n\n- 支持同协议多服务发布，用于流量灰度\n\n- 提供权重分流、版本分流的能力，支持服务金丝雀发布\n\n- 通过sync-service 对接同步不同注册中心的配置数据，支持对接DB、Zookeeper等配置结构化数据，用于业务原网关配置迁移至云原生网关。\n\n### 全链路灰度\n在实际开发过程中，会存在多版本的发布及上线。复杂的微服务集群，如何能够快速拉起一套全链路的灰度逻辑环境，用于线下全链路测试、生产版本问题定位等是一个比较棘手的事情。在传统的微服务架构下，业务会通过修改自身代码，将一定特征的流量自主路由至不同版本。或者提供一套独立的环境，用于问题复现。总之，两种方式都不够轻量，涉及链路及交付周期等问题。\n\n因此，全链路灰度的提出，可以将特征请求独立在不同的完全逻辑隔离的运行时环境，能够响应快速迭代、测试、问题复现等场景。其示意图如下：\n\n![全链路灰度场景.png](..%2F..%2Fimg%2FfuncDesign%2F%E5%85%A8%E9%93%BE%E8%B7%AF%E7%81%B0%E5%BA%A6%E5%9C%BA%E6%99%AF.png)\n\n对于云原生网关来说，在全链路灰度场景下，需要关注到三个核心点：\n\n- 标签同步：能够同步服务实例，支持多注册中心的实例标签同步。\n\n- 条件匹配：能够支持对入口流量根据不同的条件进行流量打标。\n\n- 流量负载：根据不同的流量标签，将流量目的路由到对应标签（颜色）的实例。其流量架构如下：\n\n我们通过slime mesh-registry同步不同注册中心的实例，并通过Header Rewrite能力进行路由匹配条件的重写，将匹配后的信息增加额外的实例颜色标签。这一流程，从处理上为入口流量染色。之后进入核心负载均衡阶段，通过Envoy LB Subset的能力，实现染色路由。完成全链路灰度的第一跳灰度。\n\n![标签染色.png](..%2F..%2Fimg%2FfuncDesign%2F%E6%A0%87%E7%AD%BE%E6%9F%93%E8%89%B2.png)\n\n\n### 网关多租户及隔离性\n租户隔离是在企业网关中非常重要的特性，特别是在金融场景下，例如银行，其下属有众多分行；而在证券企业中，又有应用分级。网关需要具备多租户的配置隔离能力，针对不同系统之间的配置互不影响。\n\n在传统的网关实现中，只能通过部署不同的网关集群，业务进行不同集群的划分进行强物理隔离。如下图\n![物理隔离.png](..%2F..%2Fimg%2FfuncDesign%2F%E7%89%A9%E7%90%86%E9%9A%94%E7%A6%BB.png)\n\n但是这种隔离会存在一定的资源浪费，集群之间的流量不均等，有的业务集群流量很低，但是因为其系统的特殊性，政策要求必须对齐进行配置隔离以避免相互影响。我们从Envoy的实现角度，进行优化。Envoy的核心就是代理，其最主要的就是确认流量，并将流量转发到对应的upstream。\n\n下图是Envoy作为Proxy的核心流程，Envoy会对每一个监听器抽象一层Listener，此Listener可以通过动态的方式扩展并对外暴露。流量通过对应的Listener进入核心L4,L7 Filter后，通过负载均衡策略路由至不同的cluster（即Upstream）\n\n![proxy处理流程.png](..%2F..%2Fimg%2FfuncDesign%2Fproxy%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png)\n\n因此，我们可以通过抽象不同的Listener为逻辑网关，每一个Listener上的配置相互独立。基于此，用户可以选择性的在同一个物理网关集群上抽象不同的逻辑网关，提供不同的网关分组。其逻辑图如下：\n\n![物理隔离.png](..%2F..%2Fimg%2FfuncDesign%2F%E7%89%A9%E7%90%86%E9%9A%94%E7%A6%BB.png)\n\n\n\n## 总结与展望\n\n在云原生网关的探索上，我觉得还可以从以下三个方面进行后续的演进。\n\n- 全能力网关建设： 网关逐步被大家作为南北流量的通用性所接纳，不止南北流量，当前网关也会结合编排等能力，多协议转换能力被用于微服务体系。\n\n- 生产级别稳定性持续建设：从细粒度观测 -> 精准化告警 -> 快速恢复 -> 流量无损 四位一体构建监控体系；从事前阶段，提升系统稳定时间为目标，尽可能在不确定环境中降低事故发生率，事中阶段降低系统不稳定时间，事故发生尽可能快速恢复角度持续优化立体化监控，支撑事故发生的问题焦点快速发现。\n\n- AI赋能：通过沉淀专家经验，结合AI洞察能力，尽量做到问题前置，洞察故障。\n\n\n\n\n","slug":"FuncDesign/网关金融场景下的大规模实践","published":1,"updated":"2024-01-24T10:08:08.143Z","_id":"clrhmbdov000wqzywhuh38epk","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在近几年，网易数帆轻舟云原生网关在国内头部证券，银行等金融场景进行大规模实践。在落地过程中，有一些典型场景以及一些痛点问题。本章主要聚焦几个真实的场景，分享在金融场景下的云原生网关大规模实践。</p>\n<h2 id=\"金融场景下的云原生网关\"><a href=\"#金融场景下的云原生网关\" class=\"headerlink\" title=\"金融场景下的云原生网关\"></a>金融场景下的云原生网关</h2><h3 id=\"私有协议扩展\"><a href=\"#私有协议扩展\" class=\"headerlink\" title=\"私有协议扩展\"></a>私有协议扩展</h3><p>越来越多的大型证券、银行等金融企业要求核心场景下的协议私有化。一部分原因是从企业角度要求，需要自主可控，另一部分也是证券及银行属于敏感企业，有一定的国家监管层面要求。</p>\n<p>总结下来主要有三个明显的特征需求：</p>\n<ul>\n<li><p>协议定制化</p>\n</li>\n<li><p>入口协议统一</p>\n</li>\n<li><p>多协议转换诉求</p>\n</li>\n</ul>\n<p>针对性的，我们提供两个解决方案，针对入口协议统一，upstream协议多样的场景，通过复用Envoy HTTP Connection Managaer（HCM）提供的标准filter，提炼通用的generic_filter。针对性的扩展私有协议的编解码。这样实现的好处是，可以复用HCM提供的标准filter以及我们在http维度的积累。只需要扩展对应的协议即可以开箱即用的集成40余种插件。实现的架构如下图：</p>\n<p><img src=\"/../../img/funcDesign/http_qstep_arc.png\" alt=\"http_qstep_arc.png\"></p>\n<p>针对多协议互转以及入口协议非HTTP的场景，考虑到协议处理维度的相同点，大部分request,response的rpc架构都有相似的流式处理，路由，可观测等能力。为了简化及抽象协议扩展的复杂度，我们提出设计通用代理（generic_proxy）的架构。主要分析generic_proxy的设计理念及设计目标，提供通用的generic_proxy的编解码的扩展点，定义通用的generic route API。通过generic proxy的实现，旨在为私有协议的扩展提供通用性。其核心设计架构如下图：</p>\n<p><img src=\"/../../img/funcDesign/qstep_generic_proxy.png\" alt=\"qstep_generic_proxy.png\"></p>\n<h3 id=\"插件扩展能力\"><a href=\"#插件扩展能力\" class=\"headerlink\" title=\"插件扩展能力\"></a>插件扩展能力</h3><p>在金融场景下，会有一些业务定制诉求。从敏捷开发角度上考虑，需要支持一定的快速扩展能力，满足业务敏捷开发；同时，由于存在一些敏感合规的要求，业务会要求具备自身定制特殊需求的能力。因此，对云原生网关提出了以下要求：</p>\n<ul>\n<li><p>敏捷扩展</p>\n</li>\n<li><p>插件隔离</p>\n</li>\n<li><p>动态生效</p>\n</li>\n</ul>\n<p>从插件开发人员和插件使用视角，我们抽象插件扩展。形成插件扩展解决方案，流程如下：<br><img src=\"/../../img/funcDesign/%E6%8F%92%E4%BB%B6%E6%89%A9%E5%B1%95.png\" alt=\"插件扩展.png\"></p>\n<p>从设计维度，本着多语言，无侵入，高性能，可视化的原则，我们从以下几方面进行扩展</p>\n<p><img src=\"/../../img/funcDesign/rider.png\" alt=\"rider.png\"></p>\n<h3 id=\"业务平滑上云\"><a href=\"#业务平滑上云\" class=\"headerlink\" title=\"业务平滑上云\"></a>业务平滑上云</h3><p>金融企业作为敏感行业，稳定性压倒一切。因此，在云原生迁移过程一定不是一蹴而就的，对于网关提出，我们如何帮助业务顺利完成云原生改造，协助业务完成平滑迁移。<br><img src=\"/../../img/funcDesign/%E4%B8%9A%E5%8A%A1%E5%B9%B3%E6%BB%91%E4%B8%8A%E4%BA%91%E7%9A%84%E7%97%9B%E7%82%B9.png\" alt=\"业务平滑上云的痛点.png\"><br>迁移过程中，主要有三点痛点：</p>\n<ul>\n<li><p>注册中心复杂</p>\n</li>\n<li><p>服务模型不统一</p>\n</li>\n<li><p>存量网关迁移困难</p>\n</li>\n</ul>\n<p>基于以上痛点，我们从三个方面解决业务平滑上云的痛点，整体架构如下：</p>\n<p><img src=\"/../../img/funcDesign/%E4%B8%9A%E5%8A%A1%E5%B9%B3%E6%BB%91%E4%B8%8A%E4%BA%91.png\" alt=\"业务平滑上云.png\"></p>\n<p>其核心主要有几点：</p>\n<ul>\n<li><p>通过slime mesh-registry模块实现对接多注册中心能力，已经集成zk,eureka,nacos等注册中心。</p>\n</li>\n<li><p>提供丰富的upstream管理及路由能力</p>\n</li>\n<li><p>抽象服务概念，统一k8s svc、静态ip、eureka app以及dubbo interface</p>\n</li>\n<li><p>通过mesh-registry对接多注册中心，同步ServiceEntry资源</p>\n</li>\n<li><p>支持同协议多服务发布，用于流量灰度</p>\n</li>\n<li><p>提供权重分流、版本分流的能力，支持服务金丝雀发布</p>\n</li>\n<li><p>通过sync-service 对接同步不同注册中心的配置数据，支持对接DB、Zookeeper等配置结构化数据，用于业务原网关配置迁移至云原生网关。</p>\n</li>\n</ul>\n<h3 id=\"全链路灰度\"><a href=\"#全链路灰度\" class=\"headerlink\" title=\"全链路灰度\"></a>全链路灰度</h3><p>在实际开发过程中，会存在多版本的发布及上线。复杂的微服务集群，如何能够快速拉起一套全链路的灰度逻辑环境，用于线下全链路测试、生产版本问题定位等是一个比较棘手的事情。在传统的微服务架构下，业务会通过修改自身代码，将一定特征的流量自主路由至不同版本。或者提供一套独立的环境，用于问题复现。总之，两种方式都不够轻量，涉及链路及交付周期等问题。</p>\n<p>因此，全链路灰度的提出，可以将特征请求独立在不同的完全逻辑隔离的运行时环境，能够响应快速迭代、测试、问题复现等场景。其示意图如下：</p>\n<p><img src=\"/../../img/funcDesign/%E5%85%A8%E9%93%BE%E8%B7%AF%E7%81%B0%E5%BA%A6%E5%9C%BA%E6%99%AF.png\" alt=\"全链路灰度场景.png\"></p>\n<p>对于云原生网关来说，在全链路灰度场景下，需要关注到三个核心点：</p>\n<ul>\n<li><p>标签同步：能够同步服务实例，支持多注册中心的实例标签同步。</p>\n</li>\n<li><p>条件匹配：能够支持对入口流量根据不同的条件进行流量打标。</p>\n</li>\n<li><p>流量负载：根据不同的流量标签，将流量目的路由到对应标签（颜色）的实例。其流量架构如下：</p>\n</li>\n</ul>\n<p>我们通过slime mesh-registry同步不同注册中心的实例，并通过Header Rewrite能力进行路由匹配条件的重写，将匹配后的信息增加额外的实例颜色标签。这一流程，从处理上为入口流量染色。之后进入核心负载均衡阶段，通过Envoy LB Subset的能力，实现染色路由。完成全链路灰度的第一跳灰度。</p>\n<p><img src=\"/../../img/funcDesign/%E6%A0%87%E7%AD%BE%E6%9F%93%E8%89%B2.png\" alt=\"标签染色.png\"></p>\n<h3 id=\"网关多租户及隔离性\"><a href=\"#网关多租户及隔离性\" class=\"headerlink\" title=\"网关多租户及隔离性\"></a>网关多租户及隔离性</h3><p>租户隔离是在企业网关中非常重要的特性，特别是在金融场景下，例如银行，其下属有众多分行；而在证券企业中，又有应用分级。网关需要具备多租户的配置隔离能力，针对不同系统之间的配置互不影响。</p>\n<p>在传统的网关实现中，只能通过部署不同的网关集群，业务进行不同集群的划分进行强物理隔离。如下图<br><img src=\"/../../img/funcDesign/%E7%89%A9%E7%90%86%E9%9A%94%E7%A6%BB.png\" alt=\"物理隔离.png\"></p>\n<p>但是这种隔离会存在一定的资源浪费，集群之间的流量不均等，有的业务集群流量很低，但是因为其系统的特殊性，政策要求必须对齐进行配置隔离以避免相互影响。我们从Envoy的实现角度，进行优化。Envoy的核心就是代理，其最主要的就是确认流量，并将流量转发到对应的upstream。</p>\n<p>下图是Envoy作为Proxy的核心流程，Envoy会对每一个监听器抽象一层Listener，此Listener可以通过动态的方式扩展并对外暴露。流量通过对应的Listener进入核心L4,L7 Filter后，通过负载均衡策略路由至不同的cluster（即Upstream）</p>\n<p><img src=\"/../../img/funcDesign/proxy%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png\" alt=\"proxy处理流程.png\"></p>\n<p>因此，我们可以通过抽象不同的Listener为逻辑网关，每一个Listener上的配置相互独立。基于此，用户可以选择性的在同一个物理网关集群上抽象不同的逻辑网关，提供不同的网关分组。其逻辑图如下：</p>\n<p><img src=\"/../../img/funcDesign/%E7%89%A9%E7%90%86%E9%9A%94%E7%A6%BB.png\" alt=\"物理隔离.png\"></p>\n<h2 id=\"总结与展望\"><a href=\"#总结与展望\" class=\"headerlink\" title=\"总结与展望\"></a>总结与展望</h2><p>在云原生网关的探索上，我觉得还可以从以下三个方面进行后续的演进。</p>\n<ul>\n<li><p>全能力网关建设： 网关逐步被大家作为南北流量的通用性所接纳，不止南北流量，当前网关也会结合编排等能力，多协议转换能力被用于微服务体系。</p>\n</li>\n<li><p>生产级别稳定性持续建设：从细粒度观测 -&gt; 精准化告警 -&gt; 快速恢复 -&gt; 流量无损 四位一体构建监控体系；从事前阶段，提升系统稳定时间为目标，尽可能在不确定环境中降低事故发生率，事中阶段降低系统不稳定时间，事故发生尽可能快速恢复角度持续优化立体化监控，支撑事故发生的问题焦点快速发现。</p>\n</li>\n<li><p>AI赋能：通过沉淀专家经验，结合AI洞察能力，尽量做到问题前置，洞察故障。</p>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在近几年，网易数帆轻舟云原生网关在国内头部证券，银行等金融场景进行大规模实践。在落地过程中，有一些典型场景以及一些痛点问题。本章主要聚焦几个真实的场景，分享在金融场景下的云原生网关大规模实践。</p>\n<h2 id=\"金融场景下的云原生网关\"><a href=\"#金融场景下的云原生网关\" class=\"headerlink\" title=\"金融场景下的云原生网关\"></a>金融场景下的云原生网关</h2><h3 id=\"私有协议扩展\"><a href=\"#私有协议扩展\" class=\"headerlink\" title=\"私有协议扩展\"></a>私有协议扩展</h3><p>越来越多的大型证券、银行等金融企业要求核心场景下的协议私有化。一部分原因是从企业角度要求，需要自主可控，另一部分也是证券及银行属于敏感企业，有一定的国家监管层面要求。</p>\n<p>总结下来主要有三个明显的特征需求：</p>\n<ul>\n<li><p>协议定制化</p>\n</li>\n<li><p>入口协议统一</p>\n</li>\n<li><p>多协议转换诉求</p>\n</li>\n</ul>\n<p>针对性的，我们提供两个解决方案，针对入口协议统一，upstream协议多样的场景，通过复用Envoy HTTP Connection Managaer（HCM）提供的标准filter，提炼通用的generic_filter。针对性的扩展私有协议的编解码。这样实现的好处是，可以复用HCM提供的标准filter以及我们在http维度的积累。只需要扩展对应的协议即可以开箱即用的集成40余种插件。实现的架构如下图：</p>\n<p><img src=\"/../../img/funcDesign/http_qstep_arc.png\" alt=\"http_qstep_arc.png\"></p>\n<p>针对多协议互转以及入口协议非HTTP的场景，考虑到协议处理维度的相同点，大部分request,response的rpc架构都有相似的流式处理，路由，可观测等能力。为了简化及抽象协议扩展的复杂度，我们提出设计通用代理（generic_proxy）的架构。主要分析generic_proxy的设计理念及设计目标，提供通用的generic_proxy的编解码的扩展点，定义通用的generic route API。通过generic proxy的实现，旨在为私有协议的扩展提供通用性。其核心设计架构如下图：</p>\n<p><img src=\"/../../img/funcDesign/qstep_generic_proxy.png\" alt=\"qstep_generic_proxy.png\"></p>\n<h3 id=\"插件扩展能力\"><a href=\"#插件扩展能力\" class=\"headerlink\" title=\"插件扩展能力\"></a>插件扩展能力</h3><p>在金融场景下，会有一些业务定制诉求。从敏捷开发角度上考虑，需要支持一定的快速扩展能力，满足业务敏捷开发；同时，由于存在一些敏感合规的要求，业务会要求具备自身定制特殊需求的能力。因此，对云原生网关提出了以下要求：</p>\n<ul>\n<li><p>敏捷扩展</p>\n</li>\n<li><p>插件隔离</p>\n</li>\n<li><p>动态生效</p>\n</li>\n</ul>\n<p>从插件开发人员和插件使用视角，我们抽象插件扩展。形成插件扩展解决方案，流程如下：<br><img src=\"/../../img/funcDesign/%E6%8F%92%E4%BB%B6%E6%89%A9%E5%B1%95.png\" alt=\"插件扩展.png\"></p>\n<p>从设计维度，本着多语言，无侵入，高性能，可视化的原则，我们从以下几方面进行扩展</p>\n<p><img src=\"/../../img/funcDesign/rider.png\" alt=\"rider.png\"></p>\n<h3 id=\"业务平滑上云\"><a href=\"#业务平滑上云\" class=\"headerlink\" title=\"业务平滑上云\"></a>业务平滑上云</h3><p>金融企业作为敏感行业，稳定性压倒一切。因此，在云原生迁移过程一定不是一蹴而就的，对于网关提出，我们如何帮助业务顺利完成云原生改造，协助业务完成平滑迁移。<br><img src=\"/../../img/funcDesign/%E4%B8%9A%E5%8A%A1%E5%B9%B3%E6%BB%91%E4%B8%8A%E4%BA%91%E7%9A%84%E7%97%9B%E7%82%B9.png\" alt=\"业务平滑上云的痛点.png\"><br>迁移过程中，主要有三点痛点：</p>\n<ul>\n<li><p>注册中心复杂</p>\n</li>\n<li><p>服务模型不统一</p>\n</li>\n<li><p>存量网关迁移困难</p>\n</li>\n</ul>\n<p>基于以上痛点，我们从三个方面解决业务平滑上云的痛点，整体架构如下：</p>\n<p><img src=\"/../../img/funcDesign/%E4%B8%9A%E5%8A%A1%E5%B9%B3%E6%BB%91%E4%B8%8A%E4%BA%91.png\" alt=\"业务平滑上云.png\"></p>\n<p>其核心主要有几点：</p>\n<ul>\n<li><p>通过slime mesh-registry模块实现对接多注册中心能力，已经集成zk,eureka,nacos等注册中心。</p>\n</li>\n<li><p>提供丰富的upstream管理及路由能力</p>\n</li>\n<li><p>抽象服务概念，统一k8s svc、静态ip、eureka app以及dubbo interface</p>\n</li>\n<li><p>通过mesh-registry对接多注册中心，同步ServiceEntry资源</p>\n</li>\n<li><p>支持同协议多服务发布，用于流量灰度</p>\n</li>\n<li><p>提供权重分流、版本分流的能力，支持服务金丝雀发布</p>\n</li>\n<li><p>通过sync-service 对接同步不同注册中心的配置数据，支持对接DB、Zookeeper等配置结构化数据，用于业务原网关配置迁移至云原生网关。</p>\n</li>\n</ul>\n<h3 id=\"全链路灰度\"><a href=\"#全链路灰度\" class=\"headerlink\" title=\"全链路灰度\"></a>全链路灰度</h3><p>在实际开发过程中，会存在多版本的发布及上线。复杂的微服务集群，如何能够快速拉起一套全链路的灰度逻辑环境，用于线下全链路测试、生产版本问题定位等是一个比较棘手的事情。在传统的微服务架构下，业务会通过修改自身代码，将一定特征的流量自主路由至不同版本。或者提供一套独立的环境，用于问题复现。总之，两种方式都不够轻量，涉及链路及交付周期等问题。</p>\n<p>因此，全链路灰度的提出，可以将特征请求独立在不同的完全逻辑隔离的运行时环境，能够响应快速迭代、测试、问题复现等场景。其示意图如下：</p>\n<p><img src=\"/../../img/funcDesign/%E5%85%A8%E9%93%BE%E8%B7%AF%E7%81%B0%E5%BA%A6%E5%9C%BA%E6%99%AF.png\" alt=\"全链路灰度场景.png\"></p>\n<p>对于云原生网关来说，在全链路灰度场景下，需要关注到三个核心点：</p>\n<ul>\n<li><p>标签同步：能够同步服务实例，支持多注册中心的实例标签同步。</p>\n</li>\n<li><p>条件匹配：能够支持对入口流量根据不同的条件进行流量打标。</p>\n</li>\n<li><p>流量负载：根据不同的流量标签，将流量目的路由到对应标签（颜色）的实例。其流量架构如下：</p>\n</li>\n</ul>\n<p>我们通过slime mesh-registry同步不同注册中心的实例，并通过Header Rewrite能力进行路由匹配条件的重写，将匹配后的信息增加额外的实例颜色标签。这一流程，从处理上为入口流量染色。之后进入核心负载均衡阶段，通过Envoy LB Subset的能力，实现染色路由。完成全链路灰度的第一跳灰度。</p>\n<p><img src=\"/../../img/funcDesign/%E6%A0%87%E7%AD%BE%E6%9F%93%E8%89%B2.png\" alt=\"标签染色.png\"></p>\n<h3 id=\"网关多租户及隔离性\"><a href=\"#网关多租户及隔离性\" class=\"headerlink\" title=\"网关多租户及隔离性\"></a>网关多租户及隔离性</h3><p>租户隔离是在企业网关中非常重要的特性，特别是在金融场景下，例如银行，其下属有众多分行；而在证券企业中，又有应用分级。网关需要具备多租户的配置隔离能力，针对不同系统之间的配置互不影响。</p>\n<p>在传统的网关实现中，只能通过部署不同的网关集群，业务进行不同集群的划分进行强物理隔离。如下图<br><img src=\"/../../img/funcDesign/%E7%89%A9%E7%90%86%E9%9A%94%E7%A6%BB.png\" alt=\"物理隔离.png\"></p>\n<p>但是这种隔离会存在一定的资源浪费，集群之间的流量不均等，有的业务集群流量很低，但是因为其系统的特殊性，政策要求必须对齐进行配置隔离以避免相互影响。我们从Envoy的实现角度，进行优化。Envoy的核心就是代理，其最主要的就是确认流量，并将流量转发到对应的upstream。</p>\n<p>下图是Envoy作为Proxy的核心流程，Envoy会对每一个监听器抽象一层Listener，此Listener可以通过动态的方式扩展并对外暴露。流量通过对应的Listener进入核心L4,L7 Filter后，通过负载均衡策略路由至不同的cluster（即Upstream）</p>\n<p><img src=\"/../../img/funcDesign/proxy%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png\" alt=\"proxy处理流程.png\"></p>\n<p>因此，我们可以通过抽象不同的Listener为逻辑网关，每一个Listener上的配置相互独立。基于此，用户可以选择性的在同一个物理网关集群上抽象不同的逻辑网关，提供不同的网关分组。其逻辑图如下：</p>\n<p><img src=\"/../../img/funcDesign/%E7%89%A9%E7%90%86%E9%9A%94%E7%A6%BB.png\" alt=\"物理隔离.png\"></p>\n<h2 id=\"总结与展望\"><a href=\"#总结与展望\" class=\"headerlink\" title=\"总结与展望\"></a>总结与展望</h2><p>在云原生网关的探索上，我觉得还可以从以下三个方面进行后续的演进。</p>\n<ul>\n<li><p>全能力网关建设： 网关逐步被大家作为南北流量的通用性所接纳，不止南北流量，当前网关也会结合编排等能力，多协议转换能力被用于微服务体系。</p>\n</li>\n<li><p>生产级别稳定性持续建设：从细粒度观测 -&gt; 精准化告警 -&gt; 快速恢复 -&gt; 流量无损 四位一体构建监控体系；从事前阶段，提升系统稳定时间为目标，尽可能在不确定环境中降低事故发生率，事中阶段降低系统不稳定时间，事故发生尽可能快速恢复角度持续优化立体化监控，支撑事故发生的问题焦点快速发现。</p>\n</li>\n<li><p>AI赋能：通过沉淀专家经验，结合AI洞察能力，尽量做到问题前置，洞察故障。</p>\n</li>\n</ul>\n"},{"title":"关于Hango网关中gportal和api-plane组件合并实施方案","date":"2023-03-11T16:01:00.000Z","_content":"# 组件合并实施方案\n## 背景\n网关为了降低部署成本，减少运维代价,现需要将gportal和api-plane的组件在部署的时候进行合并，精简部署的组件。以下将围绕实施方案以及需要考虑的相关问题进行展开。\n方案 不涉及到代码模块的合并，在K8s基座内部的服务模块合并方案不外乎两种，一是将portal和api-plane部署在pod的同一容器进程内，二是将portal和api-plane放在同一pod的不同容器中。\n但是第一种方案将两个服务放在同一个容器中既不符合Kubernetes的最佳实践，同时也存在诸多问题，诸如：\n* 它们的部署和管理变得更加复杂，对于不同的服务可能需要不同的配置和更新策略，这会增加容器的复杂度和维护成本。\n* 共享同一个资源池，这可能会导致它们之间的资源争用或者不均衡，难以对它们进行单独的扩展和调整。\n* 共享同一个进程空间和文件系统，缺乏隔离性，这可能会导致它们之间的冲突或干扰等等。\n  而将gportal和api-plane合并至同一pod的不同容器中可以最大复用原先各自服务的deploy里的配置内容，且不需要更改镜像的配置信息，可以较小工作量完成组件的聚合。\n  基于以上诸多原因我们采用第二种方案将gportal和api-plane合并至同一pod的不同容器中。\n## 相关问题\ngportal和api-plane合并至同一pod的不同容器中同时也需要考虑以下问题：\n* 资源占用增加\n  原先将其分开部署在不同的deploy中，我们可以按需控制gportal和api-plane各自的副本数，但现在两个服务的容器数量比为```1:1```，资源开销将有增加。\n* gportal和api-plane之间的通信问题：\n\n  1、api-plane的服务地址是存储在DB的hango_gateway表中，我们可以通过更改表数据来指定api-plane的服务地址。\n\n  2、同一pod的不同容器共享同一个进程空间和网络命名空间，这意味着它们将共享相同的主机名、IP地址和端口号。我们可以指定api-plane的服务地址为localhost进行调用。\n\n* 健康检查\n  我们在做组件合并的过程中会为各个容器服务配置健康检查， 当pod内所有容器的健康检查都成功时，才会将流量路由到Pod，这就要求gportal和api-plane服务必须同时可用。\n## 如何兼容多集群纳管\n现阶段网关是依靠于gportal调用不同环境乃至不同集群的api-plane地址实现多网关的纳管，每个api-plane的地址所指向的上游集群都享有同一份网关资源。\n![现阶段多网关纳管.png](..%2F..%2Fimg%2FfuncDesign%2F%E7%8E%B0%E9%98%B6%E6%AE%B5%E5%A4%9A%E7%BD%91%E5%85%B3%E7%BA%B3%E7%AE%A1.png)\n如将部署架构下api-plane和gportal合为同一个pod中，两者同处于管控集群，意味着原先多网关的纳管能力需要从gportal下沉到 api-plane服务中，由api-plane为共享同一份资源的计算集群进行分组。下面我们会以较多篇幅讨论多集群纳管的方案\n\n### 多集群纳管方案一：\n\n由前文我们了解到在新的部署架构中，gportal和api-plane同处于管控集群，我们需要将原先DB存储api-plane服务的地址指向改为 localhost，并且表并且gportal所有对于api-plane的调用都需要传递共享该资源的集群分组标识，由api-plane根据根据分组标识筛选出对应计算集群的信息对其资源进行操作。\n\n![多集群纳管方案一.png](..%2F..%2Fimg%2FfuncDesign%2F%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%BA%B3%E7%AE%A1%E6%96%B9%E6%A1%88%E4%B8%80.png)\napi-plane配置文件新增了对相同副本的集群进行了分组\n```yaml\nk8s:\n  groups:\n    - group : gateway1\n      clusters:\n        master:\n          k8s-api-server: \"\"\n          cert-data: \"\"\n          key-data: \"\"\n        slave1:\n          k8s-api-server: \"\"\n          cert-data: \"\"\n          key-data: \"\"\n        slave2:\n          k8s-api-server: \"\"\n          cert-data: \"\"\n          key-data: \"\"\n    - group : gateway2\n      clusters:\n        master:\n          k8s-api-server: \"\"\n          cert-data: \"\"\n          key-data: \"\"\n\n```\n\n\n需要改造内容\n\n1、api-plane服务deploy、ConfigMap 的yaml文件内容迁移至gportal的deploy containers节点下\n\n2、DB的```hango_gateway```表中，我们更改表数据来指定api-plane的服务地址为localhost。\n\n3、chart场景化抽象\n\n4、gportal对api-plane发送的请求都需要携带group信息\n\n5、api-plane的ConfigMap中配置多集群的api-server地址，服务读取ConfigMap初始化集群客户端，并根据group进行客户端缓存\n\n6、需要操作api-server时，从请求中获取group信息，再从缓存中根据group信息获取Kubernetes 客户端\n\n### 多集群纳管方案二：\n根据前文内容，若gportal和api-plane位于同一管控集群中，那么api-plane就需要承担管理多集群配置下发的责任，这将使得API-plane相关配置下发的实现变得更为复杂。但是，我们可以稍微思考一下，如果将gportal和api-plane都部署在计算集群中，也可以在保持现有部署架构的情况下实现多集群纳管。\n\n![多集群纳管方案二.png](..%2F..%2Fimg%2FfuncDesign%2F%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%BA%B3%E7%AE%A1%E6%96%B9%E6%A1%88%E4%BA%8C.png)\n### 多集群纳管方案三：\n以上都是改动比较大的改造，我们也可以不用走一刀切的策略。我们可以对不同场景的chart进行抽象。\n如果数据面和管控面都处于同一个集群下，那么我们可以考虑portal和api-plane组件在deploy中进行合并。\n\n![多集群纳管方案三-1.png](..%2F..%2Fimg%2FfuncDesign%2F%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%BA%B3%E7%AE%A1%E6%96%B9%E6%A1%88%E4%B8%89-1.png)\n如果数据面和管控面不在同一个集群下，多集群还是按照现在portal和api-plane组件分离的方式：\n\n![多集群纳管方案三-2.png](..%2F..%2Fimg%2FfuncDesign%2F%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%BA%B3%E7%AE%A1%E6%96%B9%E6%A1%88%E4%B8%89-2.png)\n## 后续长期规划\n尽管gportal和api-plane的服务职责不同，但它们都属于Java服务的体系都由网关团队进行开发，且api-plane仅被gportal服务所调用，现无论它们在同一pod还是分别拆分到计算管控集群，只要它们作为两个服务存在，就会造成资源损耗。因此，我们可以考虑将它们合并为同一个工程的不同模块，按职责划分模块间关系。下图为portal现有的功能模块，未来，可以将API-plane工程作为API-Server的职责模块迁移至portal工程中，这也是合理的。\n![组件代码合并.png](..%2F..%2Fimg%2FfuncDesign%2F%E7%BB%84%E4%BB%B6%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6.png)\n\n这样将两个相互调用的微服务合并为同一个工程的两个 model，会带来以下好处：\n* 减少通信成本：将原本需要通过网络通信的两个微服务合并到同一个工程中，可以减少网络通信的成本和延迟。\n* 简化部署操作：将两个微服务合并为同一个工程，可以简化部署操作，减少部署时间和错误。\n* 提高程序的可维护性：将两个微服务合并为同一个工程，可以减少代码的重复，降低维护成本。\n* api-server与DB之间可以通过事务保证资源数据的一致性\n\n在考虑将两个微服务合并为同一个工程时，api-plane所有的controller都将变成普通方法由portal进行调用，存在相当大的改造以及测试成本。\n![前端管控多集群.png](..%2F..%2Fimg%2FfuncDesign%2F%E5%89%8D%E7%AB%AF%E7%AE%A1%E6%8E%A7%E5%A4%9A%E9%9B%86%E7%BE%A4.png)\n\n## 结论\n综上为未来网关组件合并的探索，但现阶段标品如果按照以上的内容进行部署配置上的更改会给SRE带来很大的部署成本且原先的部署helm脚本会变得更复杂，因此我们前期先在开源版本进行组件的合并，后续在完成包括服务模块合并到portal服务中之后，我们再将helm脚本迁移到标品的版本。","source":"_posts/FuncDesign/关于Hango网关中gportal和api-plane组件合并实施方案.md","raw":"---\ntitle: 关于Hango网关中gportal和api-plane组件合并实施方案\ndate: 2023-03-12 00:01:00\ntags:\n  - Hango\n  - SCG\n  - 云原生网关\ncategories: Hango\n---\n# 组件合并实施方案\n## 背景\n网关为了降低部署成本，减少运维代价,现需要将gportal和api-plane的组件在部署的时候进行合并，精简部署的组件。以下将围绕实施方案以及需要考虑的相关问题进行展开。\n方案 不涉及到代码模块的合并，在K8s基座内部的服务模块合并方案不外乎两种，一是将portal和api-plane部署在pod的同一容器进程内，二是将portal和api-plane放在同一pod的不同容器中。\n但是第一种方案将两个服务放在同一个容器中既不符合Kubernetes的最佳实践，同时也存在诸多问题，诸如：\n* 它们的部署和管理变得更加复杂，对于不同的服务可能需要不同的配置和更新策略，这会增加容器的复杂度和维护成本。\n* 共享同一个资源池，这可能会导致它们之间的资源争用或者不均衡，难以对它们进行单独的扩展和调整。\n* 共享同一个进程空间和文件系统，缺乏隔离性，这可能会导致它们之间的冲突或干扰等等。\n  而将gportal和api-plane合并至同一pod的不同容器中可以最大复用原先各自服务的deploy里的配置内容，且不需要更改镜像的配置信息，可以较小工作量完成组件的聚合。\n  基于以上诸多原因我们采用第二种方案将gportal和api-plane合并至同一pod的不同容器中。\n## 相关问题\ngportal和api-plane合并至同一pod的不同容器中同时也需要考虑以下问题：\n* 资源占用增加\n  原先将其分开部署在不同的deploy中，我们可以按需控制gportal和api-plane各自的副本数，但现在两个服务的容器数量比为```1:1```，资源开销将有增加。\n* gportal和api-plane之间的通信问题：\n\n  1、api-plane的服务地址是存储在DB的hango_gateway表中，我们可以通过更改表数据来指定api-plane的服务地址。\n\n  2、同一pod的不同容器共享同一个进程空间和网络命名空间，这意味着它们将共享相同的主机名、IP地址和端口号。我们可以指定api-plane的服务地址为localhost进行调用。\n\n* 健康检查\n  我们在做组件合并的过程中会为各个容器服务配置健康检查， 当pod内所有容器的健康检查都成功时，才会将流量路由到Pod，这就要求gportal和api-plane服务必须同时可用。\n## 如何兼容多集群纳管\n现阶段网关是依靠于gportal调用不同环境乃至不同集群的api-plane地址实现多网关的纳管，每个api-plane的地址所指向的上游集群都享有同一份网关资源。\n![现阶段多网关纳管.png](..%2F..%2Fimg%2FfuncDesign%2F%E7%8E%B0%E9%98%B6%E6%AE%B5%E5%A4%9A%E7%BD%91%E5%85%B3%E7%BA%B3%E7%AE%A1.png)\n如将部署架构下api-plane和gportal合为同一个pod中，两者同处于管控集群，意味着原先多网关的纳管能力需要从gportal下沉到 api-plane服务中，由api-plane为共享同一份资源的计算集群进行分组。下面我们会以较多篇幅讨论多集群纳管的方案\n\n### 多集群纳管方案一：\n\n由前文我们了解到在新的部署架构中，gportal和api-plane同处于管控集群，我们需要将原先DB存储api-plane服务的地址指向改为 localhost，并且表并且gportal所有对于api-plane的调用都需要传递共享该资源的集群分组标识，由api-plane根据根据分组标识筛选出对应计算集群的信息对其资源进行操作。\n\n![多集群纳管方案一.png](..%2F..%2Fimg%2FfuncDesign%2F%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%BA%B3%E7%AE%A1%E6%96%B9%E6%A1%88%E4%B8%80.png)\napi-plane配置文件新增了对相同副本的集群进行了分组\n```yaml\nk8s:\n  groups:\n    - group : gateway1\n      clusters:\n        master:\n          k8s-api-server: \"\"\n          cert-data: \"\"\n          key-data: \"\"\n        slave1:\n          k8s-api-server: \"\"\n          cert-data: \"\"\n          key-data: \"\"\n        slave2:\n          k8s-api-server: \"\"\n          cert-data: \"\"\n          key-data: \"\"\n    - group : gateway2\n      clusters:\n        master:\n          k8s-api-server: \"\"\n          cert-data: \"\"\n          key-data: \"\"\n\n```\n\n\n需要改造内容\n\n1、api-plane服务deploy、ConfigMap 的yaml文件内容迁移至gportal的deploy containers节点下\n\n2、DB的```hango_gateway```表中，我们更改表数据来指定api-plane的服务地址为localhost。\n\n3、chart场景化抽象\n\n4、gportal对api-plane发送的请求都需要携带group信息\n\n5、api-plane的ConfigMap中配置多集群的api-server地址，服务读取ConfigMap初始化集群客户端，并根据group进行客户端缓存\n\n6、需要操作api-server时，从请求中获取group信息，再从缓存中根据group信息获取Kubernetes 客户端\n\n### 多集群纳管方案二：\n根据前文内容，若gportal和api-plane位于同一管控集群中，那么api-plane就需要承担管理多集群配置下发的责任，这将使得API-plane相关配置下发的实现变得更为复杂。但是，我们可以稍微思考一下，如果将gportal和api-plane都部署在计算集群中，也可以在保持现有部署架构的情况下实现多集群纳管。\n\n![多集群纳管方案二.png](..%2F..%2Fimg%2FfuncDesign%2F%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%BA%B3%E7%AE%A1%E6%96%B9%E6%A1%88%E4%BA%8C.png)\n### 多集群纳管方案三：\n以上都是改动比较大的改造，我们也可以不用走一刀切的策略。我们可以对不同场景的chart进行抽象。\n如果数据面和管控面都处于同一个集群下，那么我们可以考虑portal和api-plane组件在deploy中进行合并。\n\n![多集群纳管方案三-1.png](..%2F..%2Fimg%2FfuncDesign%2F%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%BA%B3%E7%AE%A1%E6%96%B9%E6%A1%88%E4%B8%89-1.png)\n如果数据面和管控面不在同一个集群下，多集群还是按照现在portal和api-plane组件分离的方式：\n\n![多集群纳管方案三-2.png](..%2F..%2Fimg%2FfuncDesign%2F%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%BA%B3%E7%AE%A1%E6%96%B9%E6%A1%88%E4%B8%89-2.png)\n## 后续长期规划\n尽管gportal和api-plane的服务职责不同，但它们都属于Java服务的体系都由网关团队进行开发，且api-plane仅被gportal服务所调用，现无论它们在同一pod还是分别拆分到计算管控集群，只要它们作为两个服务存在，就会造成资源损耗。因此，我们可以考虑将它们合并为同一个工程的不同模块，按职责划分模块间关系。下图为portal现有的功能模块，未来，可以将API-plane工程作为API-Server的职责模块迁移至portal工程中，这也是合理的。\n![组件代码合并.png](..%2F..%2Fimg%2FfuncDesign%2F%E7%BB%84%E4%BB%B6%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6.png)\n\n这样将两个相互调用的微服务合并为同一个工程的两个 model，会带来以下好处：\n* 减少通信成本：将原本需要通过网络通信的两个微服务合并到同一个工程中，可以减少网络通信的成本和延迟。\n* 简化部署操作：将两个微服务合并为同一个工程，可以简化部署操作，减少部署时间和错误。\n* 提高程序的可维护性：将两个微服务合并为同一个工程，可以减少代码的重复，降低维护成本。\n* api-server与DB之间可以通过事务保证资源数据的一致性\n\n在考虑将两个微服务合并为同一个工程时，api-plane所有的controller都将变成普通方法由portal进行调用，存在相当大的改造以及测试成本。\n![前端管控多集群.png](..%2F..%2Fimg%2FfuncDesign%2F%E5%89%8D%E7%AB%AF%E7%AE%A1%E6%8E%A7%E5%A4%9A%E9%9B%86%E7%BE%A4.png)\n\n## 结论\n综上为未来网关组件合并的探索，但现阶段标品如果按照以上的内容进行部署配置上的更改会给SRE带来很大的部署成本且原先的部署helm脚本会变得更复杂，因此我们前期先在开源版本进行组件的合并，后续在完成包括服务模块合并到portal服务中之后，我们再将helm脚本迁移到标品的版本。","slug":"FuncDesign/关于Hango网关中gportal和api-plane组件合并实施方案","published":1,"updated":"2024-01-25T11:47:57.040Z","_id":"clrt5e8oz000093yw8ip57hex","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"组件合并实施方案\"><a href=\"#组件合并实施方案\" class=\"headerlink\" title=\"组件合并实施方案\"></a>组件合并实施方案</h1><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>网关为了降低部署成本，减少运维代价,现需要将gportal和api-plane的组件在部署的时候进行合并，精简部署的组件。以下将围绕实施方案以及需要考虑的相关问题进行展开。<br>方案 不涉及到代码模块的合并，在K8s基座内部的服务模块合并方案不外乎两种，一是将portal和api-plane部署在pod的同一容器进程内，二是将portal和api-plane放在同一pod的不同容器中。<br>但是第一种方案将两个服务放在同一个容器中既不符合Kubernetes的最佳实践，同时也存在诸多问题，诸如：</p>\n<ul>\n<li><p>它们的部署和管理变得更加复杂，对于不同的服务可能需要不同的配置和更新策略，这会增加容器的复杂度和维护成本。</p>\n</li>\n<li><p>共享同一个资源池，这可能会导致它们之间的资源争用或者不均衡，难以对它们进行单独的扩展和调整。</p>\n</li>\n<li><p>共享同一个进程空间和文件系统，缺乏隔离性，这可能会导致它们之间的冲突或干扰等等。<br>而将gportal和api-plane合并至同一pod的不同容器中可以最大复用原先各自服务的deploy里的配置内容，且不需要更改镜像的配置信息，可以较小工作量完成组件的聚合。<br>基于以上诸多原因我们采用第二种方案将gportal和api-plane合并至同一pod的不同容器中。</p>\n<h2 id=\"相关问题\"><a href=\"#相关问题\" class=\"headerlink\" title=\"相关问题\"></a>相关问题</h2><p>gportal和api-plane合并至同一pod的不同容器中同时也需要考虑以下问题：</p>\n</li>\n<li><p>资源占用增加<br>原先将其分开部署在不同的deploy中，我们可以按需控制gportal和api-plane各自的副本数，但现在两个服务的容器数量比为<code>1:1</code>，资源开销将有增加。</p>\n</li>\n<li><p>gportal和api-plane之间的通信问题：</p>\n<p>1、api-plane的服务地址是存储在DB的hango_gateway表中，我们可以通过更改表数据来指定api-plane的服务地址。</p>\n<p>2、同一pod的不同容器共享同一个进程空间和网络命名空间，这意味着它们将共享相同的主机名、IP地址和端口号。我们可以指定api-plane的服务地址为localhost进行调用。</p>\n</li>\n<li><p>健康检查<br>我们在做组件合并的过程中会为各个容器服务配置健康检查， 当pod内所有容器的健康检查都成功时，才会将流量路由到Pod，这就要求gportal和api-plane服务必须同时可用。</p>\n<h2 id=\"如何兼容多集群纳管\"><a href=\"#如何兼容多集群纳管\" class=\"headerlink\" title=\"如何兼容多集群纳管\"></a>如何兼容多集群纳管</h2><p>现阶段网关是依靠于gportal调用不同环境乃至不同集群的api-plane地址实现多网关的纳管，每个api-plane的地址所指向的上游集群都享有同一份网关资源。<br><img src=\"/../../img/funcDesign/%E7%8E%B0%E9%98%B6%E6%AE%B5%E5%A4%9A%E7%BD%91%E5%85%B3%E7%BA%B3%E7%AE%A1.png\" alt=\"现阶段多网关纳管.png\"><br>如将部署架构下api-plane和gportal合为同一个pod中，两者同处于管控集群，意味着原先多网关的纳管能力需要从gportal下沉到 api-plane服务中，由api-plane为共享同一份资源的计算集群进行分组。下面我们会以较多篇幅讨论多集群纳管的方案</p>\n</li>\n</ul>\n<h3 id=\"多集群纳管方案一：\"><a href=\"#多集群纳管方案一：\" class=\"headerlink\" title=\"多集群纳管方案一：\"></a>多集群纳管方案一：</h3><p>由前文我们了解到在新的部署架构中，gportal和api-plane同处于管控集群，我们需要将原先DB存储api-plane服务的地址指向改为 localhost，并且表并且gportal所有对于api-plane的调用都需要传递共享该资源的集群分组标识，由api-plane根据根据分组标识筛选出对应计算集群的信息对其资源进行操作。</p>\n<p><img src=\"/../../img/funcDesign/%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%BA%B3%E7%AE%A1%E6%96%B9%E6%A1%88%E4%B8%80.png\" alt=\"多集群纳管方案一.png\"><br>api-plane配置文件新增了对相同副本的集群进行了分组</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">k8s</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">groups</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">group</span> <span class=\"token punctuation\">:</span> gateway1\n      <span class=\"token key atrule\">clusters</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">k8s-api-server</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n          <span class=\"token key atrule\">cert-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n          <span class=\"token key atrule\">key-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token key atrule\">slave1</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">k8s-api-server</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n          <span class=\"token key atrule\">cert-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n          <span class=\"token key atrule\">key-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token key atrule\">slave2</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">k8s-api-server</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n          <span class=\"token key atrule\">cert-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n          <span class=\"token key atrule\">key-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">group</span> <span class=\"token punctuation\">:</span> gateway2\n      <span class=\"token key atrule\">clusters</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">k8s-api-server</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n          <span class=\"token key atrule\">cert-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n          <span class=\"token key atrule\">key-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>需要改造内容</p>\n<p>1、api-plane服务deploy、ConfigMap 的yaml文件内容迁移至gportal的deploy containers节点下</p>\n<p>2、DB的<code>hango_gateway</code>表中，我们更改表数据来指定api-plane的服务地址为localhost。</p>\n<p>3、chart场景化抽象</p>\n<p>4、gportal对api-plane发送的请求都需要携带group信息</p>\n<p>5、api-plane的ConfigMap中配置多集群的api-server地址，服务读取ConfigMap初始化集群客户端，并根据group进行客户端缓存</p>\n<p>6、需要操作api-server时，从请求中获取group信息，再从缓存中根据group信息获取Kubernetes 客户端</p>\n<h3 id=\"多集群纳管方案二：\"><a href=\"#多集群纳管方案二：\" class=\"headerlink\" title=\"多集群纳管方案二：\"></a>多集群纳管方案二：</h3><p>根据前文内容，若gportal和api-plane位于同一管控集群中，那么api-plane就需要承担管理多集群配置下发的责任，这将使得API-plane相关配置下发的实现变得更为复杂。但是，我们可以稍微思考一下，如果将gportal和api-plane都部署在计算集群中，也可以在保持现有部署架构的情况下实现多集群纳管。</p>\n<p><img src=\"/../../img/funcDesign/%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%BA%B3%E7%AE%A1%E6%96%B9%E6%A1%88%E4%BA%8C.png\" alt=\"多集群纳管方案二.png\"></p>\n<h3 id=\"多集群纳管方案三：\"><a href=\"#多集群纳管方案三：\" class=\"headerlink\" title=\"多集群纳管方案三：\"></a>多集群纳管方案三：</h3><p>以上都是改动比较大的改造，我们也可以不用走一刀切的策略。我们可以对不同场景的chart进行抽象。<br>如果数据面和管控面都处于同一个集群下，那么我们可以考虑portal和api-plane组件在deploy中进行合并。</p>\n<p><img src=\"/../../img/funcDesign/%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%BA%B3%E7%AE%A1%E6%96%B9%E6%A1%88%E4%B8%89-1.png\" alt=\"多集群纳管方案三-1.png\"><br>如果数据面和管控面不在同一个集群下，多集群还是按照现在portal和api-plane组件分离的方式：</p>\n<p><img src=\"/../../img/funcDesign/%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%BA%B3%E7%AE%A1%E6%96%B9%E6%A1%88%E4%B8%89-2.png\" alt=\"多集群纳管方案三-2.png\"></p>\n<h2 id=\"后续长期规划\"><a href=\"#后续长期规划\" class=\"headerlink\" title=\"后续长期规划\"></a>后续长期规划</h2><p>尽管gportal和api-plane的服务职责不同，但它们都属于Java服务的体系都由网关团队进行开发，且api-plane仅被gportal服务所调用，现无论它们在同一pod还是分别拆分到计算管控集群，只要它们作为两个服务存在，就会造成资源损耗。因此，我们可以考虑将它们合并为同一个工程的不同模块，按职责划分模块间关系。下图为portal现有的功能模块，未来，可以将API-plane工程作为API-Server的职责模块迁移至portal工程中，这也是合理的。<br><img src=\"/../../img/funcDesign/%E7%BB%84%E4%BB%B6%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6.png\" alt=\"组件代码合并.png\"></p>\n<p>这样将两个相互调用的微服务合并为同一个工程的两个 model，会带来以下好处：</p>\n<ul>\n<li>减少通信成本：将原本需要通过网络通信的两个微服务合并到同一个工程中，可以减少网络通信的成本和延迟。</li>\n<li>简化部署操作：将两个微服务合并为同一个工程，可以简化部署操作，减少部署时间和错误。</li>\n<li>提高程序的可维护性：将两个微服务合并为同一个工程，可以减少代码的重复，降低维护成本。</li>\n<li>api-server与DB之间可以通过事务保证资源数据的一致性</li>\n</ul>\n<p>在考虑将两个微服务合并为同一个工程时，api-plane所有的controller都将变成普通方法由portal进行调用，存在相当大的改造以及测试成本。<br><img src=\"/../../img/funcDesign/%E5%89%8D%E7%AB%AF%E7%AE%A1%E6%8E%A7%E5%A4%9A%E9%9B%86%E7%BE%A4.png\" alt=\"前端管控多集群.png\"></p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>综上为未来网关组件合并的探索，但现阶段标品如果按照以上的内容进行部署配置上的更改会给SRE带来很大的部署成本且原先的部署helm脚本会变得更复杂，因此我们前期先在开源版本进行组件的合并，后续在完成包括服务模块合并到portal服务中之后，我们再将helm脚本迁移到标品的版本。</p>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h1 id=\"组件合并实施方案\"><a href=\"#组件合并实施方案\" class=\"headerlink\" title=\"组件合并实施方案\"></a>组件合并实施方案</h1><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>网关为了降低部署成本，减少运维代价,现需要将gportal和api-plane的组件在部署的时候进行合并，精简部署的组件。以下将围绕实施方案以及需要考虑的相关问题进行展开。<br>方案 不涉及到代码模块的合并，在K8s基座内部的服务模块合并方案不外乎两种，一是将portal和api-plane部署在pod的同一容器进程内，二是将portal和api-plane放在同一pod的不同容器中。<br>但是第一种方案将两个服务放在同一个容器中既不符合Kubernetes的最佳实践，同时也存在诸多问题，诸如：</p>\n<ul>\n<li><p>它们的部署和管理变得更加复杂，对于不同的服务可能需要不同的配置和更新策略，这会增加容器的复杂度和维护成本。</p>\n</li>\n<li><p>共享同一个资源池，这可能会导致它们之间的资源争用或者不均衡，难以对它们进行单独的扩展和调整。</p>\n</li>\n<li><p>共享同一个进程空间和文件系统，缺乏隔离性，这可能会导致它们之间的冲突或干扰等等。<br>而将gportal和api-plane合并至同一pod的不同容器中可以最大复用原先各自服务的deploy里的配置内容，且不需要更改镜像的配置信息，可以较小工作量完成组件的聚合。<br>基于以上诸多原因我们采用第二种方案将gportal和api-plane合并至同一pod的不同容器中。</p>\n<h2 id=\"相关问题\"><a href=\"#相关问题\" class=\"headerlink\" title=\"相关问题\"></a>相关问题</h2><p>gportal和api-plane合并至同一pod的不同容器中同时也需要考虑以下问题：</p>\n</li>\n<li><p>资源占用增加<br>原先将其分开部署在不同的deploy中，我们可以按需控制gportal和api-plane各自的副本数，但现在两个服务的容器数量比为<code>1:1</code>，资源开销将有增加。</p>\n</li>\n<li><p>gportal和api-plane之间的通信问题：</p>\n<p>1、api-plane的服务地址是存储在DB的hango_gateway表中，我们可以通过更改表数据来指定api-plane的服务地址。</p>\n<p>2、同一pod的不同容器共享同一个进程空间和网络命名空间，这意味着它们将共享相同的主机名、IP地址和端口号。我们可以指定api-plane的服务地址为localhost进行调用。</p>\n</li>\n<li><p>健康检查<br>我们在做组件合并的过程中会为各个容器服务配置健康检查， 当pod内所有容器的健康检查都成功时，才会将流量路由到Pod，这就要求gportal和api-plane服务必须同时可用。</p>\n<h2 id=\"如何兼容多集群纳管\"><a href=\"#如何兼容多集群纳管\" class=\"headerlink\" title=\"如何兼容多集群纳管\"></a>如何兼容多集群纳管</h2><p>现阶段网关是依靠于gportal调用不同环境乃至不同集群的api-plane地址实现多网关的纳管，每个api-plane的地址所指向的上游集群都享有同一份网关资源。<br><img src=\"/../../img/funcDesign/%E7%8E%B0%E9%98%B6%E6%AE%B5%E5%A4%9A%E7%BD%91%E5%85%B3%E7%BA%B3%E7%AE%A1.png\" alt=\"现阶段多网关纳管.png\"><br>如将部署架构下api-plane和gportal合为同一个pod中，两者同处于管控集群，意味着原先多网关的纳管能力需要从gportal下沉到 api-plane服务中，由api-plane为共享同一份资源的计算集群进行分组。下面我们会以较多篇幅讨论多集群纳管的方案</p>\n</li>\n</ul>\n<h3 id=\"多集群纳管方案一：\"><a href=\"#多集群纳管方案一：\" class=\"headerlink\" title=\"多集群纳管方案一：\"></a>多集群纳管方案一：</h3><p>由前文我们了解到在新的部署架构中，gportal和api-plane同处于管控集群，我们需要将原先DB存储api-plane服务的地址指向改为 localhost，并且表并且gportal所有对于api-plane的调用都需要传递共享该资源的集群分组标识，由api-plane根据根据分组标识筛选出对应计算集群的信息对其资源进行操作。</p>\n<p><img src=\"/../../img/funcDesign/%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%BA%B3%E7%AE%A1%E6%96%B9%E6%A1%88%E4%B8%80.png\" alt=\"多集群纳管方案一.png\"><br>api-plane配置文件新增了对相同副本的集群进行了分组</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">k8s</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">groups</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">group</span> <span class=\"token punctuation\">:</span> gateway1\n      <span class=\"token key atrule\">clusters</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">k8s-api-server</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n          <span class=\"token key atrule\">cert-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n          <span class=\"token key atrule\">key-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token key atrule\">slave1</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">k8s-api-server</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n          <span class=\"token key atrule\">cert-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n          <span class=\"token key atrule\">key-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token key atrule\">slave2</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">k8s-api-server</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n          <span class=\"token key atrule\">cert-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n          <span class=\"token key atrule\">key-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">group</span> <span class=\"token punctuation\">:</span> gateway2\n      <span class=\"token key atrule\">clusters</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">k8s-api-server</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n          <span class=\"token key atrule\">cert-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n          <span class=\"token key atrule\">key-data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>需要改造内容</p>\n<p>1、api-plane服务deploy、ConfigMap 的yaml文件内容迁移至gportal的deploy containers节点下</p>\n<p>2、DB的<code>hango_gateway</code>表中，我们更改表数据来指定api-plane的服务地址为localhost。</p>\n<p>3、chart场景化抽象</p>\n<p>4、gportal对api-plane发送的请求都需要携带group信息</p>\n<p>5、api-plane的ConfigMap中配置多集群的api-server地址，服务读取ConfigMap初始化集群客户端，并根据group进行客户端缓存</p>\n<p>6、需要操作api-server时，从请求中获取group信息，再从缓存中根据group信息获取Kubernetes 客户端</p>\n<h3 id=\"多集群纳管方案二：\"><a href=\"#多集群纳管方案二：\" class=\"headerlink\" title=\"多集群纳管方案二：\"></a>多集群纳管方案二：</h3><p>根据前文内容，若gportal和api-plane位于同一管控集群中，那么api-plane就需要承担管理多集群配置下发的责任，这将使得API-plane相关配置下发的实现变得更为复杂。但是，我们可以稍微思考一下，如果将gportal和api-plane都部署在计算集群中，也可以在保持现有部署架构的情况下实现多集群纳管。</p>\n<p><img src=\"/../../img/funcDesign/%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%BA%B3%E7%AE%A1%E6%96%B9%E6%A1%88%E4%BA%8C.png\" alt=\"多集群纳管方案二.png\"></p>\n<h3 id=\"多集群纳管方案三：\"><a href=\"#多集群纳管方案三：\" class=\"headerlink\" title=\"多集群纳管方案三：\"></a>多集群纳管方案三：</h3><p>以上都是改动比较大的改造，我们也可以不用走一刀切的策略。我们可以对不同场景的chart进行抽象。<br>如果数据面和管控面都处于同一个集群下，那么我们可以考虑portal和api-plane组件在deploy中进行合并。</p>\n<p><img src=\"/../../img/funcDesign/%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%BA%B3%E7%AE%A1%E6%96%B9%E6%A1%88%E4%B8%89-1.png\" alt=\"多集群纳管方案三-1.png\"><br>如果数据面和管控面不在同一个集群下，多集群还是按照现在portal和api-plane组件分离的方式：</p>\n<p><img src=\"/../../img/funcDesign/%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%BA%B3%E7%AE%A1%E6%96%B9%E6%A1%88%E4%B8%89-2.png\" alt=\"多集群纳管方案三-2.png\"></p>\n<h2 id=\"后续长期规划\"><a href=\"#后续长期规划\" class=\"headerlink\" title=\"后续长期规划\"></a>后续长期规划</h2><p>尽管gportal和api-plane的服务职责不同，但它们都属于Java服务的体系都由网关团队进行开发，且api-plane仅被gportal服务所调用，现无论它们在同一pod还是分别拆分到计算管控集群，只要它们作为两个服务存在，就会造成资源损耗。因此，我们可以考虑将它们合并为同一个工程的不同模块，按职责划分模块间关系。下图为portal现有的功能模块，未来，可以将API-plane工程作为API-Server的职责模块迁移至portal工程中，这也是合理的。<br><img src=\"/../../img/funcDesign/%E7%BB%84%E4%BB%B6%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6.png\" alt=\"组件代码合并.png\"></p>\n<p>这样将两个相互调用的微服务合并为同一个工程的两个 model，会带来以下好处：</p>\n<ul>\n<li>减少通信成本：将原本需要通过网络通信的两个微服务合并到同一个工程中，可以减少网络通信的成本和延迟。</li>\n<li>简化部署操作：将两个微服务合并为同一个工程，可以简化部署操作，减少部署时间和错误。</li>\n<li>提高程序的可维护性：将两个微服务合并为同一个工程，可以减少代码的重复，降低维护成本。</li>\n<li>api-server与DB之间可以通过事务保证资源数据的一致性</li>\n</ul>\n<p>在考虑将两个微服务合并为同一个工程时，api-plane所有的controller都将变成普通方法由portal进行调用，存在相当大的改造以及测试成本。<br><img src=\"/../../img/funcDesign/%E5%89%8D%E7%AB%AF%E7%AE%A1%E6%8E%A7%E5%A4%9A%E9%9B%86%E7%BE%A4.png\" alt=\"前端管控多集群.png\"></p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>综上为未来网关组件合并的探索，但现阶段标品如果按照以上的内容进行部署配置上的更改会给SRE带来很大的部署成本且原先的部署helm脚本会变得更复杂，因此我们前期先在开源版本进行组件的合并，后续在完成包括服务模块合并到portal服务中之后，我们再将helm脚本迁移到标品的版本。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clrhllnh4000ds0ywbg9mdrs1","category_id":"clrc9ud0p000iq3ywf9sjasen","_id":"clrhllnh5000fs0ywfeame4kf"},{"post_id":"clrhllt84000gs0yw2bg9gxgl","category_id":"clrc9ud0p000iq3ywf9sjasen","_id":"clrhllt85000is0yw2kr7g2ij"},{"post_id":"clrhllxh4000js0ywdixk3a0g","category_id":"clrc9ud0p000iq3ywf9sjasen","_id":"clrhllxh5000ls0yw5es0fg4a"},{"post_id":"clrhlmwlk0000qzyw5yne8s08","category_id":"clrc9ud0p000iq3ywf9sjasen","_id":"clrhlmwll0002qzywboamdy7b"},{"post_id":"clrhlncqy0003qzyw8uh72s3d","category_id":"clrc9ud0p000iq3ywf9sjasen","_id":"clrhlncqz0005qzywgbos92fv"},{"post_id":"clrhlnh170006qzywgvs119dl","category_id":"clrc9ud0m0004q3yw5fh7cpzd","_id":"clrhlnh180008qzyw7xita153"},{"post_id":"clrhm9e7t0009qzyw32r504ju","category_id":"clrc9ud0t0017q3ywcwky1nzv","_id":"clrhm9e7u000bqzywgfxq7k2s"},{"post_id":"clrhmaemu000dqzyweqwi7v2o","category_id":"clrc9ud0p000cq3ywf1cqg41g","_id":"clrhmaemu000fqzywb8h6c7gy"},{"post_id":"clrhmasvz000hqzyw0dgj8oa1","category_id":"clrhkwyeq0000s0ywexsf5tbi","_id":"clrhmasw0000kqzywe3yq2csq"},{"post_id":"clrhmb95u000qqzyw1mztcx49","category_id":"clrc9ud0p000iq3ywf9sjasen","_id":"clrhmb95v000sqzywc8g36l24"},{"post_id":"clrhmb272000oqzyweuyxgwkt","category_id":"clrilh6820000jlywbxdb8634","_id":"clrilh6830003jlywczhpd7rt"},{"post_id":"clrhmb5ls000pqzyw0opb2ow4","category_id":"clriw970g0007jlyw1odu9dh5","_id":"clriw970h000ajlywe93u4gfx"},{"post_id":"clrhm9ub2000cqzyw61jwax3j","category_id":"clronaywv0000bwyw1xwcdknw","_id":"clronaywx0003bwywdtk9a5x5"},{"post_id":"clrhmbdoo000tqzywh692484i","category_id":"clrilh6820000jlywbxdb8634","_id":"clrrj5ww10007bwywe9x96ook"},{"post_id":"clrhmbdov000wqzywhuh38epk","category_id":"clrilh6820000jlywbxdb8634","_id":"clrrjbdm7000bbwyw5y9ygh5x"},{"post_id":"clrt5e8oz000093yw8ip57hex","category_id":"clrt5e8p1000193ywfqas1gyf","_id":"clrt5e8p3000593ywcu6lcyp8"},{"post_id":"clrhmalos000gqzywb6zveo7g","category_id":"clrilh6820000jlywbxdb8634","_id":"clrt5wdch0003xjyw4anp0ssj"},{"post_id":"clrhmbdop000vqzyw7e2ecu23","category_id":"clrilh6820000jlywbxdb8634","_id":"clrt5wdch0004xjyw2yiebk28"},{"post_id":"clrhmaz1d000nqzyw3w5s60y7","category_id":"clrc9ud0p000cq3ywf1cqg41g","_id":"clrt5wdch0006xjywd4xq21yh"},{"post_id":"clrhmavyn000mqzyw8hhp9ahd","category_id":"clrilh6820000jlywbxdb8634","_id":"clrt5wdck000gxjyw322ch9cx"},{"post_id":"clrhmbdoo000uqzywfl0zd1p8","category_id":"clrilh6820000jlywbxdb8634","_id":"clrt5wdck000ixjyw86362bhe"}],"PostTag":[{"post_id":"clrhllnh4000ds0ywbg9mdrs1","tag_id":"clrc9ud0p000jq3ywa61vcquk","_id":"clrhllnh5000es0yw4xigdifw"},{"post_id":"clrhllt84000gs0yw2bg9gxgl","tag_id":"clrc9ud0p000jq3ywa61vcquk","_id":"clrhllt85000hs0yw3x5y4j5k"},{"post_id":"clrhllxh4000js0ywdixk3a0g","tag_id":"clrc9ud0p000jq3ywa61vcquk","_id":"clrhllxh5000ks0ywczn292sq"},{"post_id":"clrhlmwlk0000qzyw5yne8s08","tag_id":"clrc9ud0p000jq3ywa61vcquk","_id":"clrhlmwll0001qzyw8jhd0e7j"},{"post_id":"clrhlncqy0003qzyw8uh72s3d","tag_id":"clrc9ud0p000jq3ywa61vcquk","_id":"clrhlncqz0004qzywbopv4hzv"},{"post_id":"clrhlnh170006qzywgvs119dl","tag_id":"clrc9ud0n0005q3yw6jh6gtq1","_id":"clrhlnh180007qzyw3ur6a4ak"},{"post_id":"clrhm9e7t0009qzyw32r504ju","tag_id":"clrc9ud0t0018q3ywb17ibs5r","_id":"clrhm9e7u000aqzywh3sb5f8w"},{"post_id":"clrhmaemu000dqzyweqwi7v2o","tag_id":"clrc9ud0p000dq3ywb2vz89cf","_id":"clrhmaemu000eqzyw191zecqm"},{"post_id":"clrhmasvz000hqzyw0dgj8oa1","tag_id":"clrhfggn90001i0yw1vx6b7a8","_id":"clrhmasw0000iqzyw4zvhf351"},{"post_id":"clrhmasvz000hqzyw0dgj8oa1","tag_id":"clrhfggna0003i0ywaa623cz9","_id":"clrhmasw0000jqzywdkd2hoa9"},{"post_id":"clrhmasvz000hqzyw0dgj8oa1","tag_id":"clrhfggna0004i0yw7lzj3h82","_id":"clrhmasw0000lqzywe2l99oy9"},{"post_id":"clrhmb95u000qqzyw1mztcx49","tag_id":"clrc9ud0p000jq3ywa61vcquk","_id":"clrhmb95v000rqzywhzg1ffbw"},{"post_id":"clrhmb272000oqzyweuyxgwkt","tag_id":"clrilh6830001jlyw16kr1goo","_id":"clrilh6830004jlyw2hmv3n7p"},{"post_id":"clrhmb272000oqzyweuyxgwkt","tag_id":"clrilh6830002jlyw3f7ygeh1","_id":"clrilh6830005jlyw1l147suv"},{"post_id":"clrhmb272000oqzyweuyxgwkt","tag_id":"clrhfggna0004i0yw7lzj3h82","_id":"clrilh6830006jlywahlb0sj2"},{"post_id":"clrhmb5ls000pqzyw0opb2ow4","tag_id":"clriw970g0008jlyw05nj0uuv","_id":"clriw970h0009jlywd8i1c06y"},{"post_id":"clrhm9ub2000cqzyw61jwax3j","tag_id":"clronayww0001bwywagq3fxe4","_id":"clronaywx0004bwywel5f68f8"},{"post_id":"clrhm9ub2000cqzyw61jwax3j","tag_id":"clronaywx0002bwyw31b77ji2","_id":"clronaywy0005bwyw1fboeiy4"},{"post_id":"clrhmbdoo000tqzywh692484i","tag_id":"clrhfggna0004i0yw7lzj3h82","_id":"clrrj5ww20008bwyw4o35gjj8"},{"post_id":"clrhmbdoo000tqzywh692484i","tag_id":"clrrj5ww10006bwywfeqx4btb","_id":"clrrj5ww20009bwywdkitbbi1"},{"post_id":"clrhmbdov000wqzywhuh38epk","tag_id":"clrilh6830001jlyw16kr1goo","_id":"clrrjbdm7000cbwyw8cfo3xle"},{"post_id":"clrhmbdov000wqzywhuh38epk","tag_id":"clrrjbdm7000abwyw0sfk55wr","_id":"clrrjbdm7000dbwywbadf85c1"},{"post_id":"clrhmbdov000wqzywhuh38epk","tag_id":"clrhfggna0004i0yw7lzj3h82","_id":"clrrjbdm7000ebwywcgbm3xr9"},{"post_id":"clrt5e8oz000093yw8ip57hex","tag_id":"clrt5e8p3000293ywc1vhboe7","_id":"clrt5e8p3000393yw848fbkke"},{"post_id":"clrt5e8oz000093yw8ip57hex","tag_id":"clrhfggna0003i0ywaa623cz9","_id":"clrt5e8p3000493yw05mb1ce9"},{"post_id":"clrt5e8oz000093yw8ip57hex","tag_id":"clrhfggna0004i0yw7lzj3h82","_id":"clrt5e8p3000693yw1qf5hh2i"},{"post_id":"clrhmalos000gqzywb6zveo7g","tag_id":"clrhfggn90001i0yw1vx6b7a8","_id":"clrt5wdcd0000xjywhz4kcqxp"},{"post_id":"clrhmalos000gqzywb6zveo7g","tag_id":"clrhfggna0004i0yw7lzj3h82","_id":"clrt5wdcg0002xjyw15srdvpk"},{"post_id":"clrhmbdop000vqzyw7e2ecu23","tag_id":"clrilh6830001jlyw16kr1goo","_id":"clrt5wdch0007xjywcmvq6hhs"},{"post_id":"clrhmbdop000vqzyw7e2ecu23","tag_id":"clrhfggna0004i0yw7lzj3h82","_id":"clrt5wdch0008xjywdof18dod"},{"post_id":"clrhmbdop000vqzyw7e2ecu23","tag_id":"clrt5wdce0001xjywayjl60z6","_id":"clrt5wdch000axjyw1ltr4o58"},{"post_id":"clrhmaz1d000nqzyw3w5s60y7","tag_id":"clrt5wdch0005xjyw54fc725f","_id":"clrt5wdch000bxjyw23r42pex"},{"post_id":"clrhmaz1d000nqzyw3w5s60y7","tag_id":"clrt5wdch0009xjyw0qi289a8","_id":"clrt5wdch000cxjywhus9113n"},{"post_id":"clrhmaz1d000nqzyw3w5s60y7","tag_id":"clrc9ud0p000dq3ywb2vz89cf","_id":"clrt5wdch000dxjywbcy9159a"},{"post_id":"clrhmavyn000mqzyw8hhp9ahd","tag_id":"clrilh6830001jlyw16kr1goo","_id":"clrt5wdck000exjywfgjbcd94"},{"post_id":"clrhmavyn000mqzyw8hhp9ahd","tag_id":"clrt5e8p3000293ywc1vhboe7","_id":"clrt5wdck000fxjyw6s38f2dv"},{"post_id":"clrhmavyn000mqzyw8hhp9ahd","tag_id":"clrhfggna0004i0yw7lzj3h82","_id":"clrt5wdck000hxjywg9zk6f5h"},{"post_id":"clrhmbdoo000uqzywfl0zd1p8","tag_id":"clrhfggn90001i0yw1vx6b7a8","_id":"clrt5wdck000jxjywgto62pr2"},{"post_id":"clrhmbdoo000uqzywfl0zd1p8","tag_id":"clrt5wdce0001xjywayjl60z6","_id":"clrt5wdck000kxjywf7iybc3m"},{"post_id":"clrhmbdoo000uqzywfl0zd1p8","tag_id":"clrhfggna0004i0yw7lzj3h82","_id":"clrt5wdck000lxjyweahn67jh"}],"Tag":[{"name":"kafka","_id":"clrc9ud0n0005q3yw6jh6gtq1"},{"name":"Kubernetes","_id":"clrc9ud0p000dq3ywb2vz89cf"},{"name":"Netty","_id":"clrc9ud0p000jq3ywa61vcquk"},{"name":"ServiceMesh","_id":"clrc9ud0t0018q3ywb17ibs5r"},{"name":"SpringCloudGateway","_id":"clrhfggn90001i0yw1vx6b7a8"},{"name":"SCG","_id":"clrhfggna0003i0ywaa623cz9"},{"name":"云原生网关","_id":"clrhfggna0004i0yw7lzj3h82"},{"name":"Envoy","_id":"clrilh6830001jlyw16kr1goo"},{"name":"网易","_id":"clrilh6830002jlyw3f7ygeh1"},{"name":"分布式事务","_id":"clriw970g0008jlyw05nj0uuv"},{"name":"2023","_id":"clronayww0001bwywagq3fxe4"},{"name":"回顾总结","_id":"clronaywx0002bwyw31b77ji2"},{"name":"两地三中心","_id":"clrrj5ww10006bwywfeqx4btb"},{"name":"金融","_id":"clrrjbdm7000abwyw0sfk55wr"},{"name":"Hango","_id":"clrt5e8p3000293ywc1vhboe7"},{"name":"可观测性","_id":"clrt5wdce0001xjywayjl60z6"},{"name":"Jmeter","_id":"clrt5wdch0005xjyw54fc725f"},{"name":"Operator","_id":"clrt5wdch0009xjyw0qi289a8"}]}}