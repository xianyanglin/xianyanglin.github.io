{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/books/source/JAVA核心面试知识整理.pdf","path":"books/source/JAVA核心面试知识整理.pdf","modified":0,"renderable":0},{"_id":"source/books/source/石杉的架构笔记[第二版]最新版本.pdf","path":"books/source/石杉的架构笔记[第二版]最新版本.pdf","modified":0,"renderable":0},{"_id":"source/books/source/面经--倾听潮汐.pdf","path":"books/source/面经--倾听潮汐.pdf","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/dark.css","path":"css/dark.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","path":"css/gallery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/indexcover.css","path":"css/indexcover.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/post.css","path":"css/post.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/reward.css","path":"css/reward.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/01.jpg","path":"medias/01.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/02.jpg","path":"medias/02.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/03.jpg","path":"medias/03.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpeg","path":"medias/avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.png","path":"medias/avatar.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","path":"libs/others/star.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","path":"libs/prism/prism.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","path":"libs/prism/prism.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","path":"libs/typed/typed.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","path":"libs/waline/Waline.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.png","path":"medias/banner/2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.png","path":"medias/banner/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.png","path":"medias/banner/3.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.png","path":"medias/banner/0.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.png","path":"medias/banner/4.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.png","path":"medias/banner/6.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.png","path":"medias/banner/5.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/3.png","path":"medias/barrager/3.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/5.png","path":"medias/barrager/5.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/4.png","path":"medias/barrager/4.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/6.png","path":"medias/barrager/6.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","path":"libs/awesome/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","path":"libs/awesome/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705067855751},{"_id":"source/404/index.md","hash":"9f0ce316b179b836232dc8238d8ae93b2d873f58","modified":1705067855751},{"_id":"source/baidu_verify_code-XTYqJDa5zw.html","hash":"a37fb39eeba774cda84617571be51ced07bd3ad3","modified":1705067855760},{"_id":"source/_data/friends.json","hash":"e1f8b761ff2abc2899b04dd34652cb41d21a9b54","modified":1705067855752},{"_id":"source/_data/musics.json","hash":"60f9306aa0431fe8a210daf8c0f0bab8ef5f4d23","modified":1705067855752},{"_id":"source/_posts/Kafka核心技术.md","hash":"610ac6d8e7fea0ec20f5e60e7884ade383ffd160","modified":1705067855753},{"_id":"source/_posts/netty三种IO的支持.md","hash":"26cc9e859572161129ee9a5a021ad424d525870c","modified":1705067855754},{"_id":"source/_posts/Kubernetes的设计解读.md","hash":"cfee3d8d3b835bba2c8d0c1d77885f3770ead121","modified":1705067855753},{"_id":"source/_posts/TCP粘包:半包 Netty全搞定.md","hash":"22712c1ddf18ce31e0620dcbf1809c65971c9500","modified":1705067855753},{"_id":"source/_posts/netty如何支持三种Reactor.md","hash":"0f6f593a3a96d14caf6cc8d5f35489b8c0550ad5","modified":1705067855754},{"_id":"source/_posts/netty如何玩转内存使用.md","hash":"8c34619d3c1f15a872f50f30b91beb70dae5e674","modified":1705067855757},{"_id":"source/_posts/常用的二次编解码方式.md","hash":"e9c758374a15e81a19d04b73ae598f99b0a0c3df","modified":1705067855758},{"_id":"source/_posts/编写网络应用程序基本步骤.md","hash":"a01c77845517041dc38cc9d1f9bf605deed07b9a","modified":1705067855760},{"_id":"source/books/.DS_Store","hash":"9ba35d6e843f1574eed6412031d600f4c873f77c","modified":1705067855837},{"_id":"source/about/index.md","hash":"03b3af02c1007fffd518e83909e1f1e9551afc78","modified":1705067855760},{"_id":"source/books/index.md","hash":"1e788e258d4da68dec52e3b529646fd11b6f29de","modified":1705159643912},{"_id":"source/_posts/服务网格.md","hash":"d01034e7aed33c262aa5aa4a603b002a20cf1e28","modified":1705067855759},{"_id":"source/bb/index.md","hash":"d81d1d270262366eda6b582f5aa990eeda3e0307","modified":1705067855760},{"_id":"source/categories/index.md","hash":"58184905c582565660f5a1dfae8e9f0bc46e9b3f","modified":1705067855761},{"_id":"source/contact/index.md","hash":"25711ed11b77596e741222ff00384ddd2bc4da1e","modified":1705067855761},{"_id":"source/galleries/index.md","hash":"8524b973ea8a470ac59c945dd50a2df5d1e14d65","modified":1705067855762},{"_id":"source/movies/index.md","hash":"8d3eb8e04139ff9f58776ec20da5d5bf68257392","modified":1705067855762},{"_id":"source/friends/index.md","hash":"4966c6edceb1aed355752ace28a6112feb65bc8d","modified":1705067855761},{"_id":"source/musics/index.md","hash":"f64b2da3507d4a942ad9ef664704b32103e94008","modified":1705067855763},{"_id":"source/tags/index.md","hash":"923c5b4add7c1a5e356bef64b9cecd8b4825fddb","modified":1705157362491},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1705047215610},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1705047215610},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1705047215610},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"2ed57824573d7bed71e56023ed92500734a8886d","modified":1705047215612},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"497c6645c55dce9f190ec7625de76083262e1707","modified":1705047215611},{"_id":"themes/hexo-theme-matery/README.md","hash":"9d98fe84a60bd6b222740f238d83f0999eaa77a3","modified":1705047215611},{"_id":"themes/hexo-theme-matery/languages/jp.yml","hash":"a811cec0b6d91f405e8c7386a57039cd8c3448bb","modified":1705047215613},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a2695fdb7579a77daec7773a9bb8e71b9edbf16b","modified":1705047215613},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"b1fc0c727253579ef3a7a19216650c570a1e22d1","modified":1705158457525},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1705047215613},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"36f8d3e530e8144bf80d0772284edd9b0da362fe","modified":1705047215613},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1705047215628},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1705047215628},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1705047215628},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1705047215628},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1705047215628},{"_id":"themes/hexo-theme-matery/layout/galleries.ejs","hash":"85b8b9e583ffa7a4ee6d0c2be4779cb2f7d91777","modified":1705047215629},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"534511d9f38f281b531e24c19d9c1526cc7e5e27","modified":1705047215629},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"71ef2540fa586cd0c3b1f216f59fa9ec85fc6a38","modified":1705047215628},{"_id":"themes/hexo-theme-matery/layout/gallery.ejs","hash":"fcc7364b03329148ba4920cddb0d34d5b7410788","modified":1705047215629},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"1656c2db90e24a360282d15c71144b4f14edb43d","modified":1705047215629},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"94c2fee85418370ca8f7d54050c852267e924eb7","modified":1705047215629},{"_id":"themes/hexo-theme-matery/layout/musics.ejs","hash":"9ac6053e09ed2c8a844d7e93c3fdce4ded95248a","modified":1705047215629},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1705047215632},{"_id":"themes/hexo-theme-matery/scripts/tags/note.js","hash":"84b0122b92342834540f69b19600cb54c50ab69e","modified":1705047215630},{"_id":"themes/hexo-theme-matery/layout/movies.ejs","hash":"abce85ffdd99e787e3652fbd466447e032b626bd","modified":1705047215629},{"_id":"themes/hexo-theme-matery/scripts/tags/index.js","hash":"223a31ea3aa4a689d45a033c7d680cb4fff8d8af","modified":1705047215630},{"_id":"themes/hexo-theme-matery/scripts/tags/button.js","hash":"ab02fb2da648f4f7afa0c2381aaca334bdeb54e6","modified":1705047215630},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3d4f40121dbb75bcb71837c35ec5ee17cdffae31","modified":1705047215630},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1705047215630},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1705047215625},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1705047215625},{"_id":"themes/hexo-theme-matery/layout/_widget/day-night.ejs","hash":"ff21dd5e49e1fc9a9ab8c7d164fd4b32a8265ea2","modified":1705047215626},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1705047215630},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1705047215625},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1705047215626},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"bb25a6fa51eb5ebfba687b2cbadff6c7a4b4bfef","modified":1705047215626},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1705047215626},{"_id":"themes/hexo-theme-matery/layout/_widget/musics.ejs","hash":"bfebdf0731fee0cd4fd51efa0da1d0184565ae25","modified":1705047215626},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1705047215626},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1705047215626},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1705047215627},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1705047215627},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1705047215627},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1705047215628},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1705047215627},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1705047215627},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"12350c0d366141b5c27792bb414d4adc303b0a9f","modified":1705047215614},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1705047215614},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1705047215614},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1705047215614},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1705047215615},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1705047215615},{"_id":"themes/hexo-theme-matery/layout/_partial/codeblock.ejs","hash":"086a06863a0f88888707409936aa06a09ff50e3a","modified":1705047215615},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"6c68e36686519ad4a3841f6380338b1d0bd63bf9","modified":1705072541840},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1705047215615},{"_id":"themes/hexo-theme-matery/layout/_partial/cover-style.ejs","hash":"4288b9d91b2d71404e7a509a81a5d7f7a4b8b5e8","modified":1705047215615},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1705047215616},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"e8958bc066b3c2fcd4152604cc12f30020106848","modified":1705047215616},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1705047215617},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1705047215617},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1705047215617},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1705047215617},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f5c00f21af281a09dc7de89e82a3b442903451a7","modified":1705047215618},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1705047215618},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"e8b44268b59add61af44b7338527523d10d9d742","modified":1705047215618},{"_id":"themes/hexo-theme-matery/layout/_partial/main-style.ejs","hash":"8819b334509682355a5e53fa0f307f90166d175c","modified":1705047215620},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1705047215619},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"52de0cf3ce13a3477b0a1659d2b8aa41db1f622d","modified":1705047215620},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"0953217f4e19a51dfc5a0ffc7d066406df18060b","modified":1705047215620},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1705047215621},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1705047215621},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"70fccaea75ce48364222c4e5de0496e556b01cb1","modified":1705047215622},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"6261f8191c3c1159f63ec7f9293bb93f7d2a3dbb","modified":1705047215622},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1705047215622},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1705047215623},{"_id":"themes/hexo-theme-matery/layout/_partial/reward-style.ejs","hash":"8256ed940c0185ccf01890d59fb4262f196e2323","modified":1705047215623},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1705047215623},{"_id":"themes/hexo-theme-matery/layout/_partial/post-style.ejs","hash":"243c3ba783553f25955d524fd47a5bb59a5e732b","modified":1705047215623},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"236668e72b01db91f5bf29eec4c79e34e2746d98","modified":1705047215624},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1705047215624},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1705047215624},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1705047215624},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1705047215624},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1705071529494},{"_id":"themes/hexo-theme-matery/source/css/dark.css","hash":"be4ef08494f3c965d513d9413685c0e723f671cd","modified":1705047215631},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"2ac48566bb806336f1e5bc5c66fc816a580d63c3","modified":1705047215625},{"_id":"themes/hexo-theme-matery/layout/_partial/waline.ejs","hash":"2658cb73ef984a30b248351d7858ee15596a6e7a","modified":1705047215625},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"ac347687f6b700b02188ee093c3b1f0580a115ba","modified":1705072738173},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"1aba01abe39b2a8d77b79bc7fbdf55fca944fbba","modified":1705071651563},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1705047215631},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1705047215632},{"_id":"themes/hexo-theme-matery/source/css/post.css","hash":"1ebbf9ddee7db4b3039d8d4e25f2605072ab6e24","modified":1705047215632},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1705047215631},{"_id":"themes/hexo-theme-matery/source/css/reward.css","hash":"56f8d21c3bb1dc57c762a63d13b08161d8260738","modified":1705047215632},{"_id":"themes/hexo-theme-matery/source/css/indexcover.css","hash":"00f4f498ae8514022004f2281cab8ff304cd0f37","modified":1705047215631},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1705047215633},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"aa957ea8cf6787f0ed6095fedc6cb9d7d1bf3522","modified":1705047215633},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1705047215632},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1705047215633},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1705047215633},{"_id":"themes/hexo-theme-matery/source/js/tw_cn.js","hash":"29157cdfa87aec28e56d3d5717d486bf4de07db6","modified":1705047215633},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpeg","hash":"aa72bb3d4f53647c9e1841d2740e01f990a7b30a","modified":1705066760391},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1705066760486},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1705047215634},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1705066760473},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1705047215634},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1705047215634},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1705066760482},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1705047215641},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1705047215641},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1705047215642},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1705047215642},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1705047215642},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1705047215641},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1705047215641},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1705047215634},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1705047215635},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1705047215635},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1705047215642},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1705047215641},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1705047215642},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1705047215648},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1705047215650},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1705047215651},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1705047215651},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1705047215651},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1705047215657},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"b9323091d50785ad6c617d7cae76a41a89eb44b3","modified":1705047215653},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1705047215654},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1705047215647},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1705047215673},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1705047215667},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1705047215674},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1705047215672},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","hash":"fb4d34c48567b7b992aac1c75f0d24c3eb2cc3fa","modified":1705047215672},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1705047215689},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1705047215675},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1705047215676},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1705047215689},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1705047215692},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1705047215674},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1705047215676},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1705047215697},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1705047215697},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1705047215688},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"3572617db2df7512416bbc4cfa6409474811bf2e","modified":1705066760471},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1705047215699},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"1be40cf921f84c07b06237e884088533120fc6fe","modified":1705066760470},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"20940954a79b17f3d77cf829872be1c5d74a5064","modified":1705066760470},{"_id":"themes/hexo-theme-matery/source/medias/barrager/3.png","hash":"fe25cb761e0a94abcf371052e39ee6d8393b5e4f","modified":1705066760471},{"_id":"themes/hexo-theme-matery/source/medias/barrager/4.png","hash":"810fcc0b2dd535788671f276fab7a03adc128b7e","modified":1705066760471},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1705066760473},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1705066760475},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1705066760477},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1705066760476},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1705066760476},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1705066760478},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1705066760480},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1705066760479},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1705066760479},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1705066760480},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1705066760481},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1705066760482},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1705066760481},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1705047215700},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1705047215654},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1705047215638},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1705047215641},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1705047215638},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1705047215641},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1705047215655},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1705047215655},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1705047215655},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1705047215655},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1705047215656},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1705047215656},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1705047215656},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1705047215693},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1705047215696},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1705047215656},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1705047215696},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1705047215694},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1705047215695},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1705047215694},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1705047215695},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1705047215651},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1705047215652},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1705047215647},{"_id":"themes/hexo-theme-matery/source/medias/barrager/5.png","hash":"fa0cd0239c3558c0dc07f10de6defd18ffc694cb","modified":1705066760472},{"_id":"themes/hexo-theme-matery/source/medias/barrager/6.png","hash":"e185c70bfbf81a40d903564633b64d2d23130e73","modified":1705066760472},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1705066760475},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1705066760477},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1705066760474},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1705066760476},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1705066760474},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1705066760477},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1705066760481},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1705066760480},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1705066760475},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1705066760479},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1705066760478},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1705047215638},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1705066760482},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","hash":"0ae47fa834fb55de7b50c79021aeabecfae50c9c","modified":1705047215636},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1705047215643},{"_id":"themes/hexo-theme-matery/source/medias/avatar.png","hash":"a32e74a67dc042724901950b8d65f54aea7d2b6d","modified":1705066760392},{"_id":"themes/hexo-theme-matery/source/medias/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1705066760484},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"d1328a7872827bc63e7cc4d33745397681accda8","modified":1705047215658},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"8eee32acbfac59744b4053a7290f503ef623d3ab","modified":1705047215658},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1705066760473},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1705047215703},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1705047215701},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"406514e17d0354ed56f3835802e43cf6a627a84a","modified":1705066760488},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1705047215641},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1705066760484},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"8d63fa8b0f60a50b07ac0f7e751f6f5e02ecdc44","modified":1705047215635},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1705047215637},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1705047215633},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1705047215702},{"_id":"themes/hexo-theme-matery/source/medias/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1705066760486},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"b08e0d534f2cfb37def3074c75949a03cf68ae55","modified":1705066760487},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1705066760486},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1705047215640},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1705047215699},{"_id":"themes/hexo-theme-matery/source/medias/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1705066760484},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1705047215692},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1705066760484},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1705047215646},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1705047215650},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1705047215671},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.png","hash":"412cbb89595cb660eb2ed17419ad728d3d0ba7db","modified":1705066760409},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1705047215667},{"_id":"source/books/source/面经--倾听潮汐.pdf","hash":"46764d0955f9dbcf1352f632259f9b7f98163198","modified":1705067855943},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.png","hash":"a25cb970f084d4159b5270c4b34322b93817f173","modified":1705066760395},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.png","hash":"10d2be5ad127d720c5c956f9b631a26964bb70bc","modified":1705066760428},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.png","hash":"0f275e0b323e8e0fbd0b72de90afd6c961a1d93b","modified":1705066760468},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.png","hash":"73b2d68e3f048c459a0dfb2813be1add6b8d752e","modified":1705066760455},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.png","hash":"e4071f03d49db20ccc0be8721b7e87864ebf2e18","modified":1705066760440},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.png","hash":"06616db27c1c3e7f856463bc86de6485dbdf9586","modified":1705066760449},{"_id":"source/books/source/JAVA核心面试知识整理.pdf","hash":"59eab07f584401d514eb4d39b4608e6a1cffab28","modified":1705067855875},{"_id":"source/books/source/石杉的架构笔记[第二版]最新版本.pdf","hash":"ad0e7329748630915da86f83c8483c3c2cc81f43","modified":1705067855931},{"_id":"public/atom.xml","hash":"576dcdbd03abd8e99319a4133213e28e02d50739","modified":1705160029135},{"_id":"public/search.xml","hash":"24bdfa6e751710592d75c838a9f8ab3c85c35722","modified":1705160029135},{"_id":"public/404/index.html","hash":"cfb1cec5bcc9e57f76ce566a2fed0cda3bf58e47","modified":1705161702297},{"_id":"public/baidu_verify_code-XTYqJDa5zw.html","hash":"c05c7da20f77d9ec7116291aad9e824e4739ca7e","modified":1705161702297},{"_id":"public/about/index.html","hash":"c20d7e5a59f224f1d88c1a7a4d3c012c4534eabc","modified":1705161702297},{"_id":"public/bb/index.html","hash":"976053785add6fec7e11472b758fc12a004c1af5","modified":1705161702297},{"_id":"public/books/index.html","hash":"16dd254e7dff6f6bd690f757358b586fb98005bd","modified":1705161702297},{"_id":"public/categories/index.html","hash":"e32cc9096dd23856ef3b571a72ab4dc5aff7b6ad","modified":1705161702297},{"_id":"public/contact/index.html","hash":"c1bc30e4f93e5620c1687b8754322a5bc719cdaf","modified":1705161702297},{"_id":"public/friends/index.html","hash":"7f5978be142a6ce007853238f6062b398c08ba99","modified":1705161702297},{"_id":"public/galleries/index.html","hash":"85da31dc289da03a96651e38a9e223a9f1c60f11","modified":1705161702297},{"_id":"public/movies/index.html","hash":"08baa6b9f6ac4b161ff97a6257f8e912d7254988","modified":1705161702297},{"_id":"public/musics/index.html","hash":"c70d3563b0066921a9d97c3c9b0280777a6d2074","modified":1705161702297},{"_id":"public/tags/index.html","hash":"5737e187540446f497006cb24fcfa80494fb8a22","modified":1705161702297},{"_id":"public/2022/03/24/fu-wu-wang-ge/index.html","hash":"a89598d5fcb7e81512aba8a8e1238007ad428cb7","modified":1705161702297},{"_id":"public/2022/03/20/kubernetes-de-she-ji-jie-du/index.html","hash":"93729fac7d512523edde725be5c9499aa9debf79","modified":1705161702297},{"_id":"public/2022/03/20/kafka-he-xin-ji-zhu/index.html","hash":"2f7486da7d46cafcf39897148ee7a977264cd92c","modified":1705161702297},{"_id":"public/2022/03/14/chang-yong-de-er-ci-bian-jie-ma-fang-shi/index.html","hash":"96baf5d6cd7a888d0a72b3d763a5f75d3853ba0a","modified":1705161702297},{"_id":"public/2022/03/14/bian-xie-wang-luo-ying-yong-cheng-xu-ji-ben-bu-zou/index.html","hash":"3a0bc94ba683bdec299de238587661c692dbd0e3","modified":1705161702297},{"_id":"public/2022/03/13/tcp-nian-bao-ban-bao-netty-quan-gao-ding/index.html","hash":"f161c54a97a312024861c074767905aba3342fc3","modified":1705161702297},{"_id":"public/2022/03/14/netty-ru-he-wan-zhuan-nei-cun-shi-yong/index.html","hash":"0440996a348e5693dd3cb9545b6dc922549ca9b4","modified":1705161702297},{"_id":"public/2022/03/13/netty-ru-he-zhi-chi-san-chong-reactor/index.html","hash":"a26c10bf8204ae983e578fbca595e9b8422b00a2","modified":1705161702297},{"_id":"public/2022/03/13/netty-san-chong-io-de-zhi-chi/index.html","hash":"c2702292a9fe9bbf8b6d48bfa0904045b860fe6c","modified":1705161702297},{"_id":"public/archives/index.html","hash":"99844f5530125e355a9d32f646b2bc58aa00475f","modified":1705161702297},{"_id":"public/archives/2022/index.html","hash":"33850f6ec465888b42007332bf526adc17143c20","modified":1705161702297},{"_id":"public/archives/2022/03/index.html","hash":"55fba3c2d8c52d058959b967cf5a49ab9d25ecc9","modified":1705161702297},{"_id":"public/categories/kafka/index.html","hash":"be86141392ac8cdb1c3d765d8a8e438bce9d01f5","modified":1705161702297},{"_id":"public/categories/Kubernetes/index.html","hash":"7ee8874e1445156320e89177ea9919098b305146","modified":1705161702297},{"_id":"public/categories/Netty/index.html","hash":"0fa93f2a1da28e0fe656b466e012cfdc2a66564a","modified":1705161702297},{"_id":"public/categories/ServiceMesh/index.html","hash":"a9e2d983ca975e5699452221165595e30fc44d2e","modified":1705161702297},{"_id":"public/index.html","hash":"7f47af2c39717965ce94b1d0d0d74560e67a43cb","modified":1705161702297},{"_id":"public/tags/kafka/index.html","hash":"d020a6e77900c745969fe5b20da8a46f8593e036","modified":1705161702297},{"_id":"public/tags/Kubernetes/index.html","hash":"8a09e198d7de8d3198df39ce4b0950a354ba6132","modified":1705161702297},{"_id":"public/tags/Netty/index.html","hash":"bfb42866b24877ad2ebb29fca433f443d278ee52","modified":1705161702297},{"_id":"public/tags/ServiceMesh/index.html","hash":"84abdf15e3c9529787603ffd35c3651e0878069e","modified":1705161702297},{"_id":"public/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705160029135},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1705161702297},{"_id":"public/medias/avatar.jpeg","hash":"aa72bb3d4f53647c9e1841d2740e01f990a7b30a","modified":1705161702297},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1705161702297},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1705161702297},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1705161702297},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1705161702297},{"_id":"public/medias/barrager/0.png","hash":"1be40cf921f84c07b06237e884088533120fc6fe","modified":1705161702297},{"_id":"public/medias/barrager/2.png","hash":"3572617db2df7512416bbc4cfa6409474811bf2e","modified":1705161702297},{"_id":"public/medias/barrager/1.png","hash":"20940954a79b17f3d77cf829872be1c5d74a5064","modified":1705161702297},{"_id":"public/medias/barrager/4.png","hash":"810fcc0b2dd535788671f276fab7a03adc128b7e","modified":1705161702297},{"_id":"public/medias/barrager/3.png","hash":"fe25cb761e0a94abcf371052e39ee6d8393b5e4f","modified":1705161702297},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1705161702297},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1705161702297},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1705161702297},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1705161702297},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1705161702297},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1705161702297},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1705161702297},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1705161702297},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1705161702297},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1705161702297},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1705161702297},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1705161702297},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1705161702297},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1705161702297},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1705161702297},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1705161702297},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1705161702297},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1705161702297},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1705161702297},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1705161702297},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1705161702297},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1705161702297},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1705161702297},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1705161702297},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1705161702297},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1705161702297},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1705161702297},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1705161702297},{"_id":"public/live2dw/assets/haruto.model.json","hash":"76f915f7edbd9c47df0ca041dddb151c0c93a2bf","modified":1705160029135},{"_id":"public/live2dw/assets/haruto.physics.json","hash":"2fbf886979212357ba293bd35884f2cb5b26b6a6","modified":1705160029135},{"_id":"public/live2dw/assets/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1705160029135},{"_id":"public/live2dw/assets/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1705160029135},{"_id":"public/live2dw/assets/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1705160029135},{"_id":"public/live2dw/assets/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1705160029135},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"d130dd1d194f05b3eb5391289b0339999e37c3a6","modified":1705160029135},{"_id":"public/live2dw/assets/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1705160029135},{"_id":"public/live2dw/assets/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1705160029135},{"_id":"public/live2dw/assets/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1705160029135},{"_id":"public/live2dw/assets/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1705160029135},{"_id":"public/live2dw/assets/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1705160029135},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1705160029135},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1705161702297},{"_id":"public/css/bb.css","hash":"ac347687f6b700b02188ee093c3b1f0580a115ba","modified":1705161702297},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1705161702297},{"_id":"public/css/dark.css","hash":"be4ef08494f3c965d513d9413685c0e723f671cd","modified":1705161702297},{"_id":"public/css/matery.css","hash":"1aba01abe39b2a8d77b79bc7fbdf55fca944fbba","modified":1705161702297},{"_id":"public/css/indexcover.css","hash":"bd027eb8192b4d1b0dc9b4f965fa264e8437f847","modified":1705161702297},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1705161702297},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1705161702297},{"_id":"public/css/post.css","hash":"d38c71eddb8af1752c48eb48595fbaf89450ff40","modified":1705161702297},{"_id":"public/css/reward.css","hash":"98b32aabeb908727844af04c31f08da6cab08335","modified":1705161702297},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1705161702297},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1705161702297},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1705161702297},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1705161702297},{"_id":"public/js/matery.js","hash":"aa957ea8cf6787f0ed6095fedc6cb9d7d1bf3522","modified":1705161702297},{"_id":"public/js/tw_cn.js","hash":"29157cdfa87aec28e56d3d5717d486bf4de07db6","modified":1705161702297},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1705161702297},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1705161702297},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1705161702297},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1705161702297},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1705161702297},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1705161702297},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1705161702297},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1705161702297},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1705161702297},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1705161702297},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1705161702297},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1705161702297},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1705161702297},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1705161702297},{"_id":"public/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1705161702297},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1705161702297},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1705161702297},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1705161702297},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1705161702297},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1705161702297},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1705161702297},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1705161702297},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1705161702297},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1705161702297},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1705161702297},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1705161702297},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1705161702297},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1705161702297},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1705161702297},{"_id":"public/libs/materialize/materialize.min.css","hash":"d1328a7872827bc63e7cc4d33745397681accda8","modified":1705161702297},{"_id":"public/libs/materialize/materialize.min.js","hash":"8eee32acbfac59744b4053a7290f503ef623d3ab","modified":1705161702297},{"_id":"public/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1705161702297},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1705161702297},{"_id":"public/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1705161702297},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1705161702297},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1705161702297},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1705161702297},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1705161702297},{"_id":"public/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1705161702297},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1705161702297},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1705161702297},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1705161702297},{"_id":"public/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1705161702297},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1705161702297},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1705161702297},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1705161702297},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1705161702297},{"_id":"public/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1705161702297},{"_id":"public/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1705161702297},{"_id":"public/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1705161702297},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1705161702297},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1705161702297},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1705161702297},{"_id":"public/libs/awesome/css/all.min.css","hash":"0ae47fa834fb55de7b50c79021aeabecfae50c9c","modified":1705161702297},{"_id":"public/libs/awesome/css/all.css","hash":"8d63fa8b0f60a50b07ac0f7e751f6f5e02ecdc44","modified":1705161702297},{"_id":"public/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1705161702297},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1705161702297},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1705161702297},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1705161702297},{"_id":"public/medias/barrager/6.png","hash":"e185c70bfbf81a40d903564633b64d2d23130e73","modified":1705161702297},{"_id":"public/medias/barrager/5.png","hash":"fa0cd0239c3558c0dc07f10de6defd18ffc694cb","modified":1705161702297},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1705161702297},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1705161702297},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1705161702297},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1705161702297},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1705161702297},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1705161702297},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1705161702297},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1705161702297},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1705161702297},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1705161702297},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1705161702297},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1705161702297},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1705161702297},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1705160029135},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1705161702297},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1705161702297},{"_id":"public/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1705161702297},{"_id":"public/medias/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1705161702297},{"_id":"public/medias/avatar.png","hash":"a32e74a67dc042724901950b8d65f54aea7d2b6d","modified":1705161702297},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1705161702297},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1705161702297},{"_id":"public/medias/reward/wechat.png","hash":"406514e17d0354ed56f3835802e43cf6a627a84a","modified":1705161702297},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1705161702297},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1705161702297},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1705160029135},{"_id":"public/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1705161702297},{"_id":"public/live2dw/assets/moc/haruto.2048/texture_00.png","hash":"62b970aa1480a1c18bdc4e74e297f2a1b34ca9fa","modified":1705160029135},{"_id":"public/live2dw/assets/moc/haruto.moc","hash":"57bec0b245b49ea941d61ba3dee671f20441afae","modified":1705160029135},{"_id":"public/medias/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1705161702297},{"_id":"public/medias/reward/alipay.jpg","hash":"b08e0d534f2cfb37def3074c75949a03cf68ae55","modified":1705161702297},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1705161702297},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1705161702297},{"_id":"public/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1705161702297},{"_id":"public/medias/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1705161702297},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1705161702297},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1705160029135},{"_id":"public/medias/banner/1.png","hash":"412cbb89595cb660eb2ed17419ad728d3d0ba7db","modified":1705161702297},{"_id":"public/medias/banner/0.png","hash":"a25cb970f084d4159b5270c4b34322b93817f173","modified":1705161702297},{"_id":"public/books/source/面经--倾听潮汐.pdf","hash":"46764d0955f9dbcf1352f632259f9b7f98163198","modified":1705160029135},{"_id":"public/medias/banner/2.png","hash":"10d2be5ad127d720c5c956f9b631a26964bb70bc","modified":1705161702297},{"_id":"public/medias/banner/6.png","hash":"0f275e0b323e8e0fbd0b72de90afd6c961a1d93b","modified":1705161702297},{"_id":"public/medias/banner/5.png","hash":"73b2d68e3f048c459a0dfb2813be1add6b8d752e","modified":1705161702297},{"_id":"public/medias/banner/3.png","hash":"e4071f03d49db20ccc0be8721b7e87864ebf2e18","modified":1705161702297},{"_id":"public/medias/banner/4.png","hash":"06616db27c1c3e7f856463bc86de6485dbdf9586","modified":1705161702297},{"_id":"public/books/source/JAVA核心面试知识整理.pdf","hash":"59eab07f584401d514eb4d39b4608e6a1cffab28","modified":1705160029135},{"_id":"public/books/source/石杉的架构笔记[第二版]最新版本.pdf","hash":"ad0e7329748630915da86f83c8483c3c2cc81f43","modified":1705160029135}],"Category":[{"name":"kafka","_id":"clrc892aw00036xywaqlggpuu"},{"name":"Kubernetes","_id":"clrc892b0000j6xywbhdobn2r"},{"name":"Netty","_id":"clrc892b1000o6xywgnq20etw"},{"name":"ServiceMesh","_id":"clrc892b3001b6xyw7oepcqlf"}],"Data":[{"_id":"friends","data":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]},{"_id":"musics","data":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}],"Page":[{"title":"404","date":"2022-03-12T08:42:59.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2022-03-12 16:42:59\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2024-01-12T13:57:35.751Z","path":"404/index.html","comments":1,"_id":"clrc892at00006xyw9tlt99cg","content":"","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":""},{"_content":"14acea024326ca5374e8781ab0e7e89b","source":"baidu_verify_code-XTYqJDa5zw.html","raw":"14acea024326ca5374e8781ab0e7e89b","date":"2024-01-12T13:57:35.760Z","updated":"2024-01-12T13:57:35.760Z","path":"baidu_verify_code-XTYqJDa5zw.html","title":"","comments":1,"layout":"page","_id":"clrc892aw00026xywd8yqg8fg","content":"14acea024326ca5374e8781ab0e7e89b","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"14acea024326ca5374e8781ab0e7e89b"},{"title":"about","date":"2022-03-12T08:41:09.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-03-12 16:41:09\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2024-01-12T13:57:35.760Z","path":"about/index.html","comments":1,"_id":"clrc892ax00056xyw5rciaz1o","content":"","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":""},{"layout":"bb","title":"黑石说","date":"2022-03-13T04:31:16.000Z","tags":null,"_content":"","source":"bb/index.md","raw":"---\nlayout: bb\ntitle: 黑石说\ndate: 2022-03-13 12:31:16\ntags:\n---\n","updated":"2024-01-12T13:57:35.760Z","path":"bb/index.html","comments":1,"_id":"clrc892ax00066xywbo1j6jff","content":"","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":""},{"title":"categories","date":"2022-03-12T08:39:55.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-03-12 16:39:55\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2024-01-12T13:57:35.761Z","path":"categories/index.html","comments":1,"_id":"clrc892ax00076xyw0csb7j53","content":"","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":""},{"layout":"page","title":"technology","date":"2022-03-20T10:11:29.000Z","tags":null,"_content":"\n### 面经--倾听潮汐.pdf\n<iframe src=\"./source/面经--倾听潮汐.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n\n### 石杉的架构笔记[第二版]最新版本.pdf\n<iframe src=\"./source/石杉的架构笔记[第二版]最新版本.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n\n### JAVA核心面试知识整理.pdf\n<iframe src=\"./source/JAVA核心面试知识整理.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n","source":"books/index.md","raw":"---\nlayout: page\ntitle: technology\ndate: 2022-03-20 18:11:29\ntags: \n---\n\n### 面经--倾听潮汐.pdf\n<iframe src=\"./source/面经--倾听潮汐.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n\n### 石杉的架构笔记[第二版]最新版本.pdf\n<iframe src=\"./source/石杉的架构笔记[第二版]最新版本.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n\n### JAVA核心面试知识整理.pdf\n<iframe src=\"./source/JAVA核心面试知识整理.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n","updated":"2024-01-13T15:27:23.912Z","path":"books/index.html","comments":1,"_id":"clrc892ay00096xywffey3mzu","content":"<h3 id=\"面经–倾听潮汐-pdf\"><a href=\"#面经–倾听潮汐-pdf\" class=\"headerlink\" title=\"面经–倾听潮汐.pdf\"></a>面经–倾听潮汐.pdf</h3><iframe src=\"./source/面经--倾听潮汐.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n\n<h3 id=\"石杉的架构笔记-第二版-最新版本-pdf\"><a href=\"#石杉的架构笔记-第二版-最新版本-pdf\" class=\"headerlink\" title=\"石杉的架构笔记[第二版]最新版本.pdf\"></a>石杉的架构笔记[第二版]最新版本.pdf</h3><iframe src=\"./source/石杉的架构笔记[第二版]最新版本.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n\n<h3 id=\"JAVA核心面试知识整理-pdf\"><a href=\"#JAVA核心面试知识整理-pdf\" class=\"headerlink\" title=\"JAVA核心面试知识整理.pdf\"></a>JAVA核心面试知识整理.pdf</h3><iframe src=\"./source/JAVA核心面试知识整理.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h3 id=\"面经–倾听潮汐-pdf\"><a href=\"#面经–倾听潮汐-pdf\" class=\"headerlink\" title=\"面经–倾听潮汐.pdf\"></a>面经–倾听潮汐.pdf</h3><iframe src=\"./source/面经--倾听潮汐.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n\n<h3 id=\"石杉的架构笔记-第二版-最新版本-pdf\"><a href=\"#石杉的架构笔记-第二版-最新版本-pdf\" class=\"headerlink\" title=\"石杉的架构笔记[第二版]最新版本.pdf\"></a>石杉的架构笔记[第二版]最新版本.pdf</h3><iframe src=\"./source/石杉的架构笔记[第二版]最新版本.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n\n<h3 id=\"JAVA核心面试知识整理-pdf\"><a href=\"#JAVA核心面试知识整理-pdf\" class=\"headerlink\" title=\"JAVA核心面试知识整理.pdf\"></a>JAVA核心面试知识整理.pdf</h3><iframe src=\"./source/JAVA核心面试知识整理.pdf\" style=\"width:800px; height:700px;\" frameborder=\"0\"></iframe>\n"},{"title":"contact","date":"2022-03-12T08:41:31.000Z","type":"contact","layout":"contact","_content":"留言不需要登陆","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2022-03-12 16:41:31\ntype: \"contact\"\nlayout: \"contact\"\n---\n留言不需要登陆","updated":"2024-01-12T13:57:35.761Z","path":"contact/index.html","comments":1,"_id":"clrc892ay000a6xywdyyfgo6u","content":"<p>留言不需要登陆</p>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<p>留言不需要登陆</p>\n"},{"layout":"page","title":"galleries","date":"2022-03-19T16:52:30.000Z","tags":null,"_content":"","source":"galleries/index.md","raw":"---\nlayout: page\ntitle: galleries\ndate: 2022-03-20 00:52:30\ntags:\n---\n","updated":"2024-01-12T13:57:35.762Z","path":"galleries/index.html","comments":1,"_id":"clrc892ay000c6xyw85jw3eht","content":"","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":""},{"title":"friends","date":"2022-03-12T08:41:50.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2022-03-12 16:41:50\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2024-01-12T13:57:35.761Z","path":"friends/index.html","comments":1,"_id":"clrc892ay000d6xywchrg3dsk","content":"","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":""},{"layout":"page","title":"movies","date":"2022-03-19T16:52:16.000Z","tags":null,"_content":"","source":"movies/index.md","raw":"---\nlayout: page\ntitle: movies\ndate: 2022-03-20 00:52:16\ntags:\n---\n","updated":"2024-01-12T13:57:35.762Z","path":"movies/index.html","comments":1,"_id":"clrc892ay000e6xywfpib0p38","content":"","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":""},{"layout":"music","title":"musics","date":"2022-03-13T07:39:49.000Z","type":"music","_content":"\n<iframe height=498 width=700 src=\"//player.bilibili.com/player.html?aid=972652750&bvid=BV1Xp4y1t76t&cid=329086233&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"/>\n","source":"musics/index.md","raw":"---\nlayout: music\ntitle: musics\ndate: 2022-03-13 15:39:49\ntype: music\n---\n\n<iframe height=498 width=700 src=\"//player.bilibili.com/player.html?aid=972652750&bvid=BV1Xp4y1t76t&cid=329086233&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"/>\n","updated":"2024-01-12T13:57:35.763Z","path":"musics/index.html","comments":1,"_id":"clrc892ay000f6xywb0zi97ht","content":"<iframe height=\"498\" width=\"700\" src=\"//player.bilibili.com/player.html?aid=972652750&amp;bvid=BV1Xp4y1t76t&amp;cid=329086233&amp;page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\">\n</iframe>","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<iframe height=498 width=700 src=\"//player.bilibili.com/player.html?aid=972652750&bvid=BV1Xp4y1t76t&cid=329086233&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"/>\n"},{"title":"tags","date":"2022-03-12T08:40:39.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-03-12 16:40:39\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2024-01-13T14:49:22.491Z","path":"tags/index.html","comments":1,"_id":"clrc892ay000g6xyw8y80f2tp","content":"","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":""}],"Post":[{"title":"Kafka核心技术","date":"2022-03-20T04:06:00.000Z","_content":"\n### 生产者消息分区机制原理剖析\n\nKafka的三级结构：主题 - 分区 - 消息\n\n* 为什么要分区？\n\n分区的作用是提供负载均衡的能力，不同的分区分布在不同的机器节点上，数据的读写都是针对分区的粒度进行。可通过增加机器来增加吞吐量\n\n* 都有哪些分区策略\n\n1、轮训策略\n\n2、随机策略\n\n3、消息键保序策略\n\n分区是实现负载均衡以及高吞吐量的关键，故在生产者这一端就要仔细盘算合适的分区策略，避免造成数据倾斜，使得某些分区成为性能瓶颈。\n\n\n\n### Kafka副本机制详解\n\nKafka副本机制的好处：\n\n- 提供数据冗余\n\n同一个分区下的所有副本保存有相同的消息序列，这些副本分散保存在不同的Broker上，从而能对抗部分Broker宕机带来的数据不可用\n\n数据同步机制：\n\n同个分区下的不同副本基于领导者的副本机制进行数据同步,从副本只负责同步数据，不负责对外的读写工作。\n\n原因：\n\n- 方便实现“Read-your-writes”\n- 方便实现单调读（Monotonic Reads）\n\n主从分区实现数据同步的保证：***In-sync Replicas***机制\n\n- Broker 端参数 ***replica.lag.time.max.ms*** 参数值设置的是主从同步的最长间隔\n\n\n\n### Kafka为什么那么快\n\n* Kafka具有优秀的磁盘读写能力\n* 批量量处理。合并小的请求，然后以流的方式进行交互，直顶网络上限。\n* 请求采用多路复用的IO模型\n\n### Kafka请求是怎么处理\n\nKafka在TCP的基础上封装了一组请求协议，PRODUCR 请求用于生产消息，FETCH请求用于消费消息，METADATA请求是用于请求Kafka元数据\n\nKafka使用的是***Reactor***模式处理请求。\n\nReactor模式是事件驱动架构的一种实现方式，特别适合用于处理多个客户端并发向服务端发送请求的场景。\n\nclient   ----->  Reactor(Dispatcher) 公平分配  ------->read(网络线程池   ------>共享请求队列   ------>IO线程池  )   ------->decode  -----> 网络线程池请求响应队列\n\n### 幂等生产者和事务生产者是一回事吗？(kafka如何做到消息不会丢失，也不会被重复发送)\n\n\n\nkafka如何做到消息不会丢失，也不会被重复发送?\n\nKafka提供消息不会丢失，但可能被重复发送的可靠性保障：\n\n- 避免重复生产\n\n1.创建幂等性Producer，当Producer发送了具有相同字段的消息之后，Broker会知道这些消息已经重复，并在后台进行舍弃。原理是就是经典的空间换时间的优化思想，Broker会在后台多保存一些字段，消息上报时会进行字段内容的核对。\n\n幂等性 Producer的局限性：单分区幂等性、单会话幂等性\n\n事务型 Producer:事务型 Producer 能够保证将消息原子性地写入到多个分区中。这批消息要么全部写入成功，要么全部失败。(类似于数据库的串行化)\n\n### \n\n### 生产者压缩算法\n\n* 何时压缩：\n\n生产者端 和 Broker端\n\nBroker指定的压缩算法与生产者不一样时，Broker端需要先解压再依据自己的算法算法压缩。\n\n* 何时解压\n\n在consumer端获取的消息中有该消息的压缩算法\n\n### 无消息丢失配置怎么实现\n\nKafka只对 “已提交的消息”的消息做有限度的持久保证。\n\n* 可在一个或若干个Broker成功接收并写入日志文件后，会告诉生产者已提交\n\n生产者程序丢失数据：Producer永远要使用带有回调通知的发送API\n\n消费者程序丢失数据：维持先消费消息，再更新位移的顺序\n\n还有一个解决办法是，多线程异步处理消费信息，Consumer 程序不要开启自动提交位移，而是要应用程序手动提交位移\n\n总结：\n\n* 使用peoducer.send(msg,callback)\n* 设置acks=all\n* 设置retries为一个较大的值\n* 设置unclean.leader.election.enable=false\n* 设置replication.factor=3\n* 设置min.insynnc.relicas>1\n* 确保replication.factor>min.insynnc.relicas\n* 确保消息消费完成再提交\n\n### 客户端都有哪些不常见但是很高级的功能\n\nKafka 拦截器分为生产者拦截器和消费者拦截器\n\n* kafka拦截器的使用场景\n\nKafka 拦截器可以应用于包括客户端监控、端到端系统性能检测、消息审计等多种功能在内的场景\n\n\n\n### Java生产者是如何管理TCP连接\n\n* 为何采用TCP？\n  * 从社区的角度看，在开发客户端时能够利用TCP本身提供的一些高级特性：多路复用请求以及同时轮询多个连接的能力\n  * 目前已知的 HTTP 库在很多编程语言中都略显简陋\n* TCP连接何时创建？\n  * TCP 连接是在创建 KafkaProducer 实例时建立的\n  * 一个是在更新元数据后\n  * 在消息发送时\n* TCP连接何时关闭？\n  * 用户主动关闭\n  * Kafka自带关闭(TTL)\n\n### Java 消费者如何管理TCP连接\n\n* 何时创建TCP连接？\n  * TCP连接是在调用KafkaConsumer.poll 方法时被创建的\n    * 发起 FindCoordinator 请求时\n    * 连接协调者时\n    * 消费数据时\n* 创建多少个 TCP 连接？\n  * 确定协调者和获取集群元数据\n  * 连接协调者，令其执行组成员管理操作\n  * 执行实际的消息获取\n* 何时关闭连接？\n  * 手动调用 KafkaConsumer.close() 方法，或者是执行 Kill 命令\n  * Kafka 自动关闭，由消费者端参数 connection.max.idle.ms 控制的\n\n\n\n### 消费者组到底是什么?\n\nConsumer Group 是 Kafka 提供的可扩展且具有容错性的消费者机制\n\n传统消息引擎模型：点对点模型和发布 / 订阅模型\n\n点对点模型：消息一旦被消费，就会从队列中删除，而且只能被下游的一个consumer消费。\n\n缺点：伸缩性（scalability）很差，因为下游的多个 Consumer 都要“抢”这个共享消息队列的消息\n\n订阅模型: 允许消息被多个 Consumer 消费\n\n缺点：每个订阅者都必须要订阅主题的所有分区。这种全量订阅的方式既不灵活，也会影响消息的真实投递效果\n\n***Kafka 仅仅使用 Consumer Group 这一种机制，却同时实现了传统消息引擎系统的两大模型***\n\n***Rebalance*** 本质上是一种协议，规定了一个 Consumer Group 下的所有 Consumer 如何达成一致，来分配订阅 Topic 的每个分区\n\n\n\n触发重平衡的条件：\n\n1.组员数发生变更\n\n2.订阅主题数发生变更\n\n3.订阅主题的分区数发生变更\n\n### 揭开神秘的“唯一主题”面纱\n\nkafka自建位移主题保存consumer的消费位移\n\n位移主题中的Key保存的内容格式：<Group ID，主题名，分区号 >\n\n当 Kafka 集群中的第一个 Consumer 程序启动时，Kafka 会自动创建位移主题\n\n\n\n如果位移主题是 Kafka 自动创建的，那么该主题的分区数是 50，副本数是 3\n\n* 位移主题何时提交？\n  * 自动提交位移\n  * 手动提交位移\n\nKafka 提供了专门的后台线程定期地巡检待 Compact 的主题，看看是否存在满足条件的可删除数据\n\n### 消费组重平衡能避免吗 ?\n\n原理：\n\n同一个consumer Group下的所有consumer实例在协调者组件的帮助下完成订阅主题分区的分配\n\n\n\nBroker在启动时会开启相应的Coordinator组件，Broker所属的Coordinator组件与其可能不在同一个节点上。\n\nKafka 为某个 Consumer Group 确定 Coordinator 所在的 Broker 的算法：\n\n* 确定由位移主题的哪个分区来保存该Group数据\n* 找出该分区Leader副本所在的Broker,该Broker即为对应的Broker\n\n\n\n重平衡的弊端：\n\n* Rebalance影响Consumer端的TPS，因为重平衡期间消费者不可用\n* Rebalance很慢，业务将长时间不可用\n\n\n\n在真实的业务场景中，很多Rebalance都是计划外的或者说是不必要的。\n\n触发重平衡的条件：\n\n1.组员数发生变更\n\n2.订阅主题数发生变更\n\n3.订阅主题的分区数发生变更\n\n\n\n后两个都是运维层面的不可避免，但是组员数目可以避免。\n\n避免方式:\n\n* 避免consumer未能及时发送心跳而导致被剔除\n* 避免consumer消费时间过长\n\n### Kafka消息位移提交\n\nConsumer 需要为分配给它的每个分区提交各自的位移数据\n\n\n\n位移提交的语义保障是由你来负责的，Kafka 只会“无脑”地接受你提交的位移\n\n\n\n从用户的角度来说，位移提交分为自动提交和手动提交；从 Consumer 端的角度来说，位移提交分为同步提交和异步提交\n\n\n\nKafka提供的提交位移的方法：\n\n* 自动提交位移:\n\n可能会出现重复消费\n\n* 手动提交位移：\n\n  * 同步提交位移，提交过程中，consumer会处于阻塞状态，知道远端的Broker返回提交结果\n\n  * 异步提交位移，异步提交过程失败，重试并没有意义 因为消费的位移已经不是最新值\n\n    所以实际实践需要commitAsync() 避免程序阻塞，Consumer 要关闭前，我们调用 commitSync() 方法执行同步阻塞式的位移提交。\n\n* 精细化管理位移\n\n### CommitFailedException异常怎么处理？\n\n当消息处理的总时间超过预设的 max.poll.interval.ms 参数值时，Kafka Consumer 端会抛出 CommitFailedException 异常。\n\n处理：\n\n* 缩短单条消息处理的时间\n* 增加 Consumer 端允许下游系统消费一批消息的最大时长\n* 减少下游系统一次性消费的消息总数\n* 下游系统使用多线程来加速消费\n\n### 多线程开发消费者实例\n\n* Kafka Java Consumer 设计原理\n\n  * Kafka Consumer 是双线程的设计，分为用户主线程和心跳线程\n\n  * 原因：\n\n    1.老版本consumer的每个实例都为所订阅的主题分区创建对应的消息获取线程，同时也是阻塞式的，Consumer 实例启动后，内部会创建很多阻塞式的消息获取迭代器，但在很多场景下，Consumer 端是有非阻塞需求的，社区为新版本设计了单线程+轮询的机制\n\n    2.单线程的设计能够简化 Consumer 端的设计。Consumer 获取到消息后，处理消息的逻辑是否采用多线程，完全由你决定。\n\n* Kafka 多线程方案:\n\n  Kafka Consumer 类不是线程安全的 (thread-safe)。所有的网络 I/O 处理都是发生在用户主线程中，因此，你在使用过程中必须要确保线程安全。\n\n  * 消费者程序启动多个线程，每个线程维护专属的 kafka Consumer实例，负责完整的消息获取、消息处理流程。\n  * 消费者程序使用单或多线程获取消息，同时创建多个消费线程执行消息处理逻辑\n\n### 消费者组消费进度监控怎么实现？\n\n监控Kafka的滞后程度 Lag\n\n有三种方法监控：\n\n* Kafka自带命令\n* Kafka Java Consumer API\n* 使用 Kafka 自带的 JMX 监控指标\n\n### 消费者组重平衡全流程解析\n\n依赖消费端的心跳线程来通知其他消费者实例，当需要发生重平衡时，Broker会把需要重平衡的信号封装至心跳上报的响应体中。\n\n重平衡流程：\n\n* 新成员加入：\n  * 新成员分别发送JoinGroup 请求和 SyncGroup 请求把组员信息发送给调解者，由协调者作为节点的分配\n* 组员主动离组：\n  * 流程基本同新成员加入\n* 组员崩溃离组：\n  * 靠心跳线程检测组员状态，由协调者发起重平衡\n\n\n\n### Kafka控制器\n\n运行时只能有一个Broker作为控制器，第一个在zookeeper中创建controller节点的Broker会被指定为控制器\n\n控制器职责：\n\n* 主题管理(创建、删除、增加分区)\n* 分区重分配\n* Preferred领导者选举\n* 集群成员管理(新增Broker 、Broker主动关闭、Briker宕机)\n* 数据服务\n\n控制器单点故障转移由zookeeper的watch功能保证通知\n\n### 关于高水位和Leader Epoch\n\nKafka用高水位来表示Kafka中的消息位移，位移值小于高水位的表示已提交的数据，高于高水位的数据表示未提交信息，不能被消费者消费。\n\n高水位的作用：\n\n1.定义消息可见性，即用来标识分区下的哪些消息是可以被消费者消费的\n\n2.帮助Kafka完成副本同步\n\n\n\n### 管理和监控 skip\n\n\n\n### Kafka Stream与其他流处理平台的差异在哪\n\n* Kafka Stream最大的特色就是它不是一个平台，至少它不是一个具备完整功能的平台\n* 从应用部署方面来看，Kafka Stream倾向于将部署交给开发人员来做，而不是自己实现\n* Kafka Stream只支持与Kafka的集群的交换\n* Kafka Stream依赖Kafka的协调功能提供高容错性和高伸缩性\n\nKafka Stream与consumer的区别是Kafka Stream是实时流处理组件，提供了很多算子，可以实现更多复杂的业务\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Kafka核心技术.md","raw":"---\ntitle: Kafka核心技术\ndate: 2022-03-20 12:06:00\ntags:\n  - kafka\ncategories: kafka\n---\n\n### 生产者消息分区机制原理剖析\n\nKafka的三级结构：主题 - 分区 - 消息\n\n* 为什么要分区？\n\n分区的作用是提供负载均衡的能力，不同的分区分布在不同的机器节点上，数据的读写都是针对分区的粒度进行。可通过增加机器来增加吞吐量\n\n* 都有哪些分区策略\n\n1、轮训策略\n\n2、随机策略\n\n3、消息键保序策略\n\n分区是实现负载均衡以及高吞吐量的关键，故在生产者这一端就要仔细盘算合适的分区策略，避免造成数据倾斜，使得某些分区成为性能瓶颈。\n\n\n\n### Kafka副本机制详解\n\nKafka副本机制的好处：\n\n- 提供数据冗余\n\n同一个分区下的所有副本保存有相同的消息序列，这些副本分散保存在不同的Broker上，从而能对抗部分Broker宕机带来的数据不可用\n\n数据同步机制：\n\n同个分区下的不同副本基于领导者的副本机制进行数据同步,从副本只负责同步数据，不负责对外的读写工作。\n\n原因：\n\n- 方便实现“Read-your-writes”\n- 方便实现单调读（Monotonic Reads）\n\n主从分区实现数据同步的保证：***In-sync Replicas***机制\n\n- Broker 端参数 ***replica.lag.time.max.ms*** 参数值设置的是主从同步的最长间隔\n\n\n\n### Kafka为什么那么快\n\n* Kafka具有优秀的磁盘读写能力\n* 批量量处理。合并小的请求，然后以流的方式进行交互，直顶网络上限。\n* 请求采用多路复用的IO模型\n\n### Kafka请求是怎么处理\n\nKafka在TCP的基础上封装了一组请求协议，PRODUCR 请求用于生产消息，FETCH请求用于消费消息，METADATA请求是用于请求Kafka元数据\n\nKafka使用的是***Reactor***模式处理请求。\n\nReactor模式是事件驱动架构的一种实现方式，特别适合用于处理多个客户端并发向服务端发送请求的场景。\n\nclient   ----->  Reactor(Dispatcher) 公平分配  ------->read(网络线程池   ------>共享请求队列   ------>IO线程池  )   ------->decode  -----> 网络线程池请求响应队列\n\n### 幂等生产者和事务生产者是一回事吗？(kafka如何做到消息不会丢失，也不会被重复发送)\n\n\n\nkafka如何做到消息不会丢失，也不会被重复发送?\n\nKafka提供消息不会丢失，但可能被重复发送的可靠性保障：\n\n- 避免重复生产\n\n1.创建幂等性Producer，当Producer发送了具有相同字段的消息之后，Broker会知道这些消息已经重复，并在后台进行舍弃。原理是就是经典的空间换时间的优化思想，Broker会在后台多保存一些字段，消息上报时会进行字段内容的核对。\n\n幂等性 Producer的局限性：单分区幂等性、单会话幂等性\n\n事务型 Producer:事务型 Producer 能够保证将消息原子性地写入到多个分区中。这批消息要么全部写入成功，要么全部失败。(类似于数据库的串行化)\n\n### \n\n### 生产者压缩算法\n\n* 何时压缩：\n\n生产者端 和 Broker端\n\nBroker指定的压缩算法与生产者不一样时，Broker端需要先解压再依据自己的算法算法压缩。\n\n* 何时解压\n\n在consumer端获取的消息中有该消息的压缩算法\n\n### 无消息丢失配置怎么实现\n\nKafka只对 “已提交的消息”的消息做有限度的持久保证。\n\n* 可在一个或若干个Broker成功接收并写入日志文件后，会告诉生产者已提交\n\n生产者程序丢失数据：Producer永远要使用带有回调通知的发送API\n\n消费者程序丢失数据：维持先消费消息，再更新位移的顺序\n\n还有一个解决办法是，多线程异步处理消费信息，Consumer 程序不要开启自动提交位移，而是要应用程序手动提交位移\n\n总结：\n\n* 使用peoducer.send(msg,callback)\n* 设置acks=all\n* 设置retries为一个较大的值\n* 设置unclean.leader.election.enable=false\n* 设置replication.factor=3\n* 设置min.insynnc.relicas>1\n* 确保replication.factor>min.insynnc.relicas\n* 确保消息消费完成再提交\n\n### 客户端都有哪些不常见但是很高级的功能\n\nKafka 拦截器分为生产者拦截器和消费者拦截器\n\n* kafka拦截器的使用场景\n\nKafka 拦截器可以应用于包括客户端监控、端到端系统性能检测、消息审计等多种功能在内的场景\n\n\n\n### Java生产者是如何管理TCP连接\n\n* 为何采用TCP？\n  * 从社区的角度看，在开发客户端时能够利用TCP本身提供的一些高级特性：多路复用请求以及同时轮询多个连接的能力\n  * 目前已知的 HTTP 库在很多编程语言中都略显简陋\n* TCP连接何时创建？\n  * TCP 连接是在创建 KafkaProducer 实例时建立的\n  * 一个是在更新元数据后\n  * 在消息发送时\n* TCP连接何时关闭？\n  * 用户主动关闭\n  * Kafka自带关闭(TTL)\n\n### Java 消费者如何管理TCP连接\n\n* 何时创建TCP连接？\n  * TCP连接是在调用KafkaConsumer.poll 方法时被创建的\n    * 发起 FindCoordinator 请求时\n    * 连接协调者时\n    * 消费数据时\n* 创建多少个 TCP 连接？\n  * 确定协调者和获取集群元数据\n  * 连接协调者，令其执行组成员管理操作\n  * 执行实际的消息获取\n* 何时关闭连接？\n  * 手动调用 KafkaConsumer.close() 方法，或者是执行 Kill 命令\n  * Kafka 自动关闭，由消费者端参数 connection.max.idle.ms 控制的\n\n\n\n### 消费者组到底是什么?\n\nConsumer Group 是 Kafka 提供的可扩展且具有容错性的消费者机制\n\n传统消息引擎模型：点对点模型和发布 / 订阅模型\n\n点对点模型：消息一旦被消费，就会从队列中删除，而且只能被下游的一个consumer消费。\n\n缺点：伸缩性（scalability）很差，因为下游的多个 Consumer 都要“抢”这个共享消息队列的消息\n\n订阅模型: 允许消息被多个 Consumer 消费\n\n缺点：每个订阅者都必须要订阅主题的所有分区。这种全量订阅的方式既不灵活，也会影响消息的真实投递效果\n\n***Kafka 仅仅使用 Consumer Group 这一种机制，却同时实现了传统消息引擎系统的两大模型***\n\n***Rebalance*** 本质上是一种协议，规定了一个 Consumer Group 下的所有 Consumer 如何达成一致，来分配订阅 Topic 的每个分区\n\n\n\n触发重平衡的条件：\n\n1.组员数发生变更\n\n2.订阅主题数发生变更\n\n3.订阅主题的分区数发生变更\n\n### 揭开神秘的“唯一主题”面纱\n\nkafka自建位移主题保存consumer的消费位移\n\n位移主题中的Key保存的内容格式：<Group ID，主题名，分区号 >\n\n当 Kafka 集群中的第一个 Consumer 程序启动时，Kafka 会自动创建位移主题\n\n\n\n如果位移主题是 Kafka 自动创建的，那么该主题的分区数是 50，副本数是 3\n\n* 位移主题何时提交？\n  * 自动提交位移\n  * 手动提交位移\n\nKafka 提供了专门的后台线程定期地巡检待 Compact 的主题，看看是否存在满足条件的可删除数据\n\n### 消费组重平衡能避免吗 ?\n\n原理：\n\n同一个consumer Group下的所有consumer实例在协调者组件的帮助下完成订阅主题分区的分配\n\n\n\nBroker在启动时会开启相应的Coordinator组件，Broker所属的Coordinator组件与其可能不在同一个节点上。\n\nKafka 为某个 Consumer Group 确定 Coordinator 所在的 Broker 的算法：\n\n* 确定由位移主题的哪个分区来保存该Group数据\n* 找出该分区Leader副本所在的Broker,该Broker即为对应的Broker\n\n\n\n重平衡的弊端：\n\n* Rebalance影响Consumer端的TPS，因为重平衡期间消费者不可用\n* Rebalance很慢，业务将长时间不可用\n\n\n\n在真实的业务场景中，很多Rebalance都是计划外的或者说是不必要的。\n\n触发重平衡的条件：\n\n1.组员数发生变更\n\n2.订阅主题数发生变更\n\n3.订阅主题的分区数发生变更\n\n\n\n后两个都是运维层面的不可避免，但是组员数目可以避免。\n\n避免方式:\n\n* 避免consumer未能及时发送心跳而导致被剔除\n* 避免consumer消费时间过长\n\n### Kafka消息位移提交\n\nConsumer 需要为分配给它的每个分区提交各自的位移数据\n\n\n\n位移提交的语义保障是由你来负责的，Kafka 只会“无脑”地接受你提交的位移\n\n\n\n从用户的角度来说，位移提交分为自动提交和手动提交；从 Consumer 端的角度来说，位移提交分为同步提交和异步提交\n\n\n\nKafka提供的提交位移的方法：\n\n* 自动提交位移:\n\n可能会出现重复消费\n\n* 手动提交位移：\n\n  * 同步提交位移，提交过程中，consumer会处于阻塞状态，知道远端的Broker返回提交结果\n\n  * 异步提交位移，异步提交过程失败，重试并没有意义 因为消费的位移已经不是最新值\n\n    所以实际实践需要commitAsync() 避免程序阻塞，Consumer 要关闭前，我们调用 commitSync() 方法执行同步阻塞式的位移提交。\n\n* 精细化管理位移\n\n### CommitFailedException异常怎么处理？\n\n当消息处理的总时间超过预设的 max.poll.interval.ms 参数值时，Kafka Consumer 端会抛出 CommitFailedException 异常。\n\n处理：\n\n* 缩短单条消息处理的时间\n* 增加 Consumer 端允许下游系统消费一批消息的最大时长\n* 减少下游系统一次性消费的消息总数\n* 下游系统使用多线程来加速消费\n\n### 多线程开发消费者实例\n\n* Kafka Java Consumer 设计原理\n\n  * Kafka Consumer 是双线程的设计，分为用户主线程和心跳线程\n\n  * 原因：\n\n    1.老版本consumer的每个实例都为所订阅的主题分区创建对应的消息获取线程，同时也是阻塞式的，Consumer 实例启动后，内部会创建很多阻塞式的消息获取迭代器，但在很多场景下，Consumer 端是有非阻塞需求的，社区为新版本设计了单线程+轮询的机制\n\n    2.单线程的设计能够简化 Consumer 端的设计。Consumer 获取到消息后，处理消息的逻辑是否采用多线程，完全由你决定。\n\n* Kafka 多线程方案:\n\n  Kafka Consumer 类不是线程安全的 (thread-safe)。所有的网络 I/O 处理都是发生在用户主线程中，因此，你在使用过程中必须要确保线程安全。\n\n  * 消费者程序启动多个线程，每个线程维护专属的 kafka Consumer实例，负责完整的消息获取、消息处理流程。\n  * 消费者程序使用单或多线程获取消息，同时创建多个消费线程执行消息处理逻辑\n\n### 消费者组消费进度监控怎么实现？\n\n监控Kafka的滞后程度 Lag\n\n有三种方法监控：\n\n* Kafka自带命令\n* Kafka Java Consumer API\n* 使用 Kafka 自带的 JMX 监控指标\n\n### 消费者组重平衡全流程解析\n\n依赖消费端的心跳线程来通知其他消费者实例，当需要发生重平衡时，Broker会把需要重平衡的信号封装至心跳上报的响应体中。\n\n重平衡流程：\n\n* 新成员加入：\n  * 新成员分别发送JoinGroup 请求和 SyncGroup 请求把组员信息发送给调解者，由协调者作为节点的分配\n* 组员主动离组：\n  * 流程基本同新成员加入\n* 组员崩溃离组：\n  * 靠心跳线程检测组员状态，由协调者发起重平衡\n\n\n\n### Kafka控制器\n\n运行时只能有一个Broker作为控制器，第一个在zookeeper中创建controller节点的Broker会被指定为控制器\n\n控制器职责：\n\n* 主题管理(创建、删除、增加分区)\n* 分区重分配\n* Preferred领导者选举\n* 集群成员管理(新增Broker 、Broker主动关闭、Briker宕机)\n* 数据服务\n\n控制器单点故障转移由zookeeper的watch功能保证通知\n\n### 关于高水位和Leader Epoch\n\nKafka用高水位来表示Kafka中的消息位移，位移值小于高水位的表示已提交的数据，高于高水位的数据表示未提交信息，不能被消费者消费。\n\n高水位的作用：\n\n1.定义消息可见性，即用来标识分区下的哪些消息是可以被消费者消费的\n\n2.帮助Kafka完成副本同步\n\n\n\n### 管理和监控 skip\n\n\n\n### Kafka Stream与其他流处理平台的差异在哪\n\n* Kafka Stream最大的特色就是它不是一个平台，至少它不是一个具备完整功能的平台\n* 从应用部署方面来看，Kafka Stream倾向于将部署交给开发人员来做，而不是自己实现\n* Kafka Stream只支持与Kafka的集群的交换\n* Kafka Stream依赖Kafka的协调功能提供高容错性和高伸缩性\n\nKafka Stream与consumer的区别是Kafka Stream是实时流处理组件，提供了很多算子，可以实现更多复杂的业务\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Kafka核心技术","published":1,"updated":"2024-01-12T13:57:35.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrc892au00016xyw8sec2346","content":"<h3 id=\"生产者消息分区机制原理剖析\"><a href=\"#生产者消息分区机制原理剖析\" class=\"headerlink\" title=\"生产者消息分区机制原理剖析\"></a>生产者消息分区机制原理剖析</h3><p>Kafka的三级结构：主题 - 分区 - 消息</p>\n<ul>\n<li>为什么要分区？</li>\n</ul>\n<p>分区的作用是提供负载均衡的能力，不同的分区分布在不同的机器节点上，数据的读写都是针对分区的粒度进行。可通过增加机器来增加吞吐量</p>\n<ul>\n<li>都有哪些分区策略</li>\n</ul>\n<p>1、轮训策略</p>\n<p>2、随机策略</p>\n<p>3、消息键保序策略</p>\n<p>分区是实现负载均衡以及高吞吐量的关键，故在生产者这一端就要仔细盘算合适的分区策略，避免造成数据倾斜，使得某些分区成为性能瓶颈。</p>\n<h3 id=\"Kafka副本机制详解\"><a href=\"#Kafka副本机制详解\" class=\"headerlink\" title=\"Kafka副本机制详解\"></a>Kafka副本机制详解</h3><p>Kafka副本机制的好处：</p>\n<ul>\n<li>提供数据冗余</li>\n</ul>\n<p>同一个分区下的所有副本保存有相同的消息序列，这些副本分散保存在不同的Broker上，从而能对抗部分Broker宕机带来的数据不可用</p>\n<p>数据同步机制：</p>\n<p>同个分区下的不同副本基于领导者的副本机制进行数据同步,从副本只负责同步数据，不负责对外的读写工作。</p>\n<p>原因：</p>\n<ul>\n<li>方便实现“Read-your-writes”</li>\n<li>方便实现单调读（Monotonic Reads）</li>\n</ul>\n<p>主从分区实现数据同步的保证：<em><strong>In-sync Replicas</strong></em>机制</p>\n<ul>\n<li>Broker 端参数 <em><strong>replica.lag.time.max.ms</strong></em> 参数值设置的是主从同步的最长间隔</li>\n</ul>\n<h3 id=\"Kafka为什么那么快\"><a href=\"#Kafka为什么那么快\" class=\"headerlink\" title=\"Kafka为什么那么快\"></a>Kafka为什么那么快</h3><ul>\n<li>Kafka具有优秀的磁盘读写能力</li>\n<li>批量量处理。合并小的请求，然后以流的方式进行交互，直顶网络上限。</li>\n<li>请求采用多路复用的IO模型</li>\n</ul>\n<h3 id=\"Kafka请求是怎么处理\"><a href=\"#Kafka请求是怎么处理\" class=\"headerlink\" title=\"Kafka请求是怎么处理\"></a>Kafka请求是怎么处理</h3><p>Kafka在TCP的基础上封装了一组请求协议，PRODUCR 请求用于生产消息，FETCH请求用于消费消息，METADATA请求是用于请求Kafka元数据</p>\n<p>Kafka使用的是<em><strong>Reactor</strong></em>模式处理请求。</p>\n<p>Reactor模式是事件驱动架构的一种实现方式，特别适合用于处理多个客户端并发向服务端发送请求的场景。</p>\n<p>client   —–&gt;  Reactor(Dispatcher) 公平分配  ——-&gt;read(网络线程池   ——&gt;共享请求队列   ——&gt;IO线程池  )   ——-&gt;decode  —–&gt; 网络线程池请求响应队列</p>\n<h3 id=\"幂等生产者和事务生产者是一回事吗？-kafka如何做到消息不会丢失，也不会被重复发送\"><a href=\"#幂等生产者和事务生产者是一回事吗？-kafka如何做到消息不会丢失，也不会被重复发送\" class=\"headerlink\" title=\"幂等生产者和事务生产者是一回事吗？(kafka如何做到消息不会丢失，也不会被重复发送)\"></a>幂等生产者和事务生产者是一回事吗？(kafka如何做到消息不会丢失，也不会被重复发送)</h3><p>kafka如何做到消息不会丢失，也不会被重复发送?</p>\n<p>Kafka提供消息不会丢失，但可能被重复发送的可靠性保障：</p>\n<ul>\n<li>避免重复生产</li>\n</ul>\n<p>1.创建幂等性Producer，当Producer发送了具有相同字段的消息之后，Broker会知道这些消息已经重复，并在后台进行舍弃。原理是就是经典的空间换时间的优化思想，Broker会在后台多保存一些字段，消息上报时会进行字段内容的核对。</p>\n<p>幂等性 Producer的局限性：单分区幂等性、单会话幂等性</p>\n<p>事务型 Producer:事务型 Producer 能够保证将消息原子性地写入到多个分区中。这批消息要么全部写入成功，要么全部失败。(类似于数据库的串行化)</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"生产者压缩算法\"><a href=\"#生产者压缩算法\" class=\"headerlink\" title=\"生产者压缩算法\"></a>生产者压缩算法</h3><ul>\n<li>何时压缩：</li>\n</ul>\n<p>生产者端 和 Broker端</p>\n<p>Broker指定的压缩算法与生产者不一样时，Broker端需要先解压再依据自己的算法算法压缩。</p>\n<ul>\n<li>何时解压</li>\n</ul>\n<p>在consumer端获取的消息中有该消息的压缩算法</p>\n<h3 id=\"无消息丢失配置怎么实现\"><a href=\"#无消息丢失配置怎么实现\" class=\"headerlink\" title=\"无消息丢失配置怎么实现\"></a>无消息丢失配置怎么实现</h3><p>Kafka只对 “已提交的消息”的消息做有限度的持久保证。</p>\n<ul>\n<li>可在一个或若干个Broker成功接收并写入日志文件后，会告诉生产者已提交</li>\n</ul>\n<p>生产者程序丢失数据：Producer永远要使用带有回调通知的发送API</p>\n<p>消费者程序丢失数据：维持先消费消息，再更新位移的顺序</p>\n<p>还有一个解决办法是，多线程异步处理消费信息，Consumer 程序不要开启自动提交位移，而是要应用程序手动提交位移</p>\n<p>总结：</p>\n<ul>\n<li>使用peoducer.send(msg,callback)</li>\n<li>设置acks=all</li>\n<li>设置retries为一个较大的值</li>\n<li>设置unclean.leader.election.enable=false</li>\n<li>设置replication.factor=3</li>\n<li>设置min.insynnc.relicas&gt;1</li>\n<li>确保replication.factor&gt;min.insynnc.relicas</li>\n<li>确保消息消费完成再提交</li>\n</ul>\n<h3 id=\"客户端都有哪些不常见但是很高级的功能\"><a href=\"#客户端都有哪些不常见但是很高级的功能\" class=\"headerlink\" title=\"客户端都有哪些不常见但是很高级的功能\"></a>客户端都有哪些不常见但是很高级的功能</h3><p>Kafka 拦截器分为生产者拦截器和消费者拦截器</p>\n<ul>\n<li>kafka拦截器的使用场景</li>\n</ul>\n<p>Kafka 拦截器可以应用于包括客户端监控、端到端系统性能检测、消息审计等多种功能在内的场景</p>\n<h3 id=\"Java生产者是如何管理TCP连接\"><a href=\"#Java生产者是如何管理TCP连接\" class=\"headerlink\" title=\"Java生产者是如何管理TCP连接\"></a>Java生产者是如何管理TCP连接</h3><ul>\n<li>为何采用TCP？<ul>\n<li>从社区的角度看，在开发客户端时能够利用TCP本身提供的一些高级特性：多路复用请求以及同时轮询多个连接的能力</li>\n<li>目前已知的 HTTP 库在很多编程语言中都略显简陋</li>\n</ul>\n</li>\n<li>TCP连接何时创建？<ul>\n<li>TCP 连接是在创建 KafkaProducer 实例时建立的</li>\n<li>一个是在更新元数据后</li>\n<li>在消息发送时</li>\n</ul>\n</li>\n<li>TCP连接何时关闭？<ul>\n<li>用户主动关闭</li>\n<li>Kafka自带关闭(TTL)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Java-消费者如何管理TCP连接\"><a href=\"#Java-消费者如何管理TCP连接\" class=\"headerlink\" title=\"Java 消费者如何管理TCP连接\"></a>Java 消费者如何管理TCP连接</h3><ul>\n<li>何时创建TCP连接？<ul>\n<li>TCP连接是在调用KafkaConsumer.poll 方法时被创建的<ul>\n<li>发起 FindCoordinator 请求时</li>\n<li>连接协调者时</li>\n<li>消费数据时</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>创建多少个 TCP 连接？<ul>\n<li>确定协调者和获取集群元数据</li>\n<li>连接协调者，令其执行组成员管理操作</li>\n<li>执行实际的消息获取</li>\n</ul>\n</li>\n<li>何时关闭连接？<ul>\n<li>手动调用 KafkaConsumer.close() 方法，或者是执行 Kill 命令</li>\n<li>Kafka 自动关闭，由消费者端参数 connection.max.idle.ms 控制的</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"消费者组到底是什么\"><a href=\"#消费者组到底是什么\" class=\"headerlink\" title=\"消费者组到底是什么?\"></a>消费者组到底是什么?</h3><p>Consumer Group 是 Kafka 提供的可扩展且具有容错性的消费者机制</p>\n<p>传统消息引擎模型：点对点模型和发布 / 订阅模型</p>\n<p>点对点模型：消息一旦被消费，就会从队列中删除，而且只能被下游的一个consumer消费。</p>\n<p>缺点：伸缩性（scalability）很差，因为下游的多个 Consumer 都要“抢”这个共享消息队列的消息</p>\n<p>订阅模型: 允许消息被多个 Consumer 消费</p>\n<p>缺点：每个订阅者都必须要订阅主题的所有分区。这种全量订阅的方式既不灵活，也会影响消息的真实投递效果</p>\n<p><em><strong>Kafka 仅仅使用 Consumer Group 这一种机制，却同时实现了传统消息引擎系统的两大模型</strong></em></p>\n<p><em><strong>Rebalance</strong></em> 本质上是一种协议，规定了一个 Consumer Group 下的所有 Consumer 如何达成一致，来分配订阅 Topic 的每个分区</p>\n<p>触发重平衡的条件：</p>\n<p>1.组员数发生变更</p>\n<p>2.订阅主题数发生变更</p>\n<p>3.订阅主题的分区数发生变更</p>\n<h3 id=\"揭开神秘的“唯一主题”面纱\"><a href=\"#揭开神秘的“唯一主题”面纱\" class=\"headerlink\" title=\"揭开神秘的“唯一主题”面纱\"></a>揭开神秘的“唯一主题”面纱</h3><p>kafka自建位移主题保存consumer的消费位移</p>\n<p>位移主题中的Key保存的内容格式：&lt;Group ID，主题名，分区号 &gt;</p>\n<p>当 Kafka 集群中的第一个 Consumer 程序启动时，Kafka 会自动创建位移主题</p>\n<p>如果位移主题是 Kafka 自动创建的，那么该主题的分区数是 50，副本数是 3</p>\n<ul>\n<li>位移主题何时提交？<ul>\n<li>自动提交位移</li>\n<li>手动提交位移</li>\n</ul>\n</li>\n</ul>\n<p>Kafka 提供了专门的后台线程定期地巡检待 Compact 的主题，看看是否存在满足条件的可删除数据</p>\n<h3 id=\"消费组重平衡能避免吗\"><a href=\"#消费组重平衡能避免吗\" class=\"headerlink\" title=\"消费组重平衡能避免吗 ?\"></a>消费组重平衡能避免吗 ?</h3><p>原理：</p>\n<p>同一个consumer Group下的所有consumer实例在协调者组件的帮助下完成订阅主题分区的分配</p>\n<p>Broker在启动时会开启相应的Coordinator组件，Broker所属的Coordinator组件与其可能不在同一个节点上。</p>\n<p>Kafka 为某个 Consumer Group 确定 Coordinator 所在的 Broker 的算法：</p>\n<ul>\n<li>确定由位移主题的哪个分区来保存该Group数据</li>\n<li>找出该分区Leader副本所在的Broker,该Broker即为对应的Broker</li>\n</ul>\n<p>重平衡的弊端：</p>\n<ul>\n<li>Rebalance影响Consumer端的TPS，因为重平衡期间消费者不可用</li>\n<li>Rebalance很慢，业务将长时间不可用</li>\n</ul>\n<p>在真实的业务场景中，很多Rebalance都是计划外的或者说是不必要的。</p>\n<p>触发重平衡的条件：</p>\n<p>1.组员数发生变更</p>\n<p>2.订阅主题数发生变更</p>\n<p>3.订阅主题的分区数发生变更</p>\n<p>后两个都是运维层面的不可避免，但是组员数目可以避免。</p>\n<p>避免方式:</p>\n<ul>\n<li>避免consumer未能及时发送心跳而导致被剔除</li>\n<li>避免consumer消费时间过长</li>\n</ul>\n<h3 id=\"Kafka消息位移提交\"><a href=\"#Kafka消息位移提交\" class=\"headerlink\" title=\"Kafka消息位移提交\"></a>Kafka消息位移提交</h3><p>Consumer 需要为分配给它的每个分区提交各自的位移数据</p>\n<p>位移提交的语义保障是由你来负责的，Kafka 只会“无脑”地接受你提交的位移</p>\n<p>从用户的角度来说，位移提交分为自动提交和手动提交；从 Consumer 端的角度来说，位移提交分为同步提交和异步提交</p>\n<p>Kafka提供的提交位移的方法：</p>\n<ul>\n<li>自动提交位移:</li>\n</ul>\n<p>可能会出现重复消费</p>\n<ul>\n<li><p>手动提交位移：</p>\n<ul>\n<li><p>同步提交位移，提交过程中，consumer会处于阻塞状态，知道远端的Broker返回提交结果</p>\n</li>\n<li><p>异步提交位移，异步提交过程失败，重试并没有意义 因为消费的位移已经不是最新值</p>\n<p>所以实际实践需要commitAsync() 避免程序阻塞，Consumer 要关闭前，我们调用 commitSync() 方法执行同步阻塞式的位移提交。</p>\n</li>\n</ul>\n</li>\n<li><p>精细化管理位移</p>\n</li>\n</ul>\n<h3 id=\"CommitFailedException异常怎么处理？\"><a href=\"#CommitFailedException异常怎么处理？\" class=\"headerlink\" title=\"CommitFailedException异常怎么处理？\"></a>CommitFailedException异常怎么处理？</h3><p>当消息处理的总时间超过预设的 max.poll.interval.ms 参数值时，Kafka Consumer 端会抛出 CommitFailedException 异常。</p>\n<p>处理：</p>\n<ul>\n<li>缩短单条消息处理的时间</li>\n<li>增加 Consumer 端允许下游系统消费一批消息的最大时长</li>\n<li>减少下游系统一次性消费的消息总数</li>\n<li>下游系统使用多线程来加速消费</li>\n</ul>\n<h3 id=\"多线程开发消费者实例\"><a href=\"#多线程开发消费者实例\" class=\"headerlink\" title=\"多线程开发消费者实例\"></a>多线程开发消费者实例</h3><ul>\n<li><p>Kafka Java Consumer 设计原理</p>\n<ul>\n<li><p>Kafka Consumer 是双线程的设计，分为用户主线程和心跳线程</p>\n</li>\n<li><p>原因：</p>\n<p>1.老版本consumer的每个实例都为所订阅的主题分区创建对应的消息获取线程，同时也是阻塞式的，Consumer 实例启动后，内部会创建很多阻塞式的消息获取迭代器，但在很多场景下，Consumer 端是有非阻塞需求的，社区为新版本设计了单线程+轮询的机制</p>\n<p>2.单线程的设计能够简化 Consumer 端的设计。Consumer 获取到消息后，处理消息的逻辑是否采用多线程，完全由你决定。</p>\n</li>\n</ul>\n</li>\n<li><p>Kafka 多线程方案:</p>\n<p>Kafka Consumer 类不是线程安全的 (thread-safe)。所有的网络 I/O 处理都是发生在用户主线程中，因此，你在使用过程中必须要确保线程安全。</p>\n<ul>\n<li>消费者程序启动多个线程，每个线程维护专属的 kafka Consumer实例，负责完整的消息获取、消息处理流程。</li>\n<li>消费者程序使用单或多线程获取消息，同时创建多个消费线程执行消息处理逻辑</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"消费者组消费进度监控怎么实现？\"><a href=\"#消费者组消费进度监控怎么实现？\" class=\"headerlink\" title=\"消费者组消费进度监控怎么实现？\"></a>消费者组消费进度监控怎么实现？</h3><p>监控Kafka的滞后程度 Lag</p>\n<p>有三种方法监控：</p>\n<ul>\n<li>Kafka自带命令</li>\n<li>Kafka Java Consumer API</li>\n<li>使用 Kafka 自带的 JMX 监控指标</li>\n</ul>\n<h3 id=\"消费者组重平衡全流程解析\"><a href=\"#消费者组重平衡全流程解析\" class=\"headerlink\" title=\"消费者组重平衡全流程解析\"></a>消费者组重平衡全流程解析</h3><p>依赖消费端的心跳线程来通知其他消费者实例，当需要发生重平衡时，Broker会把需要重平衡的信号封装至心跳上报的响应体中。</p>\n<p>重平衡流程：</p>\n<ul>\n<li>新成员加入：<ul>\n<li>新成员分别发送JoinGroup 请求和 SyncGroup 请求把组员信息发送给调解者，由协调者作为节点的分配</li>\n</ul>\n</li>\n<li>组员主动离组：<ul>\n<li>流程基本同新成员加入</li>\n</ul>\n</li>\n<li>组员崩溃离组：<ul>\n<li>靠心跳线程检测组员状态，由协调者发起重平衡</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Kafka控制器\"><a href=\"#Kafka控制器\" class=\"headerlink\" title=\"Kafka控制器\"></a>Kafka控制器</h3><p>运行时只能有一个Broker作为控制器，第一个在zookeeper中创建controller节点的Broker会被指定为控制器</p>\n<p>控制器职责：</p>\n<ul>\n<li>主题管理(创建、删除、增加分区)</li>\n<li>分区重分配</li>\n<li>Preferred领导者选举</li>\n<li>集群成员管理(新增Broker 、Broker主动关闭、Briker宕机)</li>\n<li>数据服务</li>\n</ul>\n<p>控制器单点故障转移由zookeeper的watch功能保证通知</p>\n<h3 id=\"关于高水位和Leader-Epoch\"><a href=\"#关于高水位和Leader-Epoch\" class=\"headerlink\" title=\"关于高水位和Leader Epoch\"></a>关于高水位和Leader Epoch</h3><p>Kafka用高水位来表示Kafka中的消息位移，位移值小于高水位的表示已提交的数据，高于高水位的数据表示未提交信息，不能被消费者消费。</p>\n<p>高水位的作用：</p>\n<p>1.定义消息可见性，即用来标识分区下的哪些消息是可以被消费者消费的</p>\n<p>2.帮助Kafka完成副本同步</p>\n<h3 id=\"管理和监控-skip\"><a href=\"#管理和监控-skip\" class=\"headerlink\" title=\"管理和监控 skip\"></a>管理和监控 skip</h3><h3 id=\"Kafka-Stream与其他流处理平台的差异在哪\"><a href=\"#Kafka-Stream与其他流处理平台的差异在哪\" class=\"headerlink\" title=\"Kafka Stream与其他流处理平台的差异在哪\"></a>Kafka Stream与其他流处理平台的差异在哪</h3><ul>\n<li>Kafka Stream最大的特色就是它不是一个平台，至少它不是一个具备完整功能的平台</li>\n<li>从应用部署方面来看，Kafka Stream倾向于将部署交给开发人员来做，而不是自己实现</li>\n<li>Kafka Stream只支持与Kafka的集群的交换</li>\n<li>Kafka Stream依赖Kafka的协调功能提供高容错性和高伸缩性</li>\n</ul>\n<p>Kafka Stream与consumer的区别是Kafka Stream是实时流处理组件，提供了很多算子，可以实现更多复杂的业务</p>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h3 id=\"生产者消息分区机制原理剖析\"><a href=\"#生产者消息分区机制原理剖析\" class=\"headerlink\" title=\"生产者消息分区机制原理剖析\"></a>生产者消息分区机制原理剖析</h3><p>Kafka的三级结构：主题 - 分区 - 消息</p>\n<ul>\n<li>为什么要分区？</li>\n</ul>\n<p>分区的作用是提供负载均衡的能力，不同的分区分布在不同的机器节点上，数据的读写都是针对分区的粒度进行。可通过增加机器来增加吞吐量</p>\n<ul>\n<li>都有哪些分区策略</li>\n</ul>\n<p>1、轮训策略</p>\n<p>2、随机策略</p>\n<p>3、消息键保序策略</p>\n<p>分区是实现负载均衡以及高吞吐量的关键，故在生产者这一端就要仔细盘算合适的分区策略，避免造成数据倾斜，使得某些分区成为性能瓶颈。</p>\n<h3 id=\"Kafka副本机制详解\"><a href=\"#Kafka副本机制详解\" class=\"headerlink\" title=\"Kafka副本机制详解\"></a>Kafka副本机制详解</h3><p>Kafka副本机制的好处：</p>\n<ul>\n<li>提供数据冗余</li>\n</ul>\n<p>同一个分区下的所有副本保存有相同的消息序列，这些副本分散保存在不同的Broker上，从而能对抗部分Broker宕机带来的数据不可用</p>\n<p>数据同步机制：</p>\n<p>同个分区下的不同副本基于领导者的副本机制进行数据同步,从副本只负责同步数据，不负责对外的读写工作。</p>\n<p>原因：</p>\n<ul>\n<li>方便实现“Read-your-writes”</li>\n<li>方便实现单调读（Monotonic Reads）</li>\n</ul>\n<p>主从分区实现数据同步的保证：<em><strong>In-sync Replicas</strong></em>机制</p>\n<ul>\n<li>Broker 端参数 <em><strong>replica.lag.time.max.ms</strong></em> 参数值设置的是主从同步的最长间隔</li>\n</ul>\n<h3 id=\"Kafka为什么那么快\"><a href=\"#Kafka为什么那么快\" class=\"headerlink\" title=\"Kafka为什么那么快\"></a>Kafka为什么那么快</h3><ul>\n<li>Kafka具有优秀的磁盘读写能力</li>\n<li>批量量处理。合并小的请求，然后以流的方式进行交互，直顶网络上限。</li>\n<li>请求采用多路复用的IO模型</li>\n</ul>\n<h3 id=\"Kafka请求是怎么处理\"><a href=\"#Kafka请求是怎么处理\" class=\"headerlink\" title=\"Kafka请求是怎么处理\"></a>Kafka请求是怎么处理</h3><p>Kafka在TCP的基础上封装了一组请求协议，PRODUCR 请求用于生产消息，FETCH请求用于消费消息，METADATA请求是用于请求Kafka元数据</p>\n<p>Kafka使用的是<em><strong>Reactor</strong></em>模式处理请求。</p>\n<p>Reactor模式是事件驱动架构的一种实现方式，特别适合用于处理多个客户端并发向服务端发送请求的场景。</p>\n<p>client   —–&gt;  Reactor(Dispatcher) 公平分配  ——-&gt;read(网络线程池   ——&gt;共享请求队列   ——&gt;IO线程池  )   ——-&gt;decode  —–&gt; 网络线程池请求响应队列</p>\n<h3 id=\"幂等生产者和事务生产者是一回事吗？-kafka如何做到消息不会丢失，也不会被重复发送\"><a href=\"#幂等生产者和事务生产者是一回事吗？-kafka如何做到消息不会丢失，也不会被重复发送\" class=\"headerlink\" title=\"幂等生产者和事务生产者是一回事吗？(kafka如何做到消息不会丢失，也不会被重复发送)\"></a>幂等生产者和事务生产者是一回事吗？(kafka如何做到消息不会丢失，也不会被重复发送)</h3><p>kafka如何做到消息不会丢失，也不会被重复发送?</p>\n<p>Kafka提供消息不会丢失，但可能被重复发送的可靠性保障：</p>\n<ul>\n<li>避免重复生产</li>\n</ul>\n<p>1.创建幂等性Producer，当Producer发送了具有相同字段的消息之后，Broker会知道这些消息已经重复，并在后台进行舍弃。原理是就是经典的空间换时间的优化思想，Broker会在后台多保存一些字段，消息上报时会进行字段内容的核对。</p>\n<p>幂等性 Producer的局限性：单分区幂等性、单会话幂等性</p>\n<p>事务型 Producer:事务型 Producer 能够保证将消息原子性地写入到多个分区中。这批消息要么全部写入成功，要么全部失败。(类似于数据库的串行化)</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"生产者压缩算法\"><a href=\"#生产者压缩算法\" class=\"headerlink\" title=\"生产者压缩算法\"></a>生产者压缩算法</h3><ul>\n<li>何时压缩：</li>\n</ul>\n<p>生产者端 和 Broker端</p>\n<p>Broker指定的压缩算法与生产者不一样时，Broker端需要先解压再依据自己的算法算法压缩。</p>\n<ul>\n<li>何时解压</li>\n</ul>\n<p>在consumer端获取的消息中有该消息的压缩算法</p>\n<h3 id=\"无消息丢失配置怎么实现\"><a href=\"#无消息丢失配置怎么实现\" class=\"headerlink\" title=\"无消息丢失配置怎么实现\"></a>无消息丢失配置怎么实现</h3><p>Kafka只对 “已提交的消息”的消息做有限度的持久保证。</p>\n<ul>\n<li>可在一个或若干个Broker成功接收并写入日志文件后，会告诉生产者已提交</li>\n</ul>\n<p>生产者程序丢失数据：Producer永远要使用带有回调通知的发送API</p>\n<p>消费者程序丢失数据：维持先消费消息，再更新位移的顺序</p>\n<p>还有一个解决办法是，多线程异步处理消费信息，Consumer 程序不要开启自动提交位移，而是要应用程序手动提交位移</p>\n<p>总结：</p>\n<ul>\n<li>使用peoducer.send(msg,callback)</li>\n<li>设置acks&#x3D;all</li>\n<li>设置retries为一个较大的值</li>\n<li>设置unclean.leader.election.enable&#x3D;false</li>\n<li>设置replication.factor&#x3D;3</li>\n<li>设置min.insynnc.relicas&gt;1</li>\n<li>确保replication.factor&gt;min.insynnc.relicas</li>\n<li>确保消息消费完成再提交</li>\n</ul>\n<h3 id=\"客户端都有哪些不常见但是很高级的功能\"><a href=\"#客户端都有哪些不常见但是很高级的功能\" class=\"headerlink\" title=\"客户端都有哪些不常见但是很高级的功能\"></a>客户端都有哪些不常见但是很高级的功能</h3><p>Kafka 拦截器分为生产者拦截器和消费者拦截器</p>\n<ul>\n<li>kafka拦截器的使用场景</li>\n</ul>\n<p>Kafka 拦截器可以应用于包括客户端监控、端到端系统性能检测、消息审计等多种功能在内的场景</p>\n<h3 id=\"Java生产者是如何管理TCP连接\"><a href=\"#Java生产者是如何管理TCP连接\" class=\"headerlink\" title=\"Java生产者是如何管理TCP连接\"></a>Java生产者是如何管理TCP连接</h3><ul>\n<li>为何采用TCP？<ul>\n<li>从社区的角度看，在开发客户端时能够利用TCP本身提供的一些高级特性：多路复用请求以及同时轮询多个连接的能力</li>\n<li>目前已知的 HTTP 库在很多编程语言中都略显简陋</li>\n</ul>\n</li>\n<li>TCP连接何时创建？<ul>\n<li>TCP 连接是在创建 KafkaProducer 实例时建立的</li>\n<li>一个是在更新元数据后</li>\n<li>在消息发送时</li>\n</ul>\n</li>\n<li>TCP连接何时关闭？<ul>\n<li>用户主动关闭</li>\n<li>Kafka自带关闭(TTL)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Java-消费者如何管理TCP连接\"><a href=\"#Java-消费者如何管理TCP连接\" class=\"headerlink\" title=\"Java 消费者如何管理TCP连接\"></a>Java 消费者如何管理TCP连接</h3><ul>\n<li>何时创建TCP连接？<ul>\n<li>TCP连接是在调用KafkaConsumer.poll 方法时被创建的<ul>\n<li>发起 FindCoordinator 请求时</li>\n<li>连接协调者时</li>\n<li>消费数据时</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>创建多少个 TCP 连接？<ul>\n<li>确定协调者和获取集群元数据</li>\n<li>连接协调者，令其执行组成员管理操作</li>\n<li>执行实际的消息获取</li>\n</ul>\n</li>\n<li>何时关闭连接？<ul>\n<li>手动调用 KafkaConsumer.close() 方法，或者是执行 Kill 命令</li>\n<li>Kafka 自动关闭，由消费者端参数 connection.max.idle.ms 控制的</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"消费者组到底是什么\"><a href=\"#消费者组到底是什么\" class=\"headerlink\" title=\"消费者组到底是什么?\"></a>消费者组到底是什么?</h3><p>Consumer Group 是 Kafka 提供的可扩展且具有容错性的消费者机制</p>\n<p>传统消息引擎模型：点对点模型和发布 &#x2F; 订阅模型</p>\n<p>点对点模型：消息一旦被消费，就会从队列中删除，而且只能被下游的一个consumer消费。</p>\n<p>缺点：伸缩性（scalability）很差，因为下游的多个 Consumer 都要“抢”这个共享消息队列的消息</p>\n<p>订阅模型: 允许消息被多个 Consumer 消费</p>\n<p>缺点：每个订阅者都必须要订阅主题的所有分区。这种全量订阅的方式既不灵活，也会影响消息的真实投递效果</p>\n<p><em><strong>Kafka 仅仅使用 Consumer Group 这一种机制，却同时实现了传统消息引擎系统的两大模型</strong></em></p>\n<p><em><strong>Rebalance</strong></em> 本质上是一种协议，规定了一个 Consumer Group 下的所有 Consumer 如何达成一致，来分配订阅 Topic 的每个分区</p>\n<p>触发重平衡的条件：</p>\n<p>1.组员数发生变更</p>\n<p>2.订阅主题数发生变更</p>\n<p>3.订阅主题的分区数发生变更</p>\n<h3 id=\"揭开神秘的“唯一主题”面纱\"><a href=\"#揭开神秘的“唯一主题”面纱\" class=\"headerlink\" title=\"揭开神秘的“唯一主题”面纱\"></a>揭开神秘的“唯一主题”面纱</h3><p>kafka自建位移主题保存consumer的消费位移</p>\n<p>位移主题中的Key保存的内容格式：&lt;Group ID，主题名，分区号 &gt;</p>\n<p>当 Kafka 集群中的第一个 Consumer 程序启动时，Kafka 会自动创建位移主题</p>\n<p>如果位移主题是 Kafka 自动创建的，那么该主题的分区数是 50，副本数是 3</p>\n<ul>\n<li>位移主题何时提交？<ul>\n<li>自动提交位移</li>\n<li>手动提交位移</li>\n</ul>\n</li>\n</ul>\n<p>Kafka 提供了专门的后台线程定期地巡检待 Compact 的主题，看看是否存在满足条件的可删除数据</p>\n<h3 id=\"消费组重平衡能避免吗\"><a href=\"#消费组重平衡能避免吗\" class=\"headerlink\" title=\"消费组重平衡能避免吗 ?\"></a>消费组重平衡能避免吗 ?</h3><p>原理：</p>\n<p>同一个consumer Group下的所有consumer实例在协调者组件的帮助下完成订阅主题分区的分配</p>\n<p>Broker在启动时会开启相应的Coordinator组件，Broker所属的Coordinator组件与其可能不在同一个节点上。</p>\n<p>Kafka 为某个 Consumer Group 确定 Coordinator 所在的 Broker 的算法：</p>\n<ul>\n<li>确定由位移主题的哪个分区来保存该Group数据</li>\n<li>找出该分区Leader副本所在的Broker,该Broker即为对应的Broker</li>\n</ul>\n<p>重平衡的弊端：</p>\n<ul>\n<li>Rebalance影响Consumer端的TPS，因为重平衡期间消费者不可用</li>\n<li>Rebalance很慢，业务将长时间不可用</li>\n</ul>\n<p>在真实的业务场景中，很多Rebalance都是计划外的或者说是不必要的。</p>\n<p>触发重平衡的条件：</p>\n<p>1.组员数发生变更</p>\n<p>2.订阅主题数发生变更</p>\n<p>3.订阅主题的分区数发生变更</p>\n<p>后两个都是运维层面的不可避免，但是组员数目可以避免。</p>\n<p>避免方式:</p>\n<ul>\n<li>避免consumer未能及时发送心跳而导致被剔除</li>\n<li>避免consumer消费时间过长</li>\n</ul>\n<h3 id=\"Kafka消息位移提交\"><a href=\"#Kafka消息位移提交\" class=\"headerlink\" title=\"Kafka消息位移提交\"></a>Kafka消息位移提交</h3><p>Consumer 需要为分配给它的每个分区提交各自的位移数据</p>\n<p>位移提交的语义保障是由你来负责的，Kafka 只会“无脑”地接受你提交的位移</p>\n<p>从用户的角度来说，位移提交分为自动提交和手动提交；从 Consumer 端的角度来说，位移提交分为同步提交和异步提交</p>\n<p>Kafka提供的提交位移的方法：</p>\n<ul>\n<li>自动提交位移:</li>\n</ul>\n<p>可能会出现重复消费</p>\n<ul>\n<li><p>手动提交位移：</p>\n<ul>\n<li><p>同步提交位移，提交过程中，consumer会处于阻塞状态，知道远端的Broker返回提交结果</p>\n</li>\n<li><p>异步提交位移，异步提交过程失败，重试并没有意义 因为消费的位移已经不是最新值</p>\n<p>所以实际实践需要commitAsync() 避免程序阻塞，Consumer 要关闭前，我们调用 commitSync() 方法执行同步阻塞式的位移提交。</p>\n</li>\n</ul>\n</li>\n<li><p>精细化管理位移</p>\n</li>\n</ul>\n<h3 id=\"CommitFailedException异常怎么处理？\"><a href=\"#CommitFailedException异常怎么处理？\" class=\"headerlink\" title=\"CommitFailedException异常怎么处理？\"></a>CommitFailedException异常怎么处理？</h3><p>当消息处理的总时间超过预设的 max.poll.interval.ms 参数值时，Kafka Consumer 端会抛出 CommitFailedException 异常。</p>\n<p>处理：</p>\n<ul>\n<li>缩短单条消息处理的时间</li>\n<li>增加 Consumer 端允许下游系统消费一批消息的最大时长</li>\n<li>减少下游系统一次性消费的消息总数</li>\n<li>下游系统使用多线程来加速消费</li>\n</ul>\n<h3 id=\"多线程开发消费者实例\"><a href=\"#多线程开发消费者实例\" class=\"headerlink\" title=\"多线程开发消费者实例\"></a>多线程开发消费者实例</h3><ul>\n<li><p>Kafka Java Consumer 设计原理</p>\n<ul>\n<li><p>Kafka Consumer 是双线程的设计，分为用户主线程和心跳线程</p>\n</li>\n<li><p>原因：</p>\n<p>1.老版本consumer的每个实例都为所订阅的主题分区创建对应的消息获取线程，同时也是阻塞式的，Consumer 实例启动后，内部会创建很多阻塞式的消息获取迭代器，但在很多场景下，Consumer 端是有非阻塞需求的，社区为新版本设计了单线程+轮询的机制</p>\n<p>2.单线程的设计能够简化 Consumer 端的设计。Consumer 获取到消息后，处理消息的逻辑是否采用多线程，完全由你决定。</p>\n</li>\n</ul>\n</li>\n<li><p>Kafka 多线程方案:</p>\n<p>Kafka Consumer 类不是线程安全的 (thread-safe)。所有的网络 I&#x2F;O 处理都是发生在用户主线程中，因此，你在使用过程中必须要确保线程安全。</p>\n<ul>\n<li>消费者程序启动多个线程，每个线程维护专属的 kafka Consumer实例，负责完整的消息获取、消息处理流程。</li>\n<li>消费者程序使用单或多线程获取消息，同时创建多个消费线程执行消息处理逻辑</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"消费者组消费进度监控怎么实现？\"><a href=\"#消费者组消费进度监控怎么实现？\" class=\"headerlink\" title=\"消费者组消费进度监控怎么实现？\"></a>消费者组消费进度监控怎么实现？</h3><p>监控Kafka的滞后程度 Lag</p>\n<p>有三种方法监控：</p>\n<ul>\n<li>Kafka自带命令</li>\n<li>Kafka Java Consumer API</li>\n<li>使用 Kafka 自带的 JMX 监控指标</li>\n</ul>\n<h3 id=\"消费者组重平衡全流程解析\"><a href=\"#消费者组重平衡全流程解析\" class=\"headerlink\" title=\"消费者组重平衡全流程解析\"></a>消费者组重平衡全流程解析</h3><p>依赖消费端的心跳线程来通知其他消费者实例，当需要发生重平衡时，Broker会把需要重平衡的信号封装至心跳上报的响应体中。</p>\n<p>重平衡流程：</p>\n<ul>\n<li>新成员加入：<ul>\n<li>新成员分别发送JoinGroup 请求和 SyncGroup 请求把组员信息发送给调解者，由协调者作为节点的分配</li>\n</ul>\n</li>\n<li>组员主动离组：<ul>\n<li>流程基本同新成员加入</li>\n</ul>\n</li>\n<li>组员崩溃离组：<ul>\n<li>靠心跳线程检测组员状态，由协调者发起重平衡</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Kafka控制器\"><a href=\"#Kafka控制器\" class=\"headerlink\" title=\"Kafka控制器\"></a>Kafka控制器</h3><p>运行时只能有一个Broker作为控制器，第一个在zookeeper中创建controller节点的Broker会被指定为控制器</p>\n<p>控制器职责：</p>\n<ul>\n<li>主题管理(创建、删除、增加分区)</li>\n<li>分区重分配</li>\n<li>Preferred领导者选举</li>\n<li>集群成员管理(新增Broker 、Broker主动关闭、Briker宕机)</li>\n<li>数据服务</li>\n</ul>\n<p>控制器单点故障转移由zookeeper的watch功能保证通知</p>\n<h3 id=\"关于高水位和Leader-Epoch\"><a href=\"#关于高水位和Leader-Epoch\" class=\"headerlink\" title=\"关于高水位和Leader Epoch\"></a>关于高水位和Leader Epoch</h3><p>Kafka用高水位来表示Kafka中的消息位移，位移值小于高水位的表示已提交的数据，高于高水位的数据表示未提交信息，不能被消费者消费。</p>\n<p>高水位的作用：</p>\n<p>1.定义消息可见性，即用来标识分区下的哪些消息是可以被消费者消费的</p>\n<p>2.帮助Kafka完成副本同步</p>\n<h3 id=\"管理和监控-skip\"><a href=\"#管理和监控-skip\" class=\"headerlink\" title=\"管理和监控 skip\"></a>管理和监控 skip</h3><h3 id=\"Kafka-Stream与其他流处理平台的差异在哪\"><a href=\"#Kafka-Stream与其他流处理平台的差异在哪\" class=\"headerlink\" title=\"Kafka Stream与其他流处理平台的差异在哪\"></a>Kafka Stream与其他流处理平台的差异在哪</h3><ul>\n<li>Kafka Stream最大的特色就是它不是一个平台，至少它不是一个具备完整功能的平台</li>\n<li>从应用部署方面来看，Kafka Stream倾向于将部署交给开发人员来做，而不是自己实现</li>\n<li>Kafka Stream只支持与Kafka的集群的交换</li>\n<li>Kafka Stream依赖Kafka的协调功能提供高容错性和高伸缩性</li>\n</ul>\n<p>Kafka Stream与consumer的区别是Kafka Stream是实时流处理组件，提供了很多算子，可以实现更多复杂的业务</p>\n"},{"title":"Kubernetes的设计解读","date":"2022-03-20T04:31:00.000Z","_content":"### pod 设计解读\n\n在kubernetes中，创建、调度、管理的最小单位是pod\n\n- pod是IP等网络资源的分配的基本单位，这个IP及其对应的network namespace是由pod里面的容器共享的\n- pod内的所有容器页共享volume。当一个volume被挂载在同属同一个pod的多个Docker容器的文件系统\n- IPC namespace 即同一个pod内的应用容器能够使用System V IPC或者POSIX消息队列进行通信\n- UTS namespace 即同一个pod内的应用容器共享主机名\n\n1.label 和label selector与pod协作\n\n2.pod的现状和未来\n\n- 资源共享和通信\n- 集中式管理，指pod内的所有容器资源\n\n3.pod内的容器网络与通信\n\n​\t通过pause容器进行pod内的容器网络与通信\n\n- replication controller设计解读\n\n  replication controller在设计上依然体现出了\"旁路控制\"的思想，为每个pod “外挂”了一个控制器进程，从而避免了健康检查组件成为性能瓶颈\n\n  replication controller只能与重启策略为Always的pod进行协作\n\n  replication controller的经典场景:\n\n    - 重调度\n    - 弹性伸缩\n    - 滚动更新\n    - 多版本应用release追踪\n\n- service的设计解读\n\n  service通过标签label将流量负载均衡到对应label标签的pod上\n\n    - service工作原理\n\n      Kubernetes集群上的每个节点都运行着一个服务代理(service proxy),它是负责实现service的主要组件\n\n      kube proxy两种工作模式：\n\n        - userspace模式\n\n          对于每个service kube-proxy都会在宿主机监听一个端口与这个service对应起来，并在宿主机上建立起iptables规则，将service IP:service port的流量重定向到上述端口\n\n        - iptables模式\n\n          iptables模式下的kube-proxy将负责创建和维护iptables的路由规则，其余工作交由内核态的iptables完成\n\n    - service的自发现机制\n\n        - 环境变量方式\n        - DNS方式(mysvc.myns)\n\n    - service 外部可路由性设计\n\n        - NodePort\n        - LoadBalancer\n        - external ip\n\n- 新一代版本控制器 replica set\n\n  replica set 用于保证label selector 匹配的pod数量维持在期望状态\n\n  replicat set 与 replication controller 的区别是：replication controller只支持等值匹配   replicat set支持基于子集的查询\n\n- Deployment\n\n  Deployment多用于pod 和replica set 的更新，可以方便地跟踪观察其所属的relica set或者pod的数量以及状态变化\n\n- DaemonSet\n\n- ConfigMap\n- Job\n\n### Kubernetes核心 组件解读\n\n#### Master节点：\n\n##### APIServer:\n\nKubernetes APIserver负责对外提供Kubernetes API服务，它运行在Kubernetes的管理节点-Master节点\n\n* APIServer的职能:\n\n    * 对外提供RESTful的管理接口\n    * 配置Kubernetes的资源对象\n    * 提供可定制的功能性插件\n\n* APIServer启动过程:\n\n  1.新建APIServer 定义一个APIServer所需的关键资源\n\n  2.接受用户命令行输入，为上述各参数赋值\n\n  3.解析并格式化用户传入的参数\n\n  4.初始化log配置\n\n  5.启动运行一个全新的APIServer\n\n* APIServer对etcd的封装：\n\n  Kubernetes使用etcd作为后台存储解决方案，而APIServer则基于etcd实现了一套RESTful API，用于操作存储在etcd中的Kubernetes对象实例\n\n* APIServer如何保证API操作的原子性:\n\n  Kubernetes的资源对象都设置了resourceVersion作为其元数据的一部分，APIServer以此保证资源对象操作的原子性\n\n##### Scheduler:\n\n根据特定的调度算法将pod调度到指定的工作节点上，这一过程称作绑定\n\n* Scheduler的数据采集模型\n\n  Scheduler定时向APIServer获取各种各样它需要的数据，为了减少轮询时APIServer带来的额外开销，对于感兴趣的资源设置了本地缓存机制\n\n* Scheduler调度算法\n\n  Kubernetes中的调度策略分为两个阶段：Predicates , Priorites\n\n    * Predicates :回答能不能\n    * Priorites：在Predicates基础上回答匹配度\n\n* controller manager\n\n  kubernetes controller manager 运行在集群的master节点上，管理着集群中的各种控制器\n\n#### 工作节点：\n\n##### cAdvisor:\n\n获取当前工作节点的宿主机信息\n\n##### kubelet :\n\nkubelet组件 是Kubenetes集群工作节点上最重要的组件进程，它负责管理和维护在这台主机上运行着的所有容器。本质上它的工作可以归纳为使得pod的运行状态（status）与它的期待值（spec）一致。\n\nKubelet如何同步工作节点状态：\n\n1.kubelet调用APIServer API向etcd获取包含当前工作节点状态信息的node 对象，查询的键值就是kubelet所在工作节点的主机名，\n\n2.调用cAdvisor客户端API获取当前工作节点的宿主机信息，更新前面步骤获取到的node对象\n\n3.kubelet再次调用APIServer API将上述更新持久化到etcd中\n\n##### kube-proxy :\n\nKubernetes基于service、endpoint等概念为用户提供了一种服务发现和反向代理服务，而kube-proxy正是这种服务的底层实现机制。\n\n服务发现实现：\n\nKube-proxy使用etcd的watch机制，监控集群中service和endpoint对象数据的动态变化，并且维护一个从service到endpoint的映射关系，从而保证了后端pod的IP变化不会对访问者造成影响。\n\nkube-proxy主要有两种工作模式: userspace 和 iptables\n\nuserspace模式：\n\niptables模式：\n\niptables模式下的proxier值负责在发现变更时更新iptables规则，而不再为每个service打开一个本地端口，所有流量转发到pod的工作将交由内核态的iptables完成。\n\n### 核心组件协作流程：\n\n#### 创建pod\n\n当客户端发起一个创建pod的请求后，kubectl向APIServer的/pods端点发送一个HTTP POST请求，请求的内容即客户端提供的pod资源配置文件\n\n\n\nAPIServer收到该REST API请求后会进行一系列的验证操作，包括用户认证，授权和资源配额控制等。验证通过后，APIServer调用etcd的存储接口在后台数据库中创建一个pod对象。\n\n\n\nScheduler使用APIServer 的API  定期从etcd获取或者监控系统中可用的工作节点列表和待调度pod , 并使用调度策略为pod选择一个运行的工作节点，这个过程叫绑定\n\n\n\n绑定完成后，scheduler会调用APIServer的API在etcd中创建bingding对象，描述在一个工作节点上绑定运行的所有pod信息。同时kubelet会监听APIServer上pod的更新，如果发现有pod更新信息，则会自动在podWorker的同步周期中更新对应的pod\n\n\n\n这正是Kubernetes实现中 \"一切皆资源\"的体现，即所有实体对象，消息都是作为etcd里保存起来的一种资源对待，其他所有组件间协作都通过基于APIServer的数据交换，组件间一种松耦合的状态。\n\n#### 创建service\n\n当客户端发起一个创建service的请求后，kubectl向APIServer的/service端点发送一个HTTP POST请求，请求的内容即客户端提供的service资源配置文件。\n\n\n\n同样，APIServer收到该REST API请求后会进行一系列的验证操作。验证通过后，APIServer调用etcd的存储接口在后台数据库中创建一个service对象\n\n\n\nkube-proxy会定期调用APIServer的API获取期望service对象列表，然后再遍历期望service对象列表。对每个service调用APIServer的API获取对应的pod集的信息，并从pod信息列表中提取pod IP和容器端口号封装成endpoint对象，然后调用APIServer的API在etcd中创建对象\n\n在```userspace kube-proxy模式``下：\n\n对于每个新建的service，kube-proxy会为其在本地随机分配一个随机端口号，并相应地创建一个ProxySocket，随后使用iptables工具在宿主机上建立一条从ServiceProxy到ProxySocket的了链路。同时，kube-proxy后台启动一个协程监听ProxySocket上的数据并根据endpoint实例的信息将来自客户端的请求转发给相应的service后端pod.\n\n\n\n在```iptables kube-proxy模式```下：\n\n对于每个新建的service，kube-proxy会为其创建对应的iptables。来自客户端的请求将由内核态iptables负责转发给service后端pod完成\n\n\n\n最后，kube-proxy会定期调用APIService的API获取期望service和endpoint列表并与本地的service 和endpoint实例同步。\n\n### Kubernetes 网络核心原理\n\n#### 单pod单IP模型\n\nKubernetes为每一个pod分配一个私有网络地址段的IP地址，通过该IP地址，pod能够跨网络与其他物理机，虚拟机或容器进行通信，pod内的容器全部共享这个pod的容器配置，彼此之间使用localhost通信。\n\n#### 单pod单IP实现原理\n\n在每一个pod中有一个网络容器，该容器先于pod内所有用户容器被创建，并且拥有该pod的网络namespace，pod的其他用户容器使用Docker的--net=container:<id>选项加入该网络的namespace，这样就实现了pod内所有容器对于网络栈的共享\n\n### Kubernetes 高级实践\n\n应用健康检查:\n\n* 进程级健康检查\n\n* 业务级健康检查:\n\n  活性探针：\n\n    * HTTP Get: kubelet 将调用容器内Web应用的web hook 如果返回的状态为200 和 399 之间则成功\n    * Container Exec: kubelet 将在用户容器内执行一次命令，返回码为0 则正常\n    * TCP Socket : 尝试建立socker,但目前尚未支持\n\n  如果readiness probe的健康检查结果是fail kubelet并不会杀死容器进程，而只是将该容器所属的pod 从endpoint列表删除\n\n### Kubernetes 未来动向\n\n坚持走更加开放的道路\n\n汲取Borg与Omega的优秀设计思想\n\n致力于树立行业标准","source":"_posts/Kubernetes的设计解读.md","raw":"---\ntitle: Kubernetes的设计解读\ndate: 2022-03-20 12:31:00\ntags:\n  - Kubernetes\ncategories: Kubernetes\n---\n### pod 设计解读\n\n在kubernetes中，创建、调度、管理的最小单位是pod\n\n- pod是IP等网络资源的分配的基本单位，这个IP及其对应的network namespace是由pod里面的容器共享的\n- pod内的所有容器页共享volume。当一个volume被挂载在同属同一个pod的多个Docker容器的文件系统\n- IPC namespace 即同一个pod内的应用容器能够使用System V IPC或者POSIX消息队列进行通信\n- UTS namespace 即同一个pod内的应用容器共享主机名\n\n1.label 和label selector与pod协作\n\n2.pod的现状和未来\n\n- 资源共享和通信\n- 集中式管理，指pod内的所有容器资源\n\n3.pod内的容器网络与通信\n\n​\t通过pause容器进行pod内的容器网络与通信\n\n- replication controller设计解读\n\n  replication controller在设计上依然体现出了\"旁路控制\"的思想，为每个pod “外挂”了一个控制器进程，从而避免了健康检查组件成为性能瓶颈\n\n  replication controller只能与重启策略为Always的pod进行协作\n\n  replication controller的经典场景:\n\n    - 重调度\n    - 弹性伸缩\n    - 滚动更新\n    - 多版本应用release追踪\n\n- service的设计解读\n\n  service通过标签label将流量负载均衡到对应label标签的pod上\n\n    - service工作原理\n\n      Kubernetes集群上的每个节点都运行着一个服务代理(service proxy),它是负责实现service的主要组件\n\n      kube proxy两种工作模式：\n\n        - userspace模式\n\n          对于每个service kube-proxy都会在宿主机监听一个端口与这个service对应起来，并在宿主机上建立起iptables规则，将service IP:service port的流量重定向到上述端口\n\n        - iptables模式\n\n          iptables模式下的kube-proxy将负责创建和维护iptables的路由规则，其余工作交由内核态的iptables完成\n\n    - service的自发现机制\n\n        - 环境变量方式\n        - DNS方式(mysvc.myns)\n\n    - service 外部可路由性设计\n\n        - NodePort\n        - LoadBalancer\n        - external ip\n\n- 新一代版本控制器 replica set\n\n  replica set 用于保证label selector 匹配的pod数量维持在期望状态\n\n  replicat set 与 replication controller 的区别是：replication controller只支持等值匹配   replicat set支持基于子集的查询\n\n- Deployment\n\n  Deployment多用于pod 和replica set 的更新，可以方便地跟踪观察其所属的relica set或者pod的数量以及状态变化\n\n- DaemonSet\n\n- ConfigMap\n- Job\n\n### Kubernetes核心 组件解读\n\n#### Master节点：\n\n##### APIServer:\n\nKubernetes APIserver负责对外提供Kubernetes API服务，它运行在Kubernetes的管理节点-Master节点\n\n* APIServer的职能:\n\n    * 对外提供RESTful的管理接口\n    * 配置Kubernetes的资源对象\n    * 提供可定制的功能性插件\n\n* APIServer启动过程:\n\n  1.新建APIServer 定义一个APIServer所需的关键资源\n\n  2.接受用户命令行输入，为上述各参数赋值\n\n  3.解析并格式化用户传入的参数\n\n  4.初始化log配置\n\n  5.启动运行一个全新的APIServer\n\n* APIServer对etcd的封装：\n\n  Kubernetes使用etcd作为后台存储解决方案，而APIServer则基于etcd实现了一套RESTful API，用于操作存储在etcd中的Kubernetes对象实例\n\n* APIServer如何保证API操作的原子性:\n\n  Kubernetes的资源对象都设置了resourceVersion作为其元数据的一部分，APIServer以此保证资源对象操作的原子性\n\n##### Scheduler:\n\n根据特定的调度算法将pod调度到指定的工作节点上，这一过程称作绑定\n\n* Scheduler的数据采集模型\n\n  Scheduler定时向APIServer获取各种各样它需要的数据，为了减少轮询时APIServer带来的额外开销，对于感兴趣的资源设置了本地缓存机制\n\n* Scheduler调度算法\n\n  Kubernetes中的调度策略分为两个阶段：Predicates , Priorites\n\n    * Predicates :回答能不能\n    * Priorites：在Predicates基础上回答匹配度\n\n* controller manager\n\n  kubernetes controller manager 运行在集群的master节点上，管理着集群中的各种控制器\n\n#### 工作节点：\n\n##### cAdvisor:\n\n获取当前工作节点的宿主机信息\n\n##### kubelet :\n\nkubelet组件 是Kubenetes集群工作节点上最重要的组件进程，它负责管理和维护在这台主机上运行着的所有容器。本质上它的工作可以归纳为使得pod的运行状态（status）与它的期待值（spec）一致。\n\nKubelet如何同步工作节点状态：\n\n1.kubelet调用APIServer API向etcd获取包含当前工作节点状态信息的node 对象，查询的键值就是kubelet所在工作节点的主机名，\n\n2.调用cAdvisor客户端API获取当前工作节点的宿主机信息，更新前面步骤获取到的node对象\n\n3.kubelet再次调用APIServer API将上述更新持久化到etcd中\n\n##### kube-proxy :\n\nKubernetes基于service、endpoint等概念为用户提供了一种服务发现和反向代理服务，而kube-proxy正是这种服务的底层实现机制。\n\n服务发现实现：\n\nKube-proxy使用etcd的watch机制，监控集群中service和endpoint对象数据的动态变化，并且维护一个从service到endpoint的映射关系，从而保证了后端pod的IP变化不会对访问者造成影响。\n\nkube-proxy主要有两种工作模式: userspace 和 iptables\n\nuserspace模式：\n\niptables模式：\n\niptables模式下的proxier值负责在发现变更时更新iptables规则，而不再为每个service打开一个本地端口，所有流量转发到pod的工作将交由内核态的iptables完成。\n\n### 核心组件协作流程：\n\n#### 创建pod\n\n当客户端发起一个创建pod的请求后，kubectl向APIServer的/pods端点发送一个HTTP POST请求，请求的内容即客户端提供的pod资源配置文件\n\n\n\nAPIServer收到该REST API请求后会进行一系列的验证操作，包括用户认证，授权和资源配额控制等。验证通过后，APIServer调用etcd的存储接口在后台数据库中创建一个pod对象。\n\n\n\nScheduler使用APIServer 的API  定期从etcd获取或者监控系统中可用的工作节点列表和待调度pod , 并使用调度策略为pod选择一个运行的工作节点，这个过程叫绑定\n\n\n\n绑定完成后，scheduler会调用APIServer的API在etcd中创建bingding对象，描述在一个工作节点上绑定运行的所有pod信息。同时kubelet会监听APIServer上pod的更新，如果发现有pod更新信息，则会自动在podWorker的同步周期中更新对应的pod\n\n\n\n这正是Kubernetes实现中 \"一切皆资源\"的体现，即所有实体对象，消息都是作为etcd里保存起来的一种资源对待，其他所有组件间协作都通过基于APIServer的数据交换，组件间一种松耦合的状态。\n\n#### 创建service\n\n当客户端发起一个创建service的请求后，kubectl向APIServer的/service端点发送一个HTTP POST请求，请求的内容即客户端提供的service资源配置文件。\n\n\n\n同样，APIServer收到该REST API请求后会进行一系列的验证操作。验证通过后，APIServer调用etcd的存储接口在后台数据库中创建一个service对象\n\n\n\nkube-proxy会定期调用APIServer的API获取期望service对象列表，然后再遍历期望service对象列表。对每个service调用APIServer的API获取对应的pod集的信息，并从pod信息列表中提取pod IP和容器端口号封装成endpoint对象，然后调用APIServer的API在etcd中创建对象\n\n在```userspace kube-proxy模式``下：\n\n对于每个新建的service，kube-proxy会为其在本地随机分配一个随机端口号，并相应地创建一个ProxySocket，随后使用iptables工具在宿主机上建立一条从ServiceProxy到ProxySocket的了链路。同时，kube-proxy后台启动一个协程监听ProxySocket上的数据并根据endpoint实例的信息将来自客户端的请求转发给相应的service后端pod.\n\n\n\n在```iptables kube-proxy模式```下：\n\n对于每个新建的service，kube-proxy会为其创建对应的iptables。来自客户端的请求将由内核态iptables负责转发给service后端pod完成\n\n\n\n最后，kube-proxy会定期调用APIService的API获取期望service和endpoint列表并与本地的service 和endpoint实例同步。\n\n### Kubernetes 网络核心原理\n\n#### 单pod单IP模型\n\nKubernetes为每一个pod分配一个私有网络地址段的IP地址，通过该IP地址，pod能够跨网络与其他物理机，虚拟机或容器进行通信，pod内的容器全部共享这个pod的容器配置，彼此之间使用localhost通信。\n\n#### 单pod单IP实现原理\n\n在每一个pod中有一个网络容器，该容器先于pod内所有用户容器被创建，并且拥有该pod的网络namespace，pod的其他用户容器使用Docker的--net=container:<id>选项加入该网络的namespace，这样就实现了pod内所有容器对于网络栈的共享\n\n### Kubernetes 高级实践\n\n应用健康检查:\n\n* 进程级健康检查\n\n* 业务级健康检查:\n\n  活性探针：\n\n    * HTTP Get: kubelet 将调用容器内Web应用的web hook 如果返回的状态为200 和 399 之间则成功\n    * Container Exec: kubelet 将在用户容器内执行一次命令，返回码为0 则正常\n    * TCP Socket : 尝试建立socker,但目前尚未支持\n\n  如果readiness probe的健康检查结果是fail kubelet并不会杀死容器进程，而只是将该容器所属的pod 从endpoint列表删除\n\n### Kubernetes 未来动向\n\n坚持走更加开放的道路\n\n汲取Borg与Omega的优秀设计思想\n\n致力于树立行业标准","slug":"Kubernetes的设计解读","published":1,"updated":"2024-01-12T13:57:35.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrc892az000h6xywcthecmea","content":"<h3 id=\"pod-设计解读\"><a href=\"#pod-设计解读\" class=\"headerlink\" title=\"pod 设计解读\"></a>pod 设计解读</h3><p>在kubernetes中，创建、调度、管理的最小单位是pod</p>\n<ul>\n<li>pod是IP等网络资源的分配的基本单位，这个IP及其对应的network namespace是由pod里面的容器共享的</li>\n<li>pod内的所有容器页共享volume。当一个volume被挂载在同属同一个pod的多个Docker容器的文件系统</li>\n<li>IPC namespace 即同一个pod内的应用容器能够使用System V IPC或者POSIX消息队列进行通信</li>\n<li>UTS namespace 即同一个pod内的应用容器共享主机名</li>\n</ul>\n<p>1.label 和label selector与pod协作</p>\n<p>2.pod的现状和未来</p>\n<ul>\n<li>资源共享和通信</li>\n<li>集中式管理，指pod内的所有容器资源</li>\n</ul>\n<p>3.pod内的容器网络与通信</p>\n<p>​    通过pause容器进行pod内的容器网络与通信</p>\n<ul>\n<li><p>replication controller设计解读</p>\n<p>replication controller在设计上依然体现出了”旁路控制”的思想，为每个pod “外挂”了一个控制器进程，从而避免了健康检查组件成为性能瓶颈</p>\n<p>replication controller只能与重启策略为Always的pod进行协作</p>\n<p>replication controller的经典场景:</p>\n<ul>\n<li>重调度</li>\n<li>弹性伸缩</li>\n<li>滚动更新</li>\n<li>多版本应用release追踪</li>\n</ul>\n</li>\n<li><p>service的设计解读</p>\n<p>service通过标签label将流量负载均衡到对应label标签的pod上</p>\n<ul>\n<li><p>service工作原理</p>\n<p>Kubernetes集群上的每个节点都运行着一个服务代理(service proxy),它是负责实现service的主要组件</p>\n<p>kube proxy两种工作模式：</p>\n<ul>\n<li><p>userspace模式</p>\n<p>对于每个service kube-proxy都会在宿主机监听一个端口与这个service对应起来，并在宿主机上建立起iptables规则，将service IP:service port的流量重定向到上述端口</p>\n</li>\n<li><p>iptables模式</p>\n<p>iptables模式下的kube-proxy将负责创建和维护iptables的路由规则，其余工作交由内核态的iptables完成</p>\n</li>\n</ul>\n</li>\n<li><p>service的自发现机制</p>\n<ul>\n<li>环境变量方式</li>\n<li>DNS方式(mysvc.myns)</li>\n</ul>\n</li>\n<li><p>service 外部可路由性设计</p>\n<ul>\n<li>NodePort</li>\n<li>LoadBalancer</li>\n<li>external ip</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>新一代版本控制器 replica set</p>\n<p>replica set 用于保证label selector 匹配的pod数量维持在期望状态</p>\n<p>replicat set 与 replication controller 的区别是：replication controller只支持等值匹配   replicat set支持基于子集的查询</p>\n</li>\n<li><p>Deployment</p>\n<p>Deployment多用于pod 和replica set 的更新，可以方便地跟踪观察其所属的relica set或者pod的数量以及状态变化</p>\n</li>\n<li><p>DaemonSet</p>\n</li>\n<li><p>ConfigMap</p>\n</li>\n<li><p>Job</p>\n</li>\n</ul>\n<h3 id=\"Kubernetes核心-组件解读\"><a href=\"#Kubernetes核心-组件解读\" class=\"headerlink\" title=\"Kubernetes核心 组件解读\"></a>Kubernetes核心 组件解读</h3><h4 id=\"Master节点：\"><a href=\"#Master节点：\" class=\"headerlink\" title=\"Master节点：\"></a>Master节点：</h4><h5 id=\"APIServer\"><a href=\"#APIServer\" class=\"headerlink\" title=\"APIServer:\"></a>APIServer:</h5><p>Kubernetes APIserver负责对外提供Kubernetes API服务，它运行在Kubernetes的管理节点-Master节点</p>\n<ul>\n<li><p>APIServer的职能:</p>\n<ul>\n<li>对外提供RESTful的管理接口</li>\n<li>配置Kubernetes的资源对象</li>\n<li>提供可定制的功能性插件</li>\n</ul>\n</li>\n<li><p>APIServer启动过程:</p>\n<p>1.新建APIServer 定义一个APIServer所需的关键资源</p>\n<p>2.接受用户命令行输入，为上述各参数赋值</p>\n<p>3.解析并格式化用户传入的参数</p>\n<p>4.初始化log配置</p>\n<p>5.启动运行一个全新的APIServer</p>\n</li>\n<li><p>APIServer对etcd的封装：</p>\n<p>Kubernetes使用etcd作为后台存储解决方案，而APIServer则基于etcd实现了一套RESTful API，用于操作存储在etcd中的Kubernetes对象实例</p>\n</li>\n<li><p>APIServer如何保证API操作的原子性:</p>\n<p>Kubernetes的资源对象都设置了resourceVersion作为其元数据的一部分，APIServer以此保证资源对象操作的原子性</p>\n</li>\n</ul>\n<h5 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler:\"></a>Scheduler:</h5><p>根据特定的调度算法将pod调度到指定的工作节点上，这一过程称作绑定</p>\n<ul>\n<li><p>Scheduler的数据采集模型</p>\n<p>Scheduler定时向APIServer获取各种各样它需要的数据，为了减少轮询时APIServer带来的额外开销，对于感兴趣的资源设置了本地缓存机制</p>\n</li>\n<li><p>Scheduler调度算法</p>\n<p>Kubernetes中的调度策略分为两个阶段：Predicates , Priorites</p>\n<ul>\n<li>Predicates :回答能不能</li>\n<li>Priorites：在Predicates基础上回答匹配度</li>\n</ul>\n</li>\n<li><p>controller manager</p>\n<p>kubernetes controller manager 运行在集群的master节点上，管理着集群中的各种控制器</p>\n</li>\n</ul>\n<h4 id=\"工作节点：\"><a href=\"#工作节点：\" class=\"headerlink\" title=\"工作节点：\"></a>工作节点：</h4><h5 id=\"cAdvisor\"><a href=\"#cAdvisor\" class=\"headerlink\" title=\"cAdvisor:\"></a>cAdvisor:</h5><p>获取当前工作节点的宿主机信息</p>\n<h5 id=\"kubelet\"><a href=\"#kubelet\" class=\"headerlink\" title=\"kubelet :\"></a>kubelet :</h5><p>kubelet组件 是Kubenetes集群工作节点上最重要的组件进程，它负责管理和维护在这台主机上运行着的所有容器。本质上它的工作可以归纳为使得pod的运行状态（status）与它的期待值（spec）一致。</p>\n<p>Kubelet如何同步工作节点状态：</p>\n<p>1.kubelet调用APIServer API向etcd获取包含当前工作节点状态信息的node 对象，查询的键值就是kubelet所在工作节点的主机名，</p>\n<p>2.调用cAdvisor客户端API获取当前工作节点的宿主机信息，更新前面步骤获取到的node对象</p>\n<p>3.kubelet再次调用APIServer API将上述更新持久化到etcd中</p>\n<h5 id=\"kube-proxy\"><a href=\"#kube-proxy\" class=\"headerlink\" title=\"kube-proxy :\"></a>kube-proxy :</h5><p>Kubernetes基于service、endpoint等概念为用户提供了一种服务发现和反向代理服务，而kube-proxy正是这种服务的底层实现机制。</p>\n<p>服务发现实现：</p>\n<p>Kube-proxy使用etcd的watch机制，监控集群中service和endpoint对象数据的动态变化，并且维护一个从service到endpoint的映射关系，从而保证了后端pod的IP变化不会对访问者造成影响。</p>\n<p>kube-proxy主要有两种工作模式: userspace 和 iptables</p>\n<p>userspace模式：</p>\n<p>iptables模式：</p>\n<p>iptables模式下的proxier值负责在发现变更时更新iptables规则，而不再为每个service打开一个本地端口，所有流量转发到pod的工作将交由内核态的iptables完成。</p>\n<h3 id=\"核心组件协作流程：\"><a href=\"#核心组件协作流程：\" class=\"headerlink\" title=\"核心组件协作流程：\"></a>核心组件协作流程：</h3><h4 id=\"创建pod\"><a href=\"#创建pod\" class=\"headerlink\" title=\"创建pod\"></a>创建pod</h4><p>当客户端发起一个创建pod的请求后，kubectl向APIServer的/pods端点发送一个HTTP POST请求，请求的内容即客户端提供的pod资源配置文件</p>\n<p>APIServer收到该REST API请求后会进行一系列的验证操作，包括用户认证，授权和资源配额控制等。验证通过后，APIServer调用etcd的存储接口在后台数据库中创建一个pod对象。</p>\n<p>Scheduler使用APIServer 的API  定期从etcd获取或者监控系统中可用的工作节点列表和待调度pod , 并使用调度策略为pod选择一个运行的工作节点，这个过程叫绑定</p>\n<p>绑定完成后，scheduler会调用APIServer的API在etcd中创建bingding对象，描述在一个工作节点上绑定运行的所有pod信息。同时kubelet会监听APIServer上pod的更新，如果发现有pod更新信息，则会自动在podWorker的同步周期中更新对应的pod</p>\n<p>这正是Kubernetes实现中 “一切皆资源”的体现，即所有实体对象，消息都是作为etcd里保存起来的一种资源对待，其他所有组件间协作都通过基于APIServer的数据交换，组件间一种松耦合的状态。</p>\n<h4 id=\"创建service\"><a href=\"#创建service\" class=\"headerlink\" title=\"创建service\"></a>创建service</h4><p>当客户端发起一个创建service的请求后，kubectl向APIServer的/service端点发送一个HTTP POST请求，请求的内容即客户端提供的service资源配置文件。</p>\n<p>同样，APIServer收到该REST API请求后会进行一系列的验证操作。验证通过后，APIServer调用etcd的存储接口在后台数据库中创建一个service对象</p>\n<p>kube-proxy会定期调用APIServer的API获取期望service对象列表，然后再遍历期望service对象列表。对每个service调用APIServer的API获取对应的pod集的信息，并从pod信息列表中提取pod IP和容器端口号封装成endpoint对象，然后调用APIServer的API在etcd中创建对象</p>\n<p>在```userspace kube-proxy模式``下：</p>\n<p>对于每个新建的service，kube-proxy会为其在本地随机分配一个随机端口号，并相应地创建一个ProxySocket，随后使用iptables工具在宿主机上建立一条从ServiceProxy到ProxySocket的了链路。同时，kube-proxy后台启动一个协程监听ProxySocket上的数据并根据endpoint实例的信息将来自客户端的请求转发给相应的service后端pod.</p>\n<p>在<code>iptables kube-proxy模式</code>下：</p>\n<p>对于每个新建的service，kube-proxy会为其创建对应的iptables。来自客户端的请求将由内核态iptables负责转发给service后端pod完成</p>\n<p>最后，kube-proxy会定期调用APIService的API获取期望service和endpoint列表并与本地的service 和endpoint实例同步。</p>\n<h3 id=\"Kubernetes-网络核心原理\"><a href=\"#Kubernetes-网络核心原理\" class=\"headerlink\" title=\"Kubernetes 网络核心原理\"></a>Kubernetes 网络核心原理</h3><h4 id=\"单pod单IP模型\"><a href=\"#单pod单IP模型\" class=\"headerlink\" title=\"单pod单IP模型\"></a>单pod单IP模型</h4><p>Kubernetes为每一个pod分配一个私有网络地址段的IP地址，通过该IP地址，pod能够跨网络与其他物理机，虚拟机或容器进行通信，pod内的容器全部共享这个pod的容器配置，彼此之间使用localhost通信。</p>\n<h4 id=\"单pod单IP实现原理\"><a href=\"#单pod单IP实现原理\" class=\"headerlink\" title=\"单pod单IP实现原理\"></a>单pod单IP实现原理</h4><p>在每一个pod中有一个网络容器，该容器先于pod内所有用户容器被创建，并且拥有该pod的网络namespace，pod的其他用户容器使用Docker的–net=container:<id>选项加入该网络的namespace，这样就实现了pod内所有容器对于网络栈的共享</id></p>\n<h3 id=\"Kubernetes-高级实践\"><a href=\"#Kubernetes-高级实践\" class=\"headerlink\" title=\"Kubernetes 高级实践\"></a>Kubernetes 高级实践</h3><p>应用健康检查:</p>\n<ul>\n<li><p>进程级健康检查</p>\n</li>\n<li><p>业务级健康检查:</p>\n<p>活性探针：</p>\n<ul>\n<li>HTTP Get: kubelet 将调用容器内Web应用的web hook 如果返回的状态为200 和 399 之间则成功</li>\n<li>Container Exec: kubelet 将在用户容器内执行一次命令，返回码为0 则正常</li>\n<li>TCP Socket : 尝试建立socker,但目前尚未支持</li>\n</ul>\n<p>如果readiness probe的健康检查结果是fail kubelet并不会杀死容器进程，而只是将该容器所属的pod 从endpoint列表删除</p>\n</li>\n</ul>\n<h3 id=\"Kubernetes-未来动向\"><a href=\"#Kubernetes-未来动向\" class=\"headerlink\" title=\"Kubernetes 未来动向\"></a>Kubernetes 未来动向</h3><p>坚持走更加开放的道路</p>\n<p>汲取Borg与Omega的优秀设计思想</p>\n<p>致力于树立行业标准</p>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h3 id=\"pod-设计解读\"><a href=\"#pod-设计解读\" class=\"headerlink\" title=\"pod 设计解读\"></a>pod 设计解读</h3><p>在kubernetes中，创建、调度、管理的最小单位是pod</p>\n<ul>\n<li>pod是IP等网络资源的分配的基本单位，这个IP及其对应的network namespace是由pod里面的容器共享的</li>\n<li>pod内的所有容器页共享volume。当一个volume被挂载在同属同一个pod的多个Docker容器的文件系统</li>\n<li>IPC namespace 即同一个pod内的应用容器能够使用System V IPC或者POSIX消息队列进行通信</li>\n<li>UTS namespace 即同一个pod内的应用容器共享主机名</li>\n</ul>\n<p>1.label 和label selector与pod协作</p>\n<p>2.pod的现状和未来</p>\n<ul>\n<li>资源共享和通信</li>\n<li>集中式管理，指pod内的所有容器资源</li>\n</ul>\n<p>3.pod内的容器网络与通信</p>\n<p>​    通过pause容器进行pod内的容器网络与通信</p>\n<ul>\n<li><p>replication controller设计解读</p>\n<p>replication controller在设计上依然体现出了”旁路控制”的思想，为每个pod “外挂”了一个控制器进程，从而避免了健康检查组件成为性能瓶颈</p>\n<p>replication controller只能与重启策略为Always的pod进行协作</p>\n<p>replication controller的经典场景:</p>\n<ul>\n<li>重调度</li>\n<li>弹性伸缩</li>\n<li>滚动更新</li>\n<li>多版本应用release追踪</li>\n</ul>\n</li>\n<li><p>service的设计解读</p>\n<p>service通过标签label将流量负载均衡到对应label标签的pod上</p>\n<ul>\n<li><p>service工作原理</p>\n<p>Kubernetes集群上的每个节点都运行着一个服务代理(service proxy),它是负责实现service的主要组件</p>\n<p>kube proxy两种工作模式：</p>\n<ul>\n<li><p>userspace模式</p>\n<p>对于每个service kube-proxy都会在宿主机监听一个端口与这个service对应起来，并在宿主机上建立起iptables规则，将service IP:service port的流量重定向到上述端口</p>\n</li>\n<li><p>iptables模式</p>\n<p>iptables模式下的kube-proxy将负责创建和维护iptables的路由规则，其余工作交由内核态的iptables完成</p>\n</li>\n</ul>\n</li>\n<li><p>service的自发现机制</p>\n<ul>\n<li>环境变量方式</li>\n<li>DNS方式(mysvc.myns)</li>\n</ul>\n</li>\n<li><p>service 外部可路由性设计</p>\n<ul>\n<li>NodePort</li>\n<li>LoadBalancer</li>\n<li>external ip</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>新一代版本控制器 replica set</p>\n<p>replica set 用于保证label selector 匹配的pod数量维持在期望状态</p>\n<p>replicat set 与 replication controller 的区别是：replication controller只支持等值匹配   replicat set支持基于子集的查询</p>\n</li>\n<li><p>Deployment</p>\n<p>Deployment多用于pod 和replica set 的更新，可以方便地跟踪观察其所属的relica set或者pod的数量以及状态变化</p>\n</li>\n<li><p>DaemonSet</p>\n</li>\n<li><p>ConfigMap</p>\n</li>\n<li><p>Job</p>\n</li>\n</ul>\n<h3 id=\"Kubernetes核心-组件解读\"><a href=\"#Kubernetes核心-组件解读\" class=\"headerlink\" title=\"Kubernetes核心 组件解读\"></a>Kubernetes核心 组件解读</h3><h4 id=\"Master节点：\"><a href=\"#Master节点：\" class=\"headerlink\" title=\"Master节点：\"></a>Master节点：</h4><h5 id=\"APIServer\"><a href=\"#APIServer\" class=\"headerlink\" title=\"APIServer:\"></a>APIServer:</h5><p>Kubernetes APIserver负责对外提供Kubernetes API服务，它运行在Kubernetes的管理节点-Master节点</p>\n<ul>\n<li><p>APIServer的职能:</p>\n<ul>\n<li>对外提供RESTful的管理接口</li>\n<li>配置Kubernetes的资源对象</li>\n<li>提供可定制的功能性插件</li>\n</ul>\n</li>\n<li><p>APIServer启动过程:</p>\n<p>1.新建APIServer 定义一个APIServer所需的关键资源</p>\n<p>2.接受用户命令行输入，为上述各参数赋值</p>\n<p>3.解析并格式化用户传入的参数</p>\n<p>4.初始化log配置</p>\n<p>5.启动运行一个全新的APIServer</p>\n</li>\n<li><p>APIServer对etcd的封装：</p>\n<p>Kubernetes使用etcd作为后台存储解决方案，而APIServer则基于etcd实现了一套RESTful API，用于操作存储在etcd中的Kubernetes对象实例</p>\n</li>\n<li><p>APIServer如何保证API操作的原子性:</p>\n<p>Kubernetes的资源对象都设置了resourceVersion作为其元数据的一部分，APIServer以此保证资源对象操作的原子性</p>\n</li>\n</ul>\n<h5 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler:\"></a>Scheduler:</h5><p>根据特定的调度算法将pod调度到指定的工作节点上，这一过程称作绑定</p>\n<ul>\n<li><p>Scheduler的数据采集模型</p>\n<p>Scheduler定时向APIServer获取各种各样它需要的数据，为了减少轮询时APIServer带来的额外开销，对于感兴趣的资源设置了本地缓存机制</p>\n</li>\n<li><p>Scheduler调度算法</p>\n<p>Kubernetes中的调度策略分为两个阶段：Predicates , Priorites</p>\n<ul>\n<li>Predicates :回答能不能</li>\n<li>Priorites：在Predicates基础上回答匹配度</li>\n</ul>\n</li>\n<li><p>controller manager</p>\n<p>kubernetes controller manager 运行在集群的master节点上，管理着集群中的各种控制器</p>\n</li>\n</ul>\n<h4 id=\"工作节点：\"><a href=\"#工作节点：\" class=\"headerlink\" title=\"工作节点：\"></a>工作节点：</h4><h5 id=\"cAdvisor\"><a href=\"#cAdvisor\" class=\"headerlink\" title=\"cAdvisor:\"></a>cAdvisor:</h5><p>获取当前工作节点的宿主机信息</p>\n<h5 id=\"kubelet\"><a href=\"#kubelet\" class=\"headerlink\" title=\"kubelet :\"></a>kubelet :</h5><p>kubelet组件 是Kubenetes集群工作节点上最重要的组件进程，它负责管理和维护在这台主机上运行着的所有容器。本质上它的工作可以归纳为使得pod的运行状态（status）与它的期待值（spec）一致。</p>\n<p>Kubelet如何同步工作节点状态：</p>\n<p>1.kubelet调用APIServer API向etcd获取包含当前工作节点状态信息的node 对象，查询的键值就是kubelet所在工作节点的主机名，</p>\n<p>2.调用cAdvisor客户端API获取当前工作节点的宿主机信息，更新前面步骤获取到的node对象</p>\n<p>3.kubelet再次调用APIServer API将上述更新持久化到etcd中</p>\n<h5 id=\"kube-proxy\"><a href=\"#kube-proxy\" class=\"headerlink\" title=\"kube-proxy :\"></a>kube-proxy :</h5><p>Kubernetes基于service、endpoint等概念为用户提供了一种服务发现和反向代理服务，而kube-proxy正是这种服务的底层实现机制。</p>\n<p>服务发现实现：</p>\n<p>Kube-proxy使用etcd的watch机制，监控集群中service和endpoint对象数据的动态变化，并且维护一个从service到endpoint的映射关系，从而保证了后端pod的IP变化不会对访问者造成影响。</p>\n<p>kube-proxy主要有两种工作模式: userspace 和 iptables</p>\n<p>userspace模式：</p>\n<p>iptables模式：</p>\n<p>iptables模式下的proxier值负责在发现变更时更新iptables规则，而不再为每个service打开一个本地端口，所有流量转发到pod的工作将交由内核态的iptables完成。</p>\n<h3 id=\"核心组件协作流程：\"><a href=\"#核心组件协作流程：\" class=\"headerlink\" title=\"核心组件协作流程：\"></a>核心组件协作流程：</h3><h4 id=\"创建pod\"><a href=\"#创建pod\" class=\"headerlink\" title=\"创建pod\"></a>创建pod</h4><p>当客户端发起一个创建pod的请求后，kubectl向APIServer的&#x2F;pods端点发送一个HTTP POST请求，请求的内容即客户端提供的pod资源配置文件</p>\n<p>APIServer收到该REST API请求后会进行一系列的验证操作，包括用户认证，授权和资源配额控制等。验证通过后，APIServer调用etcd的存储接口在后台数据库中创建一个pod对象。</p>\n<p>Scheduler使用APIServer 的API  定期从etcd获取或者监控系统中可用的工作节点列表和待调度pod , 并使用调度策略为pod选择一个运行的工作节点，这个过程叫绑定</p>\n<p>绑定完成后，scheduler会调用APIServer的API在etcd中创建bingding对象，描述在一个工作节点上绑定运行的所有pod信息。同时kubelet会监听APIServer上pod的更新，如果发现有pod更新信息，则会自动在podWorker的同步周期中更新对应的pod</p>\n<p>这正是Kubernetes实现中 “一切皆资源”的体现，即所有实体对象，消息都是作为etcd里保存起来的一种资源对待，其他所有组件间协作都通过基于APIServer的数据交换，组件间一种松耦合的状态。</p>\n<h4 id=\"创建service\"><a href=\"#创建service\" class=\"headerlink\" title=\"创建service\"></a>创建service</h4><p>当客户端发起一个创建service的请求后，kubectl向APIServer的&#x2F;service端点发送一个HTTP POST请求，请求的内容即客户端提供的service资源配置文件。</p>\n<p>同样，APIServer收到该REST API请求后会进行一系列的验证操作。验证通过后，APIServer调用etcd的存储接口在后台数据库中创建一个service对象</p>\n<p>kube-proxy会定期调用APIServer的API获取期望service对象列表，然后再遍历期望service对象列表。对每个service调用APIServer的API获取对应的pod集的信息，并从pod信息列表中提取pod IP和容器端口号封装成endpoint对象，然后调用APIServer的API在etcd中创建对象</p>\n<p>在&#96;&#96;&#96;userspace kube-proxy模式&#96;&#96;下：</p>\n<p>对于每个新建的service，kube-proxy会为其在本地随机分配一个随机端口号，并相应地创建一个ProxySocket，随后使用iptables工具在宿主机上建立一条从ServiceProxy到ProxySocket的了链路。同时，kube-proxy后台启动一个协程监听ProxySocket上的数据并根据endpoint实例的信息将来自客户端的请求转发给相应的service后端pod.</p>\n<p>在<code>iptables kube-proxy模式</code>下：</p>\n<p>对于每个新建的service，kube-proxy会为其创建对应的iptables。来自客户端的请求将由内核态iptables负责转发给service后端pod完成</p>\n<p>最后，kube-proxy会定期调用APIService的API获取期望service和endpoint列表并与本地的service 和endpoint实例同步。</p>\n<h3 id=\"Kubernetes-网络核心原理\"><a href=\"#Kubernetes-网络核心原理\" class=\"headerlink\" title=\"Kubernetes 网络核心原理\"></a>Kubernetes 网络核心原理</h3><h4 id=\"单pod单IP模型\"><a href=\"#单pod单IP模型\" class=\"headerlink\" title=\"单pod单IP模型\"></a>单pod单IP模型</h4><p>Kubernetes为每一个pod分配一个私有网络地址段的IP地址，通过该IP地址，pod能够跨网络与其他物理机，虚拟机或容器进行通信，pod内的容器全部共享这个pod的容器配置，彼此之间使用localhost通信。</p>\n<h4 id=\"单pod单IP实现原理\"><a href=\"#单pod单IP实现原理\" class=\"headerlink\" title=\"单pod单IP实现原理\"></a>单pod单IP实现原理</h4><p>在每一个pod中有一个网络容器，该容器先于pod内所有用户容器被创建，并且拥有该pod的网络namespace，pod的其他用户容器使用Docker的–net&#x3D;container:<id>选项加入该网络的namespace，这样就实现了pod内所有容器对于网络栈的共享</p>\n<h3 id=\"Kubernetes-高级实践\"><a href=\"#Kubernetes-高级实践\" class=\"headerlink\" title=\"Kubernetes 高级实践\"></a>Kubernetes 高级实践</h3><p>应用健康检查:</p>\n<ul>\n<li><p>进程级健康检查</p>\n</li>\n<li><p>业务级健康检查:</p>\n<p>活性探针：</p>\n<ul>\n<li>HTTP Get: kubelet 将调用容器内Web应用的web hook 如果返回的状态为200 和 399 之间则成功</li>\n<li>Container Exec: kubelet 将在用户容器内执行一次命令，返回码为0 则正常</li>\n<li>TCP Socket : 尝试建立socker,但目前尚未支持</li>\n</ul>\n<p>如果readiness probe的健康检查结果是fail kubelet并不会杀死容器进程，而只是将该容器所属的pod 从endpoint列表删除</p>\n</li>\n</ul>\n<h3 id=\"Kubernetes-未来动向\"><a href=\"#Kubernetes-未来动向\" class=\"headerlink\" title=\"Kubernetes 未来动向\"></a>Kubernetes 未来动向</h3><p>坚持走更加开放的道路</p>\n<p>汲取Borg与Omega的优秀设计思想</p>\n<p>致力于树立行业标准</p>\n"},{"title":"TCP粘包、半包 Netty全搞定","date":"2022-03-13T15:59:00.000Z","_content":"\n1、什么是粘包和半包？\n\n粘包：一次接收全部消息\n\n半包：分多次接收到多个不完整的消息\n\n\n2、为什么TCP应用会出现粘包和半包现象\n\n粘包的主要原因：\n\n* 发送方每次写入数据 < 套接字缓冲区大小\n* 接收方读取套接字缓冲区数据不及时\n\n半包的主要原因：\n\n* 发送方写入数据 > 套接字缓冲区大小\n* 发送的数据大于协议的MTU(Maximum Transmission Unit，最大传输单元)，必须拆包\n\n\n收发：\n一个发送可能被多次接收，多个发送可能被一次接收\n\n传输：\n一个发送可能占用多个传输包，多个发送可能公用一个传输包\n\n根本原因：TCP是流式协议，消息无边界\n\n\n3、解决粘包和半包问题的几种常用方法\n\n解决问题的根本手段：找出消息边界：\n\n| 方式\\比较  | 寻找消息边界方式  | 优点  | 缺点  | 推荐度  |\n|:----------|:----------|:----------|:----------|:----------|\n| TCP连接改成短链接，一个请求一个短连接    | 建立连接到释放连接之间的信息即为传输消息    | 简单    | 效率低下    | 推荐度    |\n| (封装成帧)固定长度    | 满足固定长度即可    | 简单    | 空间浪费    | 不推荐    |\n| （封装成帧）分隔符    | 分隔符之间    | 空间不浪费，也比较简单    | 内容本身出现分隔符时需转义，所以需要扫描内容    | 推荐    |\n| (封装成帧)固定长度字段存内容的长度信息    | 先解析固定长度的字段获取长度，然后读取后续内容    | 精确定位用户数据，内容也不用转义    | 长度理论上有限制，需提前预知可能的最大长度从而定义长度占用字节数    | 推荐   |\n| (封装成帧)其他方式    | json   | 需要衡量实际场景，对现有协议的支持  |\n\n\n\n4、Netty对三种常用封帧方式的支持\n\n| 方式\\支持 | 解码  | 编码  |\n|:----------|:----------|:----------|\n| 固定长度    | FixedLengthFrameDecoder   | 简单    |\n| 分隔符    | DelimiterBasedFrameDecoder    | 简单    |\n| 固定长度字段存个内容的长度信息    | LengthFieldBasedFrameDecoder    | LengthFieldPrepender   |\n\n\n\n5、解读Netty处理粘包、半包的源码\n\n* 解码的核心工作流程\n\n\n* 解码中两种数据积累器的区别\n\n* 三种解码器的额外控制参数有哪些\n\n\n\n\n\n\n","source":"_posts/TCP粘包:半包 Netty全搞定.md","raw":"---\ntitle: TCP粘包、半包 Netty全搞定\ndate: 2022-03-13 23:59:00\ntags:\n  - Netty\ncategories: Netty\n---\n\n1、什么是粘包和半包？\n\n粘包：一次接收全部消息\n\n半包：分多次接收到多个不完整的消息\n\n\n2、为什么TCP应用会出现粘包和半包现象\n\n粘包的主要原因：\n\n* 发送方每次写入数据 < 套接字缓冲区大小\n* 接收方读取套接字缓冲区数据不及时\n\n半包的主要原因：\n\n* 发送方写入数据 > 套接字缓冲区大小\n* 发送的数据大于协议的MTU(Maximum Transmission Unit，最大传输单元)，必须拆包\n\n\n收发：\n一个发送可能被多次接收，多个发送可能被一次接收\n\n传输：\n一个发送可能占用多个传输包，多个发送可能公用一个传输包\n\n根本原因：TCP是流式协议，消息无边界\n\n\n3、解决粘包和半包问题的几种常用方法\n\n解决问题的根本手段：找出消息边界：\n\n| 方式\\比较  | 寻找消息边界方式  | 优点  | 缺点  | 推荐度  |\n|:----------|:----------|:----------|:----------|:----------|\n| TCP连接改成短链接，一个请求一个短连接    | 建立连接到释放连接之间的信息即为传输消息    | 简单    | 效率低下    | 推荐度    |\n| (封装成帧)固定长度    | 满足固定长度即可    | 简单    | 空间浪费    | 不推荐    |\n| （封装成帧）分隔符    | 分隔符之间    | 空间不浪费，也比较简单    | 内容本身出现分隔符时需转义，所以需要扫描内容    | 推荐    |\n| (封装成帧)固定长度字段存内容的长度信息    | 先解析固定长度的字段获取长度，然后读取后续内容    | 精确定位用户数据，内容也不用转义    | 长度理论上有限制，需提前预知可能的最大长度从而定义长度占用字节数    | 推荐   |\n| (封装成帧)其他方式    | json   | 需要衡量实际场景，对现有协议的支持  |\n\n\n\n4、Netty对三种常用封帧方式的支持\n\n| 方式\\支持 | 解码  | 编码  |\n|:----------|:----------|:----------|\n| 固定长度    | FixedLengthFrameDecoder   | 简单    |\n| 分隔符    | DelimiterBasedFrameDecoder    | 简单    |\n| 固定长度字段存个内容的长度信息    | LengthFieldBasedFrameDecoder    | LengthFieldPrepender   |\n\n\n\n5、解读Netty处理粘包、半包的源码\n\n* 解码的核心工作流程\n\n\n* 解码中两种数据积累器的区别\n\n* 三种解码器的额外控制参数有哪些\n\n\n\n\n\n\n","slug":"TCP粘包:半包 Netty全搞定","published":1,"updated":"2024-01-12T13:57:35.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrc892az000i6xyw9vtzb139","content":"<p>1、什么是粘包和半包？</p>\n<p>粘包：一次接收全部消息</p>\n<p>半包：分多次接收到多个不完整的消息</p>\n<p>2、为什么TCP应用会出现粘包和半包现象</p>\n<p>粘包的主要原因：</p>\n<ul>\n<li>发送方每次写入数据 &lt; 套接字缓冲区大小</li>\n<li>接收方读取套接字缓冲区数据不及时</li>\n</ul>\n<p>半包的主要原因：</p>\n<ul>\n<li>发送方写入数据 &gt; 套接字缓冲区大小</li>\n<li>发送的数据大于协议的MTU(Maximum Transmission Unit，最大传输单元)，必须拆包</li>\n</ul>\n<p>收发：<br>一个发送可能被多次接收，多个发送可能被一次接收</p>\n<p>传输：<br>一个发送可能占用多个传输包，多个发送可能公用一个传输包</p>\n<p>根本原因：TCP是流式协议，消息无边界</p>\n<p>3、解决粘包和半包问题的几种常用方法</p>\n<p>解决问题的根本手段：找出消息边界：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方式\\比较</th>\n<th align=\"left\">寻找消息边界方式</th>\n<th align=\"left\">优点</th>\n<th align=\"left\">缺点</th>\n<th align=\"left\">推荐度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">TCP连接改成短链接，一个请求一个短连接</td>\n<td align=\"left\">建立连接到释放连接之间的信息即为传输消息</td>\n<td align=\"left\">简单</td>\n<td align=\"left\">效率低下</td>\n<td align=\"left\">推荐度</td>\n</tr>\n<tr>\n<td align=\"left\">(封装成帧)固定长度</td>\n<td align=\"left\">满足固定长度即可</td>\n<td align=\"left\">简单</td>\n<td align=\"left\">空间浪费</td>\n<td align=\"left\">不推荐</td>\n</tr>\n<tr>\n<td align=\"left\">（封装成帧）分隔符</td>\n<td align=\"left\">分隔符之间</td>\n<td align=\"left\">空间不浪费，也比较简单</td>\n<td align=\"left\">内容本身出现分隔符时需转义，所以需要扫描内容</td>\n<td align=\"left\">推荐</td>\n</tr>\n<tr>\n<td align=\"left\">(封装成帧)固定长度字段存内容的长度信息</td>\n<td align=\"left\">先解析固定长度的字段获取长度，然后读取后续内容</td>\n<td align=\"left\">精确定位用户数据，内容也不用转义</td>\n<td align=\"left\">长度理论上有限制，需提前预知可能的最大长度从而定义长度占用字节数</td>\n<td align=\"left\">推荐</td>\n</tr>\n<tr>\n<td align=\"left\">(封装成帧)其他方式</td>\n<td align=\"left\">json</td>\n<td align=\"left\">需要衡量实际场景，对现有协议的支持</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>4、Netty对三种常用封帧方式的支持</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方式\\支持</th>\n<th align=\"left\">解码</th>\n<th align=\"left\">编码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">固定长度</td>\n<td align=\"left\">FixedLengthFrameDecoder</td>\n<td align=\"left\">简单</td>\n</tr>\n<tr>\n<td align=\"left\">分隔符</td>\n<td align=\"left\">DelimiterBasedFrameDecoder</td>\n<td align=\"left\">简单</td>\n</tr>\n<tr>\n<td align=\"left\">固定长度字段存个内容的长度信息</td>\n<td align=\"left\">LengthFieldBasedFrameDecoder</td>\n<td align=\"left\">LengthFieldPrepender</td>\n</tr>\n</tbody></table>\n<p>5、解读Netty处理粘包、半包的源码</p>\n<ul>\n<li><p>解码的核心工作流程</p>\n</li>\n<li><p>解码中两种数据积累器的区别</p>\n</li>\n<li><p>三种解码器的额外控制参数有哪些</p>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<p>1、什么是粘包和半包？</p>\n<p>粘包：一次接收全部消息</p>\n<p>半包：分多次接收到多个不完整的消息</p>\n<p>2、为什么TCP应用会出现粘包和半包现象</p>\n<p>粘包的主要原因：</p>\n<ul>\n<li>发送方每次写入数据 &lt; 套接字缓冲区大小</li>\n<li>接收方读取套接字缓冲区数据不及时</li>\n</ul>\n<p>半包的主要原因：</p>\n<ul>\n<li>发送方写入数据 &gt; 套接字缓冲区大小</li>\n<li>发送的数据大于协议的MTU(Maximum Transmission Unit，最大传输单元)，必须拆包</li>\n</ul>\n<p>收发：<br>一个发送可能被多次接收，多个发送可能被一次接收</p>\n<p>传输：<br>一个发送可能占用多个传输包，多个发送可能公用一个传输包</p>\n<p>根本原因：TCP是流式协议，消息无边界</p>\n<p>3、解决粘包和半包问题的几种常用方法</p>\n<p>解决问题的根本手段：找出消息边界：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方式\\比较</th>\n<th align=\"left\">寻找消息边界方式</th>\n<th align=\"left\">优点</th>\n<th align=\"left\">缺点</th>\n<th align=\"left\">推荐度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">TCP连接改成短链接，一个请求一个短连接</td>\n<td align=\"left\">建立连接到释放连接之间的信息即为传输消息</td>\n<td align=\"left\">简单</td>\n<td align=\"left\">效率低下</td>\n<td align=\"left\">推荐度</td>\n</tr>\n<tr>\n<td align=\"left\">(封装成帧)固定长度</td>\n<td align=\"left\">满足固定长度即可</td>\n<td align=\"left\">简单</td>\n<td align=\"left\">空间浪费</td>\n<td align=\"left\">不推荐</td>\n</tr>\n<tr>\n<td align=\"left\">（封装成帧）分隔符</td>\n<td align=\"left\">分隔符之间</td>\n<td align=\"left\">空间不浪费，也比较简单</td>\n<td align=\"left\">内容本身出现分隔符时需转义，所以需要扫描内容</td>\n<td align=\"left\">推荐</td>\n</tr>\n<tr>\n<td align=\"left\">(封装成帧)固定长度字段存内容的长度信息</td>\n<td align=\"left\">先解析固定长度的字段获取长度，然后读取后续内容</td>\n<td align=\"left\">精确定位用户数据，内容也不用转义</td>\n<td align=\"left\">长度理论上有限制，需提前预知可能的最大长度从而定义长度占用字节数</td>\n<td align=\"left\">推荐</td>\n</tr>\n<tr>\n<td align=\"left\">(封装成帧)其他方式</td>\n<td align=\"left\">json</td>\n<td align=\"left\">需要衡量实际场景，对现有协议的支持</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>4、Netty对三种常用封帧方式的支持</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方式\\支持</th>\n<th align=\"left\">解码</th>\n<th align=\"left\">编码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">固定长度</td>\n<td align=\"left\">FixedLengthFrameDecoder</td>\n<td align=\"left\">简单</td>\n</tr>\n<tr>\n<td align=\"left\">分隔符</td>\n<td align=\"left\">DelimiterBasedFrameDecoder</td>\n<td align=\"left\">简单</td>\n</tr>\n<tr>\n<td align=\"left\">固定长度字段存个内容的长度信息</td>\n<td align=\"left\">LengthFieldBasedFrameDecoder</td>\n<td align=\"left\">LengthFieldPrepender</td>\n</tr>\n</tbody></table>\n<p>5、解读Netty处理粘包、半包的源码</p>\n<ul>\n<li><p>解码的核心工作流程</p>\n</li>\n<li><p>解码中两种数据积累器的区别</p>\n</li>\n<li><p>三种解码器的额外控制参数有哪些</p>\n</li>\n</ul>\n"},{"title":"netty三种IO的支持","date":"2022-03-13T15:25:00.000Z","_content":"\n### 什么是经典的三种I/O模式？\n\n| 场景  | 模式  | jdk支持  |\n|:----------|:----------|:----------|\n| 排队打饭    | BIO(阻塞I/O)    | jdk1.4之前    |\n| 点单、等待被叫模式    | NIO(非阻塞I/O)  | JDK1.4   |\n| 包厢   | AIO（非阻塞异步I/O）    | JDK1.7    |\n\n\n### Netty对三种I/O模式的支持？\n曾经对于三种IO都曾做过支持\n\n### 为什么Netty仅支持NIO了？\n\n1、不建议使用阻塞I/O（BIO/OIO），因为在连接数高的情况下，阻塞意味着占用一个线程，比较耗资源，效率非常低。\n2、对于不同平台支持的成熟度不同，windows实现成熟，但是很少用来做服务器。linux常用来做服务器，但是AIO不够成熟，并且Linux下AIO相比较NIO的性能提升不明显。\n\n### 为什么Netty有多种NIO实现 ？\n通用的NIO实现在Linux下也是使用epoll，为什么Netty还要单独实现？\n\n1、因为Netty实现得更好，Netty暴露了更多的可控参数，例如：\n* JDK的NIO默认实现是水平触发\n* Netty是边缘触发和水平触发可切换\n\n```ps：单独解释边缘触发啊和水平触发```\n\n2、Netty实现的垃圾回收更少、性能更好\n\n### NIO一定优于BIO吗？\n\n1、BIO代码简单\n2、特定场景：连接数少、并发度低、BIO性能不输NIO\n\n### 源码解读Netty怎么切换I/O模式？\n\n怎么切换？\n\n原理是什么？\n\n为什么服务器开发并不需要切换客户端对应的socket？\n\n","source":"_posts/netty三种IO的支持.md","raw":"---\ntitle: netty三种IO的支持\ndate: 2022-03-13 23:25:00\ntags:\n  - Netty \ncategories: Netty\n---\n\n### 什么是经典的三种I/O模式？\n\n| 场景  | 模式  | jdk支持  |\n|:----------|:----------|:----------|\n| 排队打饭    | BIO(阻塞I/O)    | jdk1.4之前    |\n| 点单、等待被叫模式    | NIO(非阻塞I/O)  | JDK1.4   |\n| 包厢   | AIO（非阻塞异步I/O）    | JDK1.7    |\n\n\n### Netty对三种I/O模式的支持？\n曾经对于三种IO都曾做过支持\n\n### 为什么Netty仅支持NIO了？\n\n1、不建议使用阻塞I/O（BIO/OIO），因为在连接数高的情况下，阻塞意味着占用一个线程，比较耗资源，效率非常低。\n2、对于不同平台支持的成熟度不同，windows实现成熟，但是很少用来做服务器。linux常用来做服务器，但是AIO不够成熟，并且Linux下AIO相比较NIO的性能提升不明显。\n\n### 为什么Netty有多种NIO实现 ？\n通用的NIO实现在Linux下也是使用epoll，为什么Netty还要单独实现？\n\n1、因为Netty实现得更好，Netty暴露了更多的可控参数，例如：\n* JDK的NIO默认实现是水平触发\n* Netty是边缘触发和水平触发可切换\n\n```ps：单独解释边缘触发啊和水平触发```\n\n2、Netty实现的垃圾回收更少、性能更好\n\n### NIO一定优于BIO吗？\n\n1、BIO代码简单\n2、特定场景：连接数少、并发度低、BIO性能不输NIO\n\n### 源码解读Netty怎么切换I/O模式？\n\n怎么切换？\n\n原理是什么？\n\n为什么服务器开发并不需要切换客户端对应的socket？\n\n","slug":"netty三种IO的支持","published":1,"updated":"2024-01-12T13:57:35.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrc892b0000l6xywau6d5nr6","content":"<h3 id=\"什么是经典的三种I-x2F-O模式？\"><a href=\"#什么是经典的三种I-x2F-O模式？\" class=\"headerlink\" title=\"什么是经典的三种I/O模式？\"></a>什么是经典的三种I/O模式？</h3><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">模式</th>\n<th align=\"left\">jdk支持</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">排队打饭</td>\n<td align=\"left\">BIO(阻塞I/O)</td>\n<td align=\"left\">jdk1.4之前</td>\n</tr>\n<tr>\n<td align=\"left\">点单、等待被叫模式</td>\n<td align=\"left\">NIO(非阻塞I/O)</td>\n<td align=\"left\">JDK1.4</td>\n</tr>\n<tr>\n<td align=\"left\">包厢</td>\n<td align=\"left\">AIO（非阻塞异步I/O）</td>\n<td align=\"left\">JDK1.7</td>\n</tr>\n</tbody></table>\n<h3 id=\"Netty对三种I-x2F-O模式的支持？\"><a href=\"#Netty对三种I-x2F-O模式的支持？\" class=\"headerlink\" title=\"Netty对三种I/O模式的支持？\"></a>Netty对三种I/O模式的支持？</h3><p>曾经对于三种IO都曾做过支持</p>\n<h3 id=\"为什么Netty仅支持NIO了？\"><a href=\"#为什么Netty仅支持NIO了？\" class=\"headerlink\" title=\"为什么Netty仅支持NIO了？\"></a>为什么Netty仅支持NIO了？</h3><p>1、不建议使用阻塞I/O（BIO/OIO），因为在连接数高的情况下，阻塞意味着占用一个线程，比较耗资源，效率非常低。<br>2、对于不同平台支持的成熟度不同，windows实现成熟，但是很少用来做服务器。linux常用来做服务器，但是AIO不够成熟，并且Linux下AIO相比较NIO的性能提升不明显。</p>\n<h3 id=\"为什么Netty有多种NIO实现-？\"><a href=\"#为什么Netty有多种NIO实现-？\" class=\"headerlink\" title=\"为什么Netty有多种NIO实现 ？\"></a>为什么Netty有多种NIO实现 ？</h3><p>通用的NIO实现在Linux下也是使用epoll，为什么Netty还要单独实现？</p>\n<p>1、因为Netty实现得更好，Netty暴露了更多的可控参数，例如：</p>\n<ul>\n<li>JDK的NIO默认实现是水平触发</li>\n<li>Netty是边缘触发和水平触发可切换</li>\n</ul>\n<p><code>ps：单独解释边缘触发啊和水平触发</code></p>\n<p>2、Netty实现的垃圾回收更少、性能更好</p>\n<h3 id=\"NIO一定优于BIO吗？\"><a href=\"#NIO一定优于BIO吗？\" class=\"headerlink\" title=\"NIO一定优于BIO吗？\"></a>NIO一定优于BIO吗？</h3><p>1、BIO代码简单<br>2、特定场景：连接数少、并发度低、BIO性能不输NIO</p>\n<h3 id=\"源码解读Netty怎么切换I-x2F-O模式？\"><a href=\"#源码解读Netty怎么切换I-x2F-O模式？\" class=\"headerlink\" title=\"源码解读Netty怎么切换I/O模式？\"></a>源码解读Netty怎么切换I/O模式？</h3><p>怎么切换？</p>\n<p>原理是什么？</p>\n<p>为什么服务器开发并不需要切换客户端对应的socket？</p>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h3 id=\"什么是经典的三种I-x2F-O模式？\"><a href=\"#什么是经典的三种I-x2F-O模式？\" class=\"headerlink\" title=\"什么是经典的三种I&#x2F;O模式？\"></a>什么是经典的三种I&#x2F;O模式？</h3><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">模式</th>\n<th align=\"left\">jdk支持</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">排队打饭</td>\n<td align=\"left\">BIO(阻塞I&#x2F;O)</td>\n<td align=\"left\">jdk1.4之前</td>\n</tr>\n<tr>\n<td align=\"left\">点单、等待被叫模式</td>\n<td align=\"left\">NIO(非阻塞I&#x2F;O)</td>\n<td align=\"left\">JDK1.4</td>\n</tr>\n<tr>\n<td align=\"left\">包厢</td>\n<td align=\"left\">AIO（非阻塞异步I&#x2F;O）</td>\n<td align=\"left\">JDK1.7</td>\n</tr>\n</tbody></table>\n<h3 id=\"Netty对三种I-x2F-O模式的支持？\"><a href=\"#Netty对三种I-x2F-O模式的支持？\" class=\"headerlink\" title=\"Netty对三种I&#x2F;O模式的支持？\"></a>Netty对三种I&#x2F;O模式的支持？</h3><p>曾经对于三种IO都曾做过支持</p>\n<h3 id=\"为什么Netty仅支持NIO了？\"><a href=\"#为什么Netty仅支持NIO了？\" class=\"headerlink\" title=\"为什么Netty仅支持NIO了？\"></a>为什么Netty仅支持NIO了？</h3><p>1、不建议使用阻塞I&#x2F;O（BIO&#x2F;OIO），因为在连接数高的情况下，阻塞意味着占用一个线程，比较耗资源，效率非常低。<br>2、对于不同平台支持的成熟度不同，windows实现成熟，但是很少用来做服务器。linux常用来做服务器，但是AIO不够成熟，并且Linux下AIO相比较NIO的性能提升不明显。</p>\n<h3 id=\"为什么Netty有多种NIO实现-？\"><a href=\"#为什么Netty有多种NIO实现-？\" class=\"headerlink\" title=\"为什么Netty有多种NIO实现 ？\"></a>为什么Netty有多种NIO实现 ？</h3><p>通用的NIO实现在Linux下也是使用epoll，为什么Netty还要单独实现？</p>\n<p>1、因为Netty实现得更好，Netty暴露了更多的可控参数，例如：</p>\n<ul>\n<li>JDK的NIO默认实现是水平触发</li>\n<li>Netty是边缘触发和水平触发可切换</li>\n</ul>\n<p><code>ps：单独解释边缘触发啊和水平触发</code></p>\n<p>2、Netty实现的垃圾回收更少、性能更好</p>\n<h3 id=\"NIO一定优于BIO吗？\"><a href=\"#NIO一定优于BIO吗？\" class=\"headerlink\" title=\"NIO一定优于BIO吗？\"></a>NIO一定优于BIO吗？</h3><p>1、BIO代码简单<br>2、特定场景：连接数少、并发度低、BIO性能不输NIO</p>\n<h3 id=\"源码解读Netty怎么切换I-x2F-O模式？\"><a href=\"#源码解读Netty怎么切换I-x2F-O模式？\" class=\"headerlink\" title=\"源码解读Netty怎么切换I&#x2F;O模式？\"></a>源码解读Netty怎么切换I&#x2F;O模式？</h3><p>怎么切换？</p>\n<p>原理是什么？</p>\n<p>为什么服务器开发并不需要切换客户端对应的socket？</p>\n"},{"title":"netty如何支持三种Reactor","date":"2022-03-13T01:25:00.000Z","summary":"什么是Reactor?以及如何在Netty中使用Reactor模式?","_content":"### 什么是Reactor及三种版本\n* Reactor单线程\n  客户端请求到达服务端，服务端创建一个线程处理读取、解码、业务处理、编码、返回响应一整个流程\n\n* Reactor多线程模式\n  将解码、业务处理、编码的这三个操作都由工作线程池来处理\n\n* 主从Reactor多线程模式\n\n主Reactor负责接收请求，从Reactor负责读请求和写响应，工作线程负责解码、业务处理、编码。\n\nReactor是一种开发模式，模式的核心流程：\n注册感兴趣的事件 ->扫描是否有感兴趣的事件发生 ->事件发生后做出相应处理\n\n| client/server  | SocketChannel/ServerSocketChannel  | OP_ACCEPT  | OP_CONNECT  | OP_WRITE  | OP_READ  |\n|:----------|:----------|:----------|:----------|:----------|:----------|\n| client    | SocketChannel    |    | Y    | Y    | Y    |\n| server    | ServerSocketChannel    | Y    |      |      |     |\n| server    | SocketChannel    |     |      | Y    | Y    |\n\n\n\n### 如何在Netty中使用Reactor模式\n\n* Reactor单线程模式：\n```\nEventLoopGroup eventGroup = new NioEventLoopGroup(1);\nServerBootstrap serverBootstrap = new ServerBootstrap();\nserverBootstrap.group(eventGroup);\n```\n\n* 非主从Reactor多线程模式\n```\nEventLoopGroup eventGroup = new NioEventLoopGroup();\nServerBootstrap serverBootstrap = new ServerBootstrap();\nserverBootstrap.group(eventGroup);\n```\n\n* 主从Reactor多线程模式\n```\nEventLoopGroup bossGroup = new NioEventLoopGroup();\nEventLoopGroup workerGroup = new NioEventLoopGroup();\nServerBootstrap serverBootstrap = new ServerBootstrap();\nserverBootstrap.group(bossGroup, workerGroup)\n```\n\n\n### 解析Netty对Reactor模式支持的常见疑问\n\nNetty如何支持主从Reactor模式？\n\n通过传递过来的channel创建子Channel，两种SocketChannel绑定到两个Gruop里面去，这样就完成了主从Reactor模式的支持。\n\n为什么说Netty的main reactor大多数并不能用到一个线程组，只能线程组里的一个？\n因为一个服务器一般来说只用绑定一个地址，一个端口\n\n\nNetty给Channel分配NIO event loop的规则是什么？\n\n1、增值、取模、取正值\n\n2、executors总数是2的幂次方然后&运算\n\n\n通常模式的NIO实现多路复用器是怎么跨平台的？\n通过JDK 读取平台信息 ，创建适合不同平台的实现\n\n\n\n\n\n\n\n","source":"_posts/netty如何支持三种Reactor.md","raw":"---\ntitle: netty如何支持三种Reactor\ndate: 2022-03-13 09:25:00\ntags:\n  - Netty\nsummary: 什么是Reactor?以及如何在Netty中使用Reactor模式?\ncategories: Netty\n---\n### 什么是Reactor及三种版本\n* Reactor单线程\n  客户端请求到达服务端，服务端创建一个线程处理读取、解码、业务处理、编码、返回响应一整个流程\n\n* Reactor多线程模式\n  将解码、业务处理、编码的这三个操作都由工作线程池来处理\n\n* 主从Reactor多线程模式\n\n主Reactor负责接收请求，从Reactor负责读请求和写响应，工作线程负责解码、业务处理、编码。\n\nReactor是一种开发模式，模式的核心流程：\n注册感兴趣的事件 ->扫描是否有感兴趣的事件发生 ->事件发生后做出相应处理\n\n| client/server  | SocketChannel/ServerSocketChannel  | OP_ACCEPT  | OP_CONNECT  | OP_WRITE  | OP_READ  |\n|:----------|:----------|:----------|:----------|:----------|:----------|\n| client    | SocketChannel    |    | Y    | Y    | Y    |\n| server    | ServerSocketChannel    | Y    |      |      |     |\n| server    | SocketChannel    |     |      | Y    | Y    |\n\n\n\n### 如何在Netty中使用Reactor模式\n\n* Reactor单线程模式：\n```\nEventLoopGroup eventGroup = new NioEventLoopGroup(1);\nServerBootstrap serverBootstrap = new ServerBootstrap();\nserverBootstrap.group(eventGroup);\n```\n\n* 非主从Reactor多线程模式\n```\nEventLoopGroup eventGroup = new NioEventLoopGroup();\nServerBootstrap serverBootstrap = new ServerBootstrap();\nserverBootstrap.group(eventGroup);\n```\n\n* 主从Reactor多线程模式\n```\nEventLoopGroup bossGroup = new NioEventLoopGroup();\nEventLoopGroup workerGroup = new NioEventLoopGroup();\nServerBootstrap serverBootstrap = new ServerBootstrap();\nserverBootstrap.group(bossGroup, workerGroup)\n```\n\n\n### 解析Netty对Reactor模式支持的常见疑问\n\nNetty如何支持主从Reactor模式？\n\n通过传递过来的channel创建子Channel，两种SocketChannel绑定到两个Gruop里面去，这样就完成了主从Reactor模式的支持。\n\n为什么说Netty的main reactor大多数并不能用到一个线程组，只能线程组里的一个？\n因为一个服务器一般来说只用绑定一个地址，一个端口\n\n\nNetty给Channel分配NIO event loop的规则是什么？\n\n1、增值、取模、取正值\n\n2、executors总数是2的幂次方然后&运算\n\n\n通常模式的NIO实现多路复用器是怎么跨平台的？\n通过JDK 读取平台信息 ，创建适合不同平台的实现\n\n\n\n\n\n\n\n","slug":"netty如何支持三种Reactor","published":1,"updated":"2024-01-12T13:57:35.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrc892b0000m6xywft206e3l","content":"<h3 id=\"什么是Reactor及三种版本\"><a href=\"#什么是Reactor及三种版本\" class=\"headerlink\" title=\"什么是Reactor及三种版本\"></a>什么是Reactor及三种版本</h3><ul>\n<li><p>Reactor单线程<br>客户端请求到达服务端，服务端创建一个线程处理读取、解码、业务处理、编码、返回响应一整个流程</p>\n</li>\n<li><p>Reactor多线程模式<br>将解码、业务处理、编码的这三个操作都由工作线程池来处理</p>\n</li>\n<li><p>主从Reactor多线程模式</p>\n</li>\n</ul>\n<p>主Reactor负责接收请求，从Reactor负责读请求和写响应，工作线程负责解码、业务处理、编码。</p>\n<p>Reactor是一种开发模式，模式的核心流程：<br>注册感兴趣的事件 -&gt;扫描是否有感兴趣的事件发生 -&gt;事件发生后做出相应处理</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">client/server</th>\n<th align=\"left\">SocketChannel/ServerSocketChannel</th>\n<th align=\"left\">OP_ACCEPT</th>\n<th align=\"left\">OP_CONNECT</th>\n<th align=\"left\">OP_WRITE</th>\n<th align=\"left\">OP_READ</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">client</td>\n<td align=\"left\">SocketChannel</td>\n<td align=\"left\"></td>\n<td align=\"left\">Y</td>\n<td align=\"left\">Y</td>\n<td align=\"left\">Y</td>\n</tr>\n<tr>\n<td align=\"left\">server</td>\n<td align=\"left\">ServerSocketChannel</td>\n<td align=\"left\">Y</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">server</td>\n<td align=\"left\">SocketChannel</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">Y</td>\n<td align=\"left\">Y</td>\n</tr>\n</tbody></table>\n<h3 id=\"如何在Netty中使用Reactor模式\"><a href=\"#如何在Netty中使用Reactor模式\" class=\"headerlink\" title=\"如何在Netty中使用Reactor模式\"></a>如何在Netty中使用Reactor模式</h3><ul>\n<li><p>Reactor单线程模式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">EventLoopGroup eventGroup = new NioEventLoopGroup(1);\nServerBootstrap serverBootstrap = new ServerBootstrap();\nserverBootstrap.group(eventGroup);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>非主从Reactor多线程模式</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">EventLoopGroup eventGroup = new NioEventLoopGroup();\nServerBootstrap serverBootstrap = new ServerBootstrap();\nserverBootstrap.group(eventGroup);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>主从Reactor多线程模式</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">EventLoopGroup bossGroup = new NioEventLoopGroup();\nEventLoopGroup workerGroup = new NioEventLoopGroup();\nServerBootstrap serverBootstrap = new ServerBootstrap();\nserverBootstrap.group(bossGroup, workerGroup)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"解析Netty对Reactor模式支持的常见疑问\"><a href=\"#解析Netty对Reactor模式支持的常见疑问\" class=\"headerlink\" title=\"解析Netty对Reactor模式支持的常见疑问\"></a>解析Netty对Reactor模式支持的常见疑问</h3><p>Netty如何支持主从Reactor模式？</p>\n<p>通过传递过来的channel创建子Channel，两种SocketChannel绑定到两个Gruop里面去，这样就完成了主从Reactor模式的支持。</p>\n<p>为什么说Netty的main reactor大多数并不能用到一个线程组，只能线程组里的一个？<br>因为一个服务器一般来说只用绑定一个地址，一个端口</p>\n<p>Netty给Channel分配NIO event loop的规则是什么？</p>\n<p>1、增值、取模、取正值</p>\n<p>2、executors总数是2的幂次方然后&amp;运算</p>\n<p>通常模式的NIO实现多路复用器是怎么跨平台的？<br>通过JDK 读取平台信息 ，创建适合不同平台的实现</p>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h3 id=\"什么是Reactor及三种版本\"><a href=\"#什么是Reactor及三种版本\" class=\"headerlink\" title=\"什么是Reactor及三种版本\"></a>什么是Reactor及三种版本</h3><ul>\n<li><p>Reactor单线程<br>客户端请求到达服务端，服务端创建一个线程处理读取、解码、业务处理、编码、返回响应一整个流程</p>\n</li>\n<li><p>Reactor多线程模式<br>将解码、业务处理、编码的这三个操作都由工作线程池来处理</p>\n</li>\n<li><p>主从Reactor多线程模式</p>\n</li>\n</ul>\n<p>主Reactor负责接收请求，从Reactor负责读请求和写响应，工作线程负责解码、业务处理、编码。</p>\n<p>Reactor是一种开发模式，模式的核心流程：<br>注册感兴趣的事件 -&gt;扫描是否有感兴趣的事件发生 -&gt;事件发生后做出相应处理</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">client&#x2F;server</th>\n<th align=\"left\">SocketChannel&#x2F;ServerSocketChannel</th>\n<th align=\"left\">OP_ACCEPT</th>\n<th align=\"left\">OP_CONNECT</th>\n<th align=\"left\">OP_WRITE</th>\n<th align=\"left\">OP_READ</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">client</td>\n<td align=\"left\">SocketChannel</td>\n<td align=\"left\"></td>\n<td align=\"left\">Y</td>\n<td align=\"left\">Y</td>\n<td align=\"left\">Y</td>\n</tr>\n<tr>\n<td align=\"left\">server</td>\n<td align=\"left\">ServerSocketChannel</td>\n<td align=\"left\">Y</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">server</td>\n<td align=\"left\">SocketChannel</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">Y</td>\n<td align=\"left\">Y</td>\n</tr>\n</tbody></table>\n<h3 id=\"如何在Netty中使用Reactor模式\"><a href=\"#如何在Netty中使用Reactor模式\" class=\"headerlink\" title=\"如何在Netty中使用Reactor模式\"></a>如何在Netty中使用Reactor模式</h3><ul>\n<li><p>Reactor单线程模式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">EventLoopGroup eventGroup &#x3D; new NioEventLoopGroup(1);\nServerBootstrap serverBootstrap &#x3D; new ServerBootstrap();\nserverBootstrap.group(eventGroup);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>非主从Reactor多线程模式</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">EventLoopGroup eventGroup &#x3D; new NioEventLoopGroup();\nServerBootstrap serverBootstrap &#x3D; new ServerBootstrap();\nserverBootstrap.group(eventGroup);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>主从Reactor多线程模式</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">EventLoopGroup bossGroup &#x3D; new NioEventLoopGroup();\nEventLoopGroup workerGroup &#x3D; new NioEventLoopGroup();\nServerBootstrap serverBootstrap &#x3D; new ServerBootstrap();\nserverBootstrap.group(bossGroup, workerGroup)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"解析Netty对Reactor模式支持的常见疑问\"><a href=\"#解析Netty对Reactor模式支持的常见疑问\" class=\"headerlink\" title=\"解析Netty对Reactor模式支持的常见疑问\"></a>解析Netty对Reactor模式支持的常见疑问</h3><p>Netty如何支持主从Reactor模式？</p>\n<p>通过传递过来的channel创建子Channel，两种SocketChannel绑定到两个Gruop里面去，这样就完成了主从Reactor模式的支持。</p>\n<p>为什么说Netty的main reactor大多数并不能用到一个线程组，只能线程组里的一个？<br>因为一个服务器一般来说只用绑定一个地址，一个端口</p>\n<p>Netty给Channel分配NIO event loop的规则是什么？</p>\n<p>1、增值、取模、取正值</p>\n<p>2、executors总数是2的幂次方然后&amp;运算</p>\n<p>通常模式的NIO实现多路复用器是怎么跨平台的？<br>通过JDK 读取平台信息 ，创建适合不同平台的实现</p>\n"},{"title":"netty如何玩转内存使用","date":"2022-03-13T16:01:00.000Z","_content":"\n### Netty如何玩转内存使用\n\n1、减少对象本身大小\n\n2、对分配内存进行预估\n\n3、Zero-Copy 零复制\n\n4、堆外内存\n\n优点：\n1、破除对空间限制，减轻GC压力\n\n2、避免复制\n\n缺点：\n\n1、创建速度稍慢\n\n2、堆外内存受操作系统管理\n\n\n\n5、内存池\n\n为什么引入对象池:\n\n1、创建对象开销大\n2、对象高频率创建且复用\n3、支持并发又能保护系统\n4、维持、共享有限的资源\n\n如何实现对象池？\n\n1、开源实现：Apache Commons Pool\n2、Netty轻量级对象池实现io.netty.util.Recycler\n\n### 源码解读Netty内存使用\n\n1、内存池/非内存池的默认选择及切换方式\nio.netty.channel.DefaultChannelConfig#allocator\n\n2、内存池的实现\nio.netty.buffer.PooledDireByteBuf\n3、堆外内存/堆内内存的默认选择及切换方式\n4、堆外内存的分配本质\n\n\n\n\n","source":"_posts/netty如何玩转内存使用.md","raw":"---\ntitle: netty如何玩转内存使用\ndate: 2022-03-14 00:01:00\ntags:\n  - Netty\ncategories: Netty\n---\n\n### Netty如何玩转内存使用\n\n1、减少对象本身大小\n\n2、对分配内存进行预估\n\n3、Zero-Copy 零复制\n\n4、堆外内存\n\n优点：\n1、破除对空间限制，减轻GC压力\n\n2、避免复制\n\n缺点：\n\n1、创建速度稍慢\n\n2、堆外内存受操作系统管理\n\n\n\n5、内存池\n\n为什么引入对象池:\n\n1、创建对象开销大\n2、对象高频率创建且复用\n3、支持并发又能保护系统\n4、维持、共享有限的资源\n\n如何实现对象池？\n\n1、开源实现：Apache Commons Pool\n2、Netty轻量级对象池实现io.netty.util.Recycler\n\n### 源码解读Netty内存使用\n\n1、内存池/非内存池的默认选择及切换方式\nio.netty.channel.DefaultChannelConfig#allocator\n\n2、内存池的实现\nio.netty.buffer.PooledDireByteBuf\n3、堆外内存/堆内内存的默认选择及切换方式\n4、堆外内存的分配本质\n\n\n\n\n","slug":"netty如何玩转内存使用","published":1,"updated":"2024-01-12T13:57:35.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrc892b0000n6xywciob6bcd","content":"<h3 id=\"Netty如何玩转内存使用\"><a href=\"#Netty如何玩转内存使用\" class=\"headerlink\" title=\"Netty如何玩转内存使用\"></a>Netty如何玩转内存使用</h3><p>1、减少对象本身大小</p>\n<p>2、对分配内存进行预估</p>\n<p>3、Zero-Copy 零复制</p>\n<p>4、堆外内存</p>\n<p>优点：<br>1、破除对空间限制，减轻GC压力</p>\n<p>2、避免复制</p>\n<p>缺点：</p>\n<p>1、创建速度稍慢</p>\n<p>2、堆外内存受操作系统管理</p>\n<p>5、内存池</p>\n<p>为什么引入对象池:</p>\n<p>1、创建对象开销大<br>2、对象高频率创建且复用<br>3、支持并发又能保护系统<br>4、维持、共享有限的资源</p>\n<p>如何实现对象池？</p>\n<p>1、开源实现：Apache Commons Pool<br>2、Netty轻量级对象池实现io.netty.util.Recycler</p>\n<h3 id=\"源码解读Netty内存使用\"><a href=\"#源码解读Netty内存使用\" class=\"headerlink\" title=\"源码解读Netty内存使用\"></a>源码解读Netty内存使用</h3><p>1、内存池/非内存池的默认选择及切换方式<br>io.netty.channel.DefaultChannelConfig#allocator</p>\n<p>2、内存池的实现<br>io.netty.buffer.PooledDireByteBuf<br>3、堆外内存/堆内内存的默认选择及切换方式<br>4、堆外内存的分配本质</p>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h3 id=\"Netty如何玩转内存使用\"><a href=\"#Netty如何玩转内存使用\" class=\"headerlink\" title=\"Netty如何玩转内存使用\"></a>Netty如何玩转内存使用</h3><p>1、减少对象本身大小</p>\n<p>2、对分配内存进行预估</p>\n<p>3、Zero-Copy 零复制</p>\n<p>4、堆外内存</p>\n<p>优点：<br>1、破除对空间限制，减轻GC压力</p>\n<p>2、避免复制</p>\n<p>缺点：</p>\n<p>1、创建速度稍慢</p>\n<p>2、堆外内存受操作系统管理</p>\n<p>5、内存池</p>\n<p>为什么引入对象池:</p>\n<p>1、创建对象开销大<br>2、对象高频率创建且复用<br>3、支持并发又能保护系统<br>4、维持、共享有限的资源</p>\n<p>如何实现对象池？</p>\n<p>1、开源实现：Apache Commons Pool<br>2、Netty轻量级对象池实现io.netty.util.Recycler</p>\n<h3 id=\"源码解读Netty内存使用\"><a href=\"#源码解读Netty内存使用\" class=\"headerlink\" title=\"源码解读Netty内存使用\"></a>源码解读Netty内存使用</h3><p>1、内存池&#x2F;非内存池的默认选择及切换方式<br>io.netty.channel.DefaultChannelConfig#allocator</p>\n<p>2、内存池的实现<br>io.netty.buffer.PooledDireByteBuf<br>3、堆外内存&#x2F;堆内内存的默认选择及切换方式<br>4、堆外内存的分配本质</p>\n"},{"title":"常用的二次编码方式","date":"2022-03-14T15:25:00.000Z","_content":"\n### 为什么需要二次解码\n\n因为一次解码的结果是字节，需要和项目中所使用的对象做转换，方便使用，这层解码器可以称为“二次解码器”。相应的，对应的编码器是为了将java 对象转化成字节流方便传输存储。\n\n一次编码器：ByteToMessageDecoder\n\n* io.netty.buffer.ByteBuf(原始数据流) -> io.netty.buffer.ByteBuf（用户数据）\n\n二次解码器：MessageToMessageDecoder\n* io.betty.buffer.ByteBuf(用户数据) ->Java Object\n\n\n### 常用的二次编解码方式\n* Java序列化\n* Marshing\n* XML\n* JSON\n* MEssagePAck\n* Protobuf\n* 其他\n\n### 选择编解码方式的要点\n* 空间：编码后占用空间\n\n### Protobuf简介与使用\n\n### 源码解读：Netty对二次编码的支持\n\n","source":"_posts/常用的二次编解码方式.md","raw":"---\ntitle: 常用的二次编码方式\ndate: 2022-03-14 23:25:00\ntags:\n  - Netty\ncategories: Netty\n---\n\n### 为什么需要二次解码\n\n因为一次解码的结果是字节，需要和项目中所使用的对象做转换，方便使用，这层解码器可以称为“二次解码器”。相应的，对应的编码器是为了将java 对象转化成字节流方便传输存储。\n\n一次编码器：ByteToMessageDecoder\n\n* io.netty.buffer.ByteBuf(原始数据流) -> io.netty.buffer.ByteBuf（用户数据）\n\n二次解码器：MessageToMessageDecoder\n* io.betty.buffer.ByteBuf(用户数据) ->Java Object\n\n\n### 常用的二次编解码方式\n* Java序列化\n* Marshing\n* XML\n* JSON\n* MEssagePAck\n* Protobuf\n* 其他\n\n### 选择编解码方式的要点\n* 空间：编码后占用空间\n\n### Protobuf简介与使用\n\n### 源码解读：Netty对二次编码的支持\n\n","slug":"常用的二次编解码方式","published":1,"updated":"2024-01-12T13:57:35.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrc892b200166xywaa3cg8yb","content":"<h3 id=\"为什么需要二次解码\"><a href=\"#为什么需要二次解码\" class=\"headerlink\" title=\"为什么需要二次解码\"></a>为什么需要二次解码</h3><p>因为一次解码的结果是字节，需要和项目中所使用的对象做转换，方便使用，这层解码器可以称为“二次解码器”。相应的，对应的编码器是为了将java 对象转化成字节流方便传输存储。</p>\n<p>一次编码器：ByteToMessageDecoder</p>\n<ul>\n<li>io.netty.buffer.ByteBuf(原始数据流) -&gt; io.netty.buffer.ByteBuf（用户数据）</li>\n</ul>\n<p>二次解码器：MessageToMessageDecoder</p>\n<ul>\n<li>io.betty.buffer.ByteBuf(用户数据) -&gt;Java Object</li>\n</ul>\n<h3 id=\"常用的二次编解码方式\"><a href=\"#常用的二次编解码方式\" class=\"headerlink\" title=\"常用的二次编解码方式\"></a>常用的二次编解码方式</h3><ul>\n<li>Java序列化</li>\n<li>Marshing</li>\n<li>XML</li>\n<li>JSON</li>\n<li>MEssagePAck</li>\n<li>Protobuf</li>\n<li>其他</li>\n</ul>\n<h3 id=\"选择编解码方式的要点\"><a href=\"#选择编解码方式的要点\" class=\"headerlink\" title=\"选择编解码方式的要点\"></a>选择编解码方式的要点</h3><ul>\n<li>空间：编码后占用空间</li>\n</ul>\n<h3 id=\"Protobuf简介与使用\"><a href=\"#Protobuf简介与使用\" class=\"headerlink\" title=\"Protobuf简介与使用\"></a>Protobuf简介与使用</h3><h3 id=\"源码解读：Netty对二次编码的支持\"><a href=\"#源码解读：Netty对二次编码的支持\" class=\"headerlink\" title=\"源码解读：Netty对二次编码的支持\"></a>源码解读：Netty对二次编码的支持</h3>","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h3 id=\"为什么需要二次解码\"><a href=\"#为什么需要二次解码\" class=\"headerlink\" title=\"为什么需要二次解码\"></a>为什么需要二次解码</h3><p>因为一次解码的结果是字节，需要和项目中所使用的对象做转换，方便使用，这层解码器可以称为“二次解码器”。相应的，对应的编码器是为了将java 对象转化成字节流方便传输存储。</p>\n<p>一次编码器：ByteToMessageDecoder</p>\n<ul>\n<li>io.netty.buffer.ByteBuf(原始数据流) -&gt; io.netty.buffer.ByteBuf（用户数据）</li>\n</ul>\n<p>二次解码器：MessageToMessageDecoder</p>\n<ul>\n<li>io.betty.buffer.ByteBuf(用户数据) -&gt;Java Object</li>\n</ul>\n<h3 id=\"常用的二次编解码方式\"><a href=\"#常用的二次编解码方式\" class=\"headerlink\" title=\"常用的二次编解码方式\"></a>常用的二次编解码方式</h3><ul>\n<li>Java序列化</li>\n<li>Marshing</li>\n<li>XML</li>\n<li>JSON</li>\n<li>MEssagePAck</li>\n<li>Protobuf</li>\n<li>其他</li>\n</ul>\n<h3 id=\"选择编解码方式的要点\"><a href=\"#选择编解码方式的要点\" class=\"headerlink\" title=\"选择编解码方式的要点\"></a>选择编解码方式的要点</h3><ul>\n<li>空间：编码后占用空间</li>\n</ul>\n<h3 id=\"Protobuf简介与使用\"><a href=\"#Protobuf简介与使用\" class=\"headerlink\" title=\"Protobuf简介与使用\"></a>Protobuf简介与使用</h3><h3 id=\"源码解读：Netty对二次编码的支持\"><a href=\"#源码解读：Netty对二次编码的支持\" class=\"headerlink\" title=\"源码解读：Netty对二次编码的支持\"></a>源码解读：Netty对二次编码的支持</h3>"},{"title":"服务网格","date":"2022-03-24T08:11:00.000Z","_content":"\n### 什么是服务网格？\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/服务网格.md","raw":"---\ntitle: 服务网格\ndate: 2022-03-24 16:11:00\ntags:\n  - ServiceMesh\ncategories: ServiceMesh\n---\n\n### 什么是服务网格？\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"服务网格","published":1,"updated":"2024-01-12T13:57:35.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrc892b300196xyw6aj33hpn","content":"<h3 id=\"什么是服务网格？\"><a href=\"#什么是服务网格？\" class=\"headerlink\" title=\"什么是服务网格？\"></a>什么是服务网格？</h3>","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<h3 id=\"什么是服务网格？\"><a href=\"#什么是服务网格？\" class=\"headerlink\" title=\"什么是服务网格？\"></a>什么是服务网格？</h3>"},{"title":"编写网络应用程序基本步骤","date":"2022-03-13T16:25:00.000Z","_content":"\n编写网络应用程序基本步骤：\n* 需求分析\n* 定义业务数据结构\n* 实现业务逻辑\n* 选择传输协议\n* 定义传输信息结构\n* 选择编解码\n包括：\n1、数据本身编解码\n2、压缩等编解码\n3、粘包/半包处理编解码\n\n* 实现所有的编解码\n* 编写应用程序\n* 测试与改进\n\n\n编写代码->\n复查代码->\n* 检索\"最佳实践\" ->检索\"坑\"->对比经典项目实现->同行评审\n\n临门一脚->\n* 检查是否可诊断\n* 检查是否可度量\n上线->反馈->\n* 收集错误数据\n* 收集性能数据\n\n\n数据结构设计：\n\nFrame\nMessage\nMessage Header\nMessage Body\nlength\nversion\nopCode\nstreamId\noperation/operation result\n\n粘包/半包 -> 封帧 -> 加上length字段\n","source":"_posts/编写网络应用程序基本步骤.md","raw":"---\ntitle: 编写网络应用程序基本步骤\ndate: 2022-03-14 00:25:00\ntags:\n  - Netty\ncategories: Netty\n---\n\n编写网络应用程序基本步骤：\n* 需求分析\n* 定义业务数据结构\n* 实现业务逻辑\n* 选择传输协议\n* 定义传输信息结构\n* 选择编解码\n包括：\n1、数据本身编解码\n2、压缩等编解码\n3、粘包/半包处理编解码\n\n* 实现所有的编解码\n* 编写应用程序\n* 测试与改进\n\n\n编写代码->\n复查代码->\n* 检索\"最佳实践\" ->检索\"坑\"->对比经典项目实现->同行评审\n\n临门一脚->\n* 检查是否可诊断\n* 检查是否可度量\n上线->反馈->\n* 收集错误数据\n* 收集性能数据\n\n\n数据结构设计：\n\nFrame\nMessage\nMessage Header\nMessage Body\nlength\nversion\nopCode\nstreamId\noperation/operation result\n\n粘包/半包 -> 封帧 -> 加上length字段\n","slug":"编写网络应用程序基本步骤","published":1,"updated":"2024-01-12T13:57:35.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrc892b3001a6xywcmib3khx","content":"<p>编写网络应用程序基本步骤：</p>\n<ul>\n<li><p>需求分析</p>\n</li>\n<li><p>定义业务数据结构</p>\n</li>\n<li><p>实现业务逻辑</p>\n</li>\n<li><p>选择传输协议</p>\n</li>\n<li><p>定义传输信息结构</p>\n</li>\n<li><p>选择编解码<br>包括：<br>1、数据本身编解码<br>2、压缩等编解码<br>3、粘包/半包处理编解码</p>\n</li>\n<li><p>实现所有的编解码</p>\n</li>\n<li><p>编写应用程序</p>\n</li>\n<li><p>测试与改进</p>\n</li>\n</ul>\n<p>编写代码-&gt;<br>复查代码-&gt;</p>\n<ul>\n<li>检索”最佳实践” -&gt;检索”坑”-&gt;对比经典项目实现-&gt;同行评审</li>\n</ul>\n<p>临门一脚-&gt;</p>\n<ul>\n<li>检查是否可诊断</li>\n<li>检查是否可度量<br>上线-&gt;反馈-&gt;</li>\n<li>收集错误数据</li>\n<li>收集性能数据</li>\n</ul>\n<p>数据结构设计：</p>\n<p>Frame<br>Message<br>Message Header<br>Message Body<br>length<br>version<br>opCode<br>streamId<br>operation/operation result</p>\n<p>粘包/半包 -&gt; 封帧 -&gt; 加上length字段</p>\n","site":{"data":{"friends":[{"avatar":"https://easterfan.github.io/assets/img/avatar.jpg","name":"Easter","introduction":"温和的倔强派","url":"https://easterfan.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"哈哈哈","artist":"孟慧圆","url":"https://music.163.com/#/song?id=1859899373","cover":"https://p2.music.126.net/cO7TVQHBPgL4aVPDtafogg==/109951166162397411.jpg?param=34y34"}]}},"excerpt":"","more":"<p>编写网络应用程序基本步骤：</p>\n<ul>\n<li><p>需求分析</p>\n</li>\n<li><p>定义业务数据结构</p>\n</li>\n<li><p>实现业务逻辑</p>\n</li>\n<li><p>选择传输协议</p>\n</li>\n<li><p>定义传输信息结构</p>\n</li>\n<li><p>选择编解码<br>包括：<br>1、数据本身编解码<br>2、压缩等编解码<br>3、粘包&#x2F;半包处理编解码</p>\n</li>\n<li><p>实现所有的编解码</p>\n</li>\n<li><p>编写应用程序</p>\n</li>\n<li><p>测试与改进</p>\n</li>\n</ul>\n<p>编写代码-&gt;<br>复查代码-&gt;</p>\n<ul>\n<li>检索”最佳实践” -&gt;检索”坑”-&gt;对比经典项目实现-&gt;同行评审</li>\n</ul>\n<p>临门一脚-&gt;</p>\n<ul>\n<li>检查是否可诊断</li>\n<li>检查是否可度量<br>上线-&gt;反馈-&gt;</li>\n<li>收集错误数据</li>\n<li>收集性能数据</li>\n</ul>\n<p>数据结构设计：</p>\n<p>Frame<br>Message<br>Message Header<br>Message Body<br>length<br>version<br>opCode<br>streamId<br>operation&#x2F;operation result</p>\n<p>粘包&#x2F;半包 -&gt; 封帧 -&gt; 加上length字段</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clrc892au00016xyw8sec2346","category_id":"clrc892aw00036xywaqlggpuu","_id":"clrc892ay000b6xyw2jhsblym"},{"post_id":"clrc892az000h6xywcthecmea","category_id":"clrc892b0000j6xywbhdobn2r","_id":"clrc892b1000r6xyw3kxi418g"},{"post_id":"clrc892az000i6xyw9vtzb139","category_id":"clrc892b1000o6xywgnq20etw","_id":"clrc892b1000w6xyw8sjs2up9"},{"post_id":"clrc892b0000l6xywau6d5nr6","category_id":"clrc892b1000o6xywgnq20etw","_id":"clrc892b200106xywdr5x594h"},{"post_id":"clrc892b0000m6xywft206e3l","category_id":"clrc892b1000o6xywgnq20etw","_id":"clrc892b200136xyw3z1p9pok"},{"post_id":"clrc892b0000n6xywciob6bcd","category_id":"clrc892b1000o6xywgnq20etw","_id":"clrc892b200156xywh1s92fwk"},{"post_id":"clrc892b200166xywaa3cg8yb","category_id":"clrc892b1000o6xywgnq20etw","_id":"clrc892b200186xyw8w6x4edm"},{"post_id":"clrc892b3001a6xywcmib3khx","category_id":"clrc892b1000o6xywgnq20etw","_id":"clrc892b3001e6xywh894d5xi"},{"post_id":"clrc892b300196xyw6aj33hpn","category_id":"clrc892b3001b6xyw7oepcqlf","_id":"clrc892b3001g6xyw6zcphec2"}],"PostTag":[{"post_id":"clrc892au00016xyw8sec2346","tag_id":"clrc892ax00046xyw93mf396y","_id":"clrc892ay00086xywe2xb0qir"},{"post_id":"clrc892az000h6xywcthecmea","tag_id":"clrc892b0000k6xyw22ui2nut","_id":"clrc892b1000q6xywenz39fvg"},{"post_id":"clrc892az000i6xyw9vtzb139","tag_id":"clrc892b1000p6xyw6api512u","_id":"clrc892b1000u6xywgjnb19pp"},{"post_id":"clrc892b0000l6xywau6d5nr6","tag_id":"clrc892b1000p6xyw6api512u","_id":"clrc892b1000y6xywc6gu4o0k"},{"post_id":"clrc892b0000m6xywft206e3l","tag_id":"clrc892b1000p6xyw6api512u","_id":"clrc892b200126xywczlqan3h"},{"post_id":"clrc892b0000n6xywciob6bcd","tag_id":"clrc892b1000p6xyw6api512u","_id":"clrc892b200146xyw7y9q733p"},{"post_id":"clrc892b200166xywaa3cg8yb","tag_id":"clrc892b1000p6xyw6api512u","_id":"clrc892b200176xywe59vddok"},{"post_id":"clrc892b3001a6xywcmib3khx","tag_id":"clrc892b1000p6xyw6api512u","_id":"clrc892b3001d6xyw7orh7lnd"},{"post_id":"clrc892b300196xyw6aj33hpn","tag_id":"clrc892b3001c6xyw9tpt8o4s","_id":"clrc892b3001f6xywe7x173xq"}],"Tag":[{"name":"kafka","_id":"clrc892ax00046xyw93mf396y"},{"name":"Kubernetes","_id":"clrc892b0000k6xyw22ui2nut"},{"name":"Netty","_id":"clrc892b1000p6xyw6api512u"},{"name":"ServiceMesh","_id":"clrc892b3001c6xyw9tpt8o4s"}]}}